// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matmult,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.412000,HLS_SYN_LAT=11060401,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=5,HLS_SYN_FF=634,HLS_SYN_LUT=948}" *)

module matmult (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_q0,
        b_address0,
        b_ce0,
        b_q0,
        out_r_address0,
        out_r_ce0,
        out_r_we0,
        out_r_d0
);

parameter    ap_ST_st1_fsm_0 = 18'b1;
parameter    ap_ST_st2_fsm_1 = 18'b10;
parameter    ap_ST_st3_fsm_2 = 18'b100;
parameter    ap_ST_st4_fsm_3 = 18'b1000;
parameter    ap_ST_st5_fsm_4 = 18'b10000;
parameter    ap_ST_st6_fsm_5 = 18'b100000;
parameter    ap_ST_st7_fsm_6 = 18'b1000000;
parameter    ap_ST_st8_fsm_7 = 18'b10000000;
parameter    ap_ST_st9_fsm_8 = 18'b100000000;
parameter    ap_ST_st10_fsm_9 = 18'b1000000000;
parameter    ap_ST_st11_fsm_10 = 18'b10000000000;
parameter    ap_ST_st12_fsm_11 = 18'b100000000000;
parameter    ap_ST_st13_fsm_12 = 18'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 18'b10000000000000;
parameter    ap_ST_st15_fsm_14 = 18'b100000000000000;
parameter    ap_ST_st16_fsm_15 = 18'b1000000000000000;
parameter    ap_ST_st17_fsm_16 = 18'b10000000000000000;
parameter    ap_ST_st18_fsm_17 = 18'b100000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv7_0 = 7'b0000000;
parameter    ap_const_lv14_0 = 14'b00000000000000;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv14_64 = 14'b1100100;
parameter    ap_const_lv7_64 = 7'b1100100;
parameter    ap_const_lv7_1 = 7'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] a_address0;
output   a_ce0;
input  [31:0] a_q0;
output  [13:0] b_address0;
output   b_ce0;
input  [31:0] b_q0;
output  [13:0] out_r_address0;
output   out_r_ce0;
output   out_r_we0;
output  [31:0] out_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_ce0;
reg b_ce0;
reg out_r_ce0;
reg out_r_we0;

(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_33;
wire   [13:0] next_mul2_fu_188_p2;
reg   [13:0] next_mul2_reg_319;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_66;
wire   [6:0] i_1_fu_200_p2;
reg   [6:0] i_1_reg_327;
wire   [6:0] j_1_fu_212_p2;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_77;
wire   [13:0] next_mul_fu_223_p2;
reg   [13:0] next_mul_reg_340;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_86;
wire   [6:0] k_1_fu_235_p2;
reg   [6:0] k_1_reg_348;
wire   [0:0] exitcond2_fu_229_p2;
reg   [31:0] a_load_reg_358;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_102;
wire   [6:0] j_3_fu_262_p2;
reg   [6:0] j_3_reg_366;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_111;
wire   [0:0] exitcond1_fu_256_p2;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_124;
reg   [6:0] out_vec_addr_2_reg_381;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_133;
wire   [31:0] grp_fu_183_p2;
reg   [31:0] tmp_9_reg_386;
reg    ap_sig_cseq_ST_st10_fsm_9;
reg    ap_sig_142;
wire   [31:0] out_vec_q0;
reg   [31:0] out_vec_load_1_reg_391;
wire   [31:0] grp_fu_179_p2;
reg   [31:0] tmp_s_reg_396;
reg    ap_sig_cseq_ST_st15_fsm_14;
reg    ap_sig_153;
wire   [6:0] j_2_fu_294_p2;
reg   [6:0] j_2_reg_404;
reg    ap_sig_cseq_ST_st17_fsm_16;
reg    ap_sig_162;
wire   [13:0] tmp_7_fu_309_p2;
reg   [13:0] tmp_7_reg_409;
wire   [0:0] exitcond_fu_288_p2;
reg   [6:0] out_vec_address0;
reg    out_vec_ce0;
reg    out_vec_we0;
reg   [31:0] out_vec_d0;
reg   [6:0] i_reg_99;
reg   [13:0] phi_mul1_reg_110;
reg   [6:0] j_reg_122;
wire   [0:0] exitcond3_fu_206_p2;
wire   [0:0] exitcond4_fu_194_p2;
reg   [6:0] k_reg_133;
reg   [13:0] phi_mul_reg_144;
reg   [6:0] j1_reg_156;
reg    ap_sig_cseq_ST_st16_fsm_15;
reg    ap_sig_214;
reg   [6:0] j2_reg_168;
reg    ap_sig_cseq_ST_st18_fsm_17;
reg    ap_sig_223;
wire   [63:0] tmp_1_fu_218_p1;
wire   [63:0] tmp_4_cast_fu_251_p1;
wire   [63:0] tmp_10_cast_fu_278_p1;
wire   [63:0] tmp_8_fu_283_p1;
wire   [63:0] tmp_5_fu_300_p1;
wire   [63:0] tmp_7_cast_fu_315_p1;
reg    ap_sig_cseq_ST_st11_fsm_10;
reg    ap_sig_247;
wire   [13:0] tmp_3_cast_fu_241_p1;
wire   [13:0] tmp_4_fu_245_p2;
wire   [13:0] tmp_8_cast_fu_268_p1;
wire   [13:0] tmp_2_fu_272_p2;
wire   [13:0] tmp_5_cast_fu_305_p1;
reg   [17:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 18'b1;
end

matmult_out_vec #(
    .DataWidth( 32 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
out_vec_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(out_vec_address0),
    .ce0(out_vec_ce0),
    .we0(out_vec_we0),
    .d0(out_vec_d0),
    .q0(out_vec_q0)
);

matmult_fadd_32ns_32ns_32_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmult_fadd_32ns_32ns_32_5_full_dsp_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(out_vec_load_1_reg_391),
    .din1(tmp_9_reg_386),
    .ce(1'b1),
    .dout(grp_fu_179_p2)
);

matmult_fmul_32ns_32ns_32_4_max_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmult_fmul_32ns_32ns_32_4_max_dsp_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_load_reg_358),
    .din1(b_q0),
    .ce(1'b1),
    .dout(grp_fu_183_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st17_fsm_16) & ~(1'b0 == exitcond_fu_288_p2))) begin
        i_reg_99 <= i_1_reg_327;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        i_reg_99 <= ap_const_lv7_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        j1_reg_156 <= ap_const_lv7_0;
    end else if ((1'b1 == ap_sig_cseq_ST_st16_fsm_15)) begin
        j1_reg_156 <= j_3_reg_366;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & ~(exitcond2_fu_229_p2 == 1'b0))) begin
        j2_reg_168 <= ap_const_lv7_0;
    end else if ((1'b1 == ap_sig_cseq_ST_st18_fsm_17)) begin
        j2_reg_168 <= j_2_reg_404;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (1'b0 == exitcond4_fu_194_p2))) begin
        j_reg_122 <= ap_const_lv7_0;
    end else if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & (1'b0 == exitcond3_fu_206_p2))) begin
        j_reg_122 <= j_1_fu_212_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & ~(1'b0 == exitcond1_fu_256_p2))) begin
        k_reg_133 <= k_1_reg_348;
    end else if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & ~(1'b0 == exitcond3_fu_206_p2))) begin
        k_reg_133 <= ap_const_lv7_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st17_fsm_16) & ~(1'b0 == exitcond_fu_288_p2))) begin
        phi_mul1_reg_110 <= next_mul2_reg_319;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        phi_mul1_reg_110 <= ap_const_lv14_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & ~(1'b0 == exitcond1_fu_256_p2))) begin
        phi_mul_reg_144 <= next_mul_reg_340;
    end else if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & ~(1'b0 == exitcond3_fu_206_p2))) begin
        phi_mul_reg_144 <= ap_const_lv14_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        a_load_reg_358 <= a_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        i_1_reg_327 <= i_1_fu_200_p2;
        next_mul2_reg_319 <= next_mul2_fu_188_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st17_fsm_16)) begin
        j_2_reg_404 <= j_2_fu_294_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        j_3_reg_366 <= j_3_fu_262_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        k_1_reg_348 <= k_1_fu_235_p2;
        next_mul_reg_340 <= next_mul_fu_223_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        out_vec_addr_2_reg_381 <= tmp_8_fu_283_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        out_vec_load_1_reg_391 <= out_vec_q0;
        tmp_9_reg_386 <= grp_fu_183_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st17_fsm_16) & (1'b0 == exitcond_fu_288_p2))) begin
        tmp_7_reg_409 <= tmp_7_fu_309_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st15_fsm_14)) begin
        tmp_s_reg_396 <= grp_fu_179_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(1'b0 == exitcond4_fu_194_p2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(1'b0 == exitcond4_fu_194_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_142) begin
        ap_sig_cseq_ST_st10_fsm_9 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_9 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_247) begin
        ap_sig_cseq_ST_st11_fsm_10 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st11_fsm_10 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_153) begin
        ap_sig_cseq_ST_st15_fsm_14 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st15_fsm_14 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_214) begin
        ap_sig_cseq_ST_st16_fsm_15 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st16_fsm_15 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_162) begin
        ap_sig_cseq_ST_st17_fsm_16 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st17_fsm_16 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_223) begin
        ap_sig_cseq_ST_st18_fsm_17 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st18_fsm_17 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_33) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_66) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_77) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_86) begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_102) begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_111) begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_124) begin
        ap_sig_cseq_ST_st7_fsm_6 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_133) begin
        ap_sig_cseq_ST_st9_fsm_8 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st18_fsm_17)) begin
        out_r_ce0 = 1'b1;
    end else begin
        out_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st18_fsm_17)) begin
        out_r_we0 = 1'b1;
    end else begin
        out_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st16_fsm_15)) begin
        out_vec_address0 = out_vec_addr_2_reg_381;
    end else if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        out_vec_address0 = tmp_1_fu_218_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st17_fsm_16)) begin
        out_vec_address0 = tmp_5_fu_300_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        out_vec_address0 = tmp_8_fu_283_p1;
    end else begin
        out_vec_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) | (1'b1 == ap_sig_cseq_ST_st9_fsm_8) | (1'b1 == ap_sig_cseq_ST_st17_fsm_16) | (1'b1 == ap_sig_cseq_ST_st16_fsm_15))) begin
        out_vec_ce0 = 1'b1;
    end else begin
        out_vec_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st16_fsm_15)) begin
        out_vec_d0 = tmp_s_reg_396;
    end else if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        out_vec_d0 = ap_const_lv32_0;
    end else begin
        out_vec_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & (1'b0 == exitcond3_fu_206_p2)) | (1'b1 == ap_sig_cseq_ST_st16_fsm_15))) begin
        out_vec_we0 = 1'b1;
    end else begin
        out_vec_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if (~(1'b0 == exitcond4_fu_194_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : begin
            if ((1'b0 == exitcond3_fu_206_p2)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st4_fsm_3 : begin
            if (~(exitcond2_fu_229_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_st17_fsm_16;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        end
        ap_ST_st5_fsm_4 : begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : begin
            if ((1'b0 == exitcond1_fu_256_p2)) begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st7_fsm_6 : begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : begin
            ap_NS_fsm = ap_ST_st14_fsm_13;
        end
        ap_ST_st14_fsm_13 : begin
            ap_NS_fsm = ap_ST_st15_fsm_14;
        end
        ap_ST_st15_fsm_14 : begin
            ap_NS_fsm = ap_ST_st16_fsm_15;
        end
        ap_ST_st16_fsm_15 : begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st17_fsm_16 : begin
            if ((1'b0 == exitcond_fu_288_p2)) begin
                ap_NS_fsm = ap_ST_st18_fsm_17;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        ap_ST_st18_fsm_17 : begin
            ap_NS_fsm = ap_ST_st17_fsm_16;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address0 = tmp_4_cast_fu_251_p1;

always @ (*) begin
    ap_sig_102 = (1'b1 == ap_CS_fsm[ap_const_lv32_4]);
end

always @ (*) begin
    ap_sig_111 = (1'b1 == ap_CS_fsm[ap_const_lv32_5]);
end

always @ (*) begin
    ap_sig_124 = (1'b1 == ap_CS_fsm[ap_const_lv32_6]);
end

always @ (*) begin
    ap_sig_133 = (1'b1 == ap_CS_fsm[ap_const_lv32_8]);
end

always @ (*) begin
    ap_sig_142 = (1'b1 == ap_CS_fsm[ap_const_lv32_9]);
end

always @ (*) begin
    ap_sig_153 = (1'b1 == ap_CS_fsm[ap_const_lv32_E]);
end

always @ (*) begin
    ap_sig_162 = (1'b1 == ap_CS_fsm[ap_const_lv32_10]);
end

always @ (*) begin
    ap_sig_214 = (1'b1 == ap_CS_fsm[ap_const_lv32_F]);
end

always @ (*) begin
    ap_sig_223 = (1'b1 == ap_CS_fsm[ap_const_lv32_11]);
end

always @ (*) begin
    ap_sig_247 = (1'b1 == ap_CS_fsm[ap_const_lv32_A]);
end

always @ (*) begin
    ap_sig_33 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_66 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_77 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

always @ (*) begin
    ap_sig_86 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

assign b_address0 = tmp_10_cast_fu_278_p1;

assign exitcond1_fu_256_p2 = ((j1_reg_156 == ap_const_lv7_64) ? 1'b1 : 1'b0);

assign exitcond2_fu_229_p2 = ((k_reg_133 == ap_const_lv7_64) ? 1'b1 : 1'b0);

assign exitcond3_fu_206_p2 = ((j_reg_122 == ap_const_lv7_64) ? 1'b1 : 1'b0);

assign exitcond4_fu_194_p2 = ((i_reg_99 == ap_const_lv7_64) ? 1'b1 : 1'b0);

assign exitcond_fu_288_p2 = ((j2_reg_168 == ap_const_lv7_64) ? 1'b1 : 1'b0);

assign i_1_fu_200_p2 = (i_reg_99 + ap_const_lv7_1);

assign j_1_fu_212_p2 = (j_reg_122 + ap_const_lv7_1);

assign j_2_fu_294_p2 = (j2_reg_168 + ap_const_lv7_1);

assign j_3_fu_262_p2 = (j1_reg_156 + ap_const_lv7_1);

assign k_1_fu_235_p2 = (k_reg_133 + ap_const_lv7_1);

assign next_mul2_fu_188_p2 = (phi_mul1_reg_110 + ap_const_lv14_64);

assign next_mul_fu_223_p2 = (phi_mul_reg_144 + ap_const_lv14_64);

assign out_r_address0 = tmp_7_cast_fu_315_p1;

assign out_r_d0 = out_vec_q0;

assign tmp_10_cast_fu_278_p1 = tmp_2_fu_272_p2;

assign tmp_1_fu_218_p1 = j_reg_122;

assign tmp_2_fu_272_p2 = (phi_mul_reg_144 + tmp_8_cast_fu_268_p1);

assign tmp_3_cast_fu_241_p1 = k_reg_133;

assign tmp_4_cast_fu_251_p1 = tmp_4_fu_245_p2;

assign tmp_4_fu_245_p2 = (phi_mul1_reg_110 + tmp_3_cast_fu_241_p1);

assign tmp_5_cast_fu_305_p1 = j2_reg_168;

assign tmp_5_fu_300_p1 = j2_reg_168;

assign tmp_7_cast_fu_315_p1 = tmp_7_reg_409;

assign tmp_7_fu_309_p2 = (phi_mul1_reg_110 + tmp_5_cast_fu_305_p1);

assign tmp_8_cast_fu_268_p1 = j1_reg_156;

assign tmp_8_fu_283_p1 = j1_reg_156;

endmodule //matmult
