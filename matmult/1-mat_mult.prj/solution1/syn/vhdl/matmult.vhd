-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matmult is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    b_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    b_ce0 : OUT STD_LOGIC;
    b_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of matmult is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matmult,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.412000,HLS_SYN_LAT=10020201,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=544,HLS_SYN_LUT=898}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv14_64 : STD_LOGIC_VECTOR (13 downto 0) := "00000001100100";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_28 : BOOLEAN;
    signal next_mul2_fu_157_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal next_mul2_reg_245 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_61 : BOOLEAN;
    signal i_1_fu_169_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_1_reg_253 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_1_fu_181_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_1_reg_261 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_72 : BOOLEAN;
    signal tmp_2_cast_fu_187_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_2_cast_reg_266 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond1_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_addr_reg_271 : STD_LOGIC_VECTOR (13 downto 0);
    signal k_1_fu_208_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_1_reg_279 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_89 : BOOLEAN;
    signal exitcond_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul_fu_229_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal next_mul_reg_289 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_106 : BOOLEAN;
    signal grp_fu_151_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_309 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_116 : BOOLEAN;
    signal grp_fu_146_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_125 : BOOLEAN;
    signal i_reg_77 : STD_LOGIC_VECTOR (6 downto 0);
    signal phi_mul1_reg_88 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_reg_100 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond2_fu_163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal storemerge_reg_111 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_reg_124 : STD_LOGIC_VECTOR (6 downto 0);
    signal phi_mul_reg_135 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_9_cast_fu_197_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_cast_fu_224_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_cast_fu_240_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_162 : BOOLEAN;
    signal tmp_9_fu_191_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_5_cast_fu_214_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_s_fu_218_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_2_fu_235_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);

    component matmult_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matmult_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    matmult_fadd_32ns_32ns_32_5_full_dsp_U1 : component matmult_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => storemerge_reg_111,
        din1 => tmp_6_reg_309,
        ce => ap_const_logic_1,
        dout => grp_fu_146_p2);

    matmult_fmul_32ns_32ns_32_4_max_dsp_U2 : component matmult_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_q0,
        din1 => b_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_151_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_77_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((exitcond1_fu_175_p2 = ap_const_lv1_0)))) then 
                i_reg_77 <= i_1_reg_253;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_77 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j_reg_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond_fu_202_p2)))) then 
                j_reg_100 <= j_1_reg_261;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond2_fu_163_p2))) then 
                j_reg_100 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    k_reg_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
                k_reg_124 <= k_1_reg_279;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond1_fu_175_p2 = ap_const_lv1_0))) then 
                k_reg_124 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    phi_mul1_reg_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((exitcond1_fu_175_p2 = ap_const_lv1_0)))) then 
                phi_mul1_reg_88 <= next_mul2_reg_245;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                phi_mul1_reg_88 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_135_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
                phi_mul_reg_135 <= next_mul_reg_289;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond1_fu_175_p2 = ap_const_lv1_0))) then 
                phi_mul_reg_135 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    storemerge_reg_111_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
                storemerge_reg_111 <= grp_fu_146_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond1_fu_175_p2 = ap_const_lv1_0))) then 
                storemerge_reg_111 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_1_reg_253 <= i_1_fu_169_p2;
                next_mul2_reg_245 <= next_mul2_fu_157_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                j_1_reg_261 <= j_1_fu_181_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                k_1_reg_279 <= k_1_fu_208_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond_fu_202_p2))) then
                next_mul_reg_289 <= next_mul_fu_229_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond1_fu_175_p2 = ap_const_lv1_0))) then
                out_addr_reg_271 <= tmp_9_cast_fu_197_p1(14 - 1 downto 0);
                    tmp_2_cast_reg_266(6 downto 0) <= tmp_2_cast_fu_187_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then
                tmp_6_reg_309 <= grp_fu_151_p2;
            end if;
        end if;
    end process;
    tmp_2_cast_reg_266(13 downto 7) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond1_fu_175_p2, exitcond_fu_202_p2, exitcond2_fu_163_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_lv1_0 = exitcond2_fu_163_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((exitcond1_fu_175_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (not((ap_const_lv1_0 = exitcond_fu_202_p2))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    a_address0 <= tmp_10_cast_fu_224_p1(14 - 1 downto 0);

    a_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond2_fu_163_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond2_fu_163_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond2_fu_163_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond2_fu_163_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_106_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_106 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_116_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_116 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    ap_sig_125_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_125 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    ap_sig_162_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_162 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    ap_sig_28_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_28 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_61_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_61 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_72_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_72 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_89_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_89 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_125)
    begin
        if (ap_sig_125) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_28)
    begin
        if (ap_sig_28) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_61)
    begin
        if (ap_sig_61) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_72)
    begin
        if (ap_sig_72) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_89)
    begin
        if (ap_sig_89) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_106)
    begin
        if (ap_sig_106) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_116)
    begin
        if (ap_sig_116) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_162)
    begin
        if (ap_sig_162) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    b_address0 <= tmp_12_cast_fu_240_p1(14 - 1 downto 0);

    b_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            b_ce0 <= ap_const_logic_1;
        else 
            b_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_175_p2 <= "1" when (j_reg_100 = ap_const_lv7_64) else "0";
    exitcond2_fu_163_p2 <= "1" when (i_reg_77 = ap_const_lv7_64) else "0";
    exitcond_fu_202_p2 <= "1" when (k_reg_124 = ap_const_lv7_64) else "0";
    i_1_fu_169_p2 <= std_logic_vector(unsigned(i_reg_77) + unsigned(ap_const_lv7_1));
    j_1_fu_181_p2 <= std_logic_vector(unsigned(j_reg_100) + unsigned(ap_const_lv7_1));
    k_1_fu_208_p2 <= std_logic_vector(unsigned(k_reg_124) + unsigned(ap_const_lv7_1));
    next_mul2_fu_157_p2 <= std_logic_vector(unsigned(phi_mul1_reg_88) + unsigned(ap_const_lv14_64));
    next_mul_fu_229_p2 <= std_logic_vector(unsigned(phi_mul_reg_135) + unsigned(ap_const_lv14_64));
    out_r_address0 <= out_addr_reg_271;

    out_r_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_r_d0 <= storemerge_reg_111;

    out_r_we0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_cast_fu_224_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_218_p2),64));
    tmp_12_cast_fu_240_p1 <= std_logic_vector(resize(unsigned(tmp_2_fu_235_p2),64));
    tmp_2_cast_fu_187_p1 <= std_logic_vector(resize(unsigned(j_reg_100),14));
    tmp_2_fu_235_p2 <= std_logic_vector(unsigned(phi_mul_reg_135) + unsigned(tmp_2_cast_reg_266));
    tmp_5_cast_fu_214_p1 <= std_logic_vector(resize(unsigned(k_reg_124),14));
    tmp_9_cast_fu_197_p1 <= std_logic_vector(resize(unsigned(tmp_9_fu_191_p2),64));
    tmp_9_fu_191_p2 <= std_logic_vector(unsigned(phi_mul1_reg_88) + unsigned(tmp_2_cast_fu_187_p1));
    tmp_s_fu_218_p2 <= std_logic_vector(unsigned(phi_mul1_reg_88) + unsigned(tmp_5_cast_fu_214_p1));
end behav;
