// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "matmult.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic matmult::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic matmult::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<11> matmult::ap_ST_st1_fsm_0 = "1";
const sc_lv<11> matmult::ap_ST_st2_fsm_1 = "10";
const sc_lv<11> matmult::ap_ST_st3_fsm_2 = "100";
const sc_lv<11> matmult::ap_ST_st4_fsm_3 = "1000";
const sc_lv<11> matmult::ap_ST_st5_fsm_4 = "10000";
const sc_lv<11> matmult::ap_ST_st6_fsm_5 = "100000";
const sc_lv<11> matmult::ap_ST_st7_fsm_6 = "1000000";
const sc_lv<11> matmult::ap_ST_st8_fsm_7 = "10000000";
const sc_lv<11> matmult::ap_ST_st9_fsm_8 = "100000000";
const sc_lv<11> matmult::ap_ST_st10_fsm_9 = "1000000000";
const sc_lv<11> matmult::ap_ST_st11_fsm_10 = "10000000000";
const sc_lv<32> matmult::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> matmult::ap_const_lv1_1 = "1";
const sc_lv<32> matmult::ap_const_lv32_1 = "1";
const sc_lv<32> matmult::ap_const_lv32_2 = "10";
const sc_lv<1> matmult::ap_const_lv1_0 = "0";
const sc_lv<32> matmult::ap_const_lv32_3 = "11";
const sc_lv<32> matmult::ap_const_lv32_4 = "100";
const sc_lv<32> matmult::ap_const_lv32_A = "1010";
const sc_lv<7> matmult::ap_const_lv7_0 = "0000000";
const sc_lv<14> matmult::ap_const_lv14_0 = "00000000000000";
const sc_lv<14> matmult::ap_const_lv14_64 = "1100100";
const sc_lv<7> matmult::ap_const_lv7_64 = "1100100";
const sc_lv<7> matmult::ap_const_lv7_1 = "1";
const sc_lv<32> matmult::ap_const_lv32_5 = "101";

matmult::matmult(sc_module_name name) : sc_module(name), mVcdFile(0) {
    matmult_mul_32s_32s_32_6_U1 = new matmult_mul_32s_32s_32_6<1,6,32,32,32>("matmult_mul_32s_32s_32_6_U1");
    matmult_mul_32s_32s_32_6_U1->clk(ap_clk);
    matmult_mul_32s_32s_32_6_U1->reset(ap_rst);
    matmult_mul_32s_32s_32_6_U1->din0(b_V_load_reg_291);
    matmult_mul_32s_32s_32_6_U1->din1(a_V_load_reg_286);
    matmult_mul_32s_32s_32_6_U1->ce(ap_var_for_const0);
    matmult_mul_32s_32s_32_6_U1->dout(grp_fu_222_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_a_V_address0);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( tmp_6_cast_fu_201_p1 );

    SC_METHOD(thread_a_V_ce0);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond1_fu_140_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond1_fu_140_p2 );

    SC_METHOD(thread_ap_sig_104);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_114);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_185);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_26);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_59);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_70);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_87);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_st11_fsm_10);
    sensitive << ( ap_sig_114 );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_26 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_59 );

    SC_METHOD(thread_ap_sig_cseq_ST_st3_fsm_2);
    sensitive << ( ap_sig_70 );

    SC_METHOD(thread_ap_sig_cseq_ST_st4_fsm_3);
    sensitive << ( ap_sig_87 );

    SC_METHOD(thread_ap_sig_cseq_ST_st5_fsm_4);
    sensitive << ( ap_sig_104 );

    SC_METHOD(thread_ap_sig_cseq_ST_st6_fsm_5);
    sensitive << ( ap_sig_185 );

    SC_METHOD(thread_b_V_address0);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( tmp_8_cast_fu_217_p1 );

    SC_METHOD(thread_b_V_ce0);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_exitcond1_fu_140_p2);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( i_reg_65 );

    SC_METHOD(thread_exitcond2_fu_152_p2);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( j_reg_88 );

    SC_METHOD(thread_exitcond_fu_179_p2);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( k_reg_112 );

    SC_METHOD(thread_i_1_fu_146_p2);
    sensitive << ( i_reg_65 );

    SC_METHOD(thread_j_1_fu_158_p2);
    sensitive << ( j_reg_88 );

    SC_METHOD(thread_k_1_fu_185_p2);
    sensitive << ( k_reg_112 );

    SC_METHOD(thread_next_mul2_fu_134_p2);
    sensitive << ( phi_mul1_reg_76 );

    SC_METHOD(thread_next_mul_fu_206_p2);
    sensitive << ( phi_mul_reg_123 );

    SC_METHOD(thread_out_V_address0);
    sensitive << ( out_V_addr_reg_258 );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_out_V_ce0);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_out_V_d0);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( out_V_load_reg_99 );

    SC_METHOD(thread_out_V_we0);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_tmp_2_cast_fu_164_p1);
    sensitive << ( j_reg_88 );

    SC_METHOD(thread_tmp_3_cast_fu_174_p1);
    sensitive << ( tmp_3_fu_168_p2 );

    SC_METHOD(thread_tmp_3_fu_168_p2);
    sensitive << ( tmp_2_cast_fu_164_p1 );
    sensitive << ( phi_mul1_reg_76 );

    SC_METHOD(thread_tmp_4_cast_fu_191_p1);
    sensitive << ( k_reg_112 );

    SC_METHOD(thread_tmp_5_fu_226_p2);
    sensitive << ( out_V_load_reg_99 );
    sensitive << ( grp_fu_222_p2 );

    SC_METHOD(thread_tmp_6_cast_fu_201_p1);
    sensitive << ( tmp_6_fu_195_p2 );

    SC_METHOD(thread_tmp_6_fu_195_p2);
    sensitive << ( phi_mul1_reg_76 );
    sensitive << ( tmp_4_cast_fu_191_p1 );

    SC_METHOD(thread_tmp_8_cast_fu_217_p1);
    sensitive << ( tmp_8_fu_212_p2 );

    SC_METHOD(thread_tmp_8_fu_212_p2);
    sensitive << ( tmp_2_cast_reg_253 );
    sensitive << ( phi_mul_reg_123 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond2_fu_152_p2 );
    sensitive << ( exitcond_fu_179_p2 );
    sensitive << ( exitcond1_fu_140_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "00000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "matmult_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, a_V_address0, "(port)a_V_address0");
    sc_trace(mVcdFile, a_V_ce0, "(port)a_V_ce0");
    sc_trace(mVcdFile, a_V_q0, "(port)a_V_q0");
    sc_trace(mVcdFile, b_V_address0, "(port)b_V_address0");
    sc_trace(mVcdFile, b_V_ce0, "(port)b_V_ce0");
    sc_trace(mVcdFile, b_V_q0, "(port)b_V_q0");
    sc_trace(mVcdFile, out_V_address0, "(port)out_V_address0");
    sc_trace(mVcdFile, out_V_ce0, "(port)out_V_ce0");
    sc_trace(mVcdFile, out_V_we0, "(port)out_V_we0");
    sc_trace(mVcdFile, out_V_d0, "(port)out_V_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_26, "ap_sig_26");
    sc_trace(mVcdFile, next_mul2_fu_134_p2, "next_mul2_fu_134_p2");
    sc_trace(mVcdFile, next_mul2_reg_232, "next_mul2_reg_232");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_59, "ap_sig_59");
    sc_trace(mVcdFile, i_1_fu_146_p2, "i_1_fu_146_p2");
    sc_trace(mVcdFile, i_1_reg_240, "i_1_reg_240");
    sc_trace(mVcdFile, j_1_fu_158_p2, "j_1_fu_158_p2");
    sc_trace(mVcdFile, j_1_reg_248, "j_1_reg_248");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st3_fsm_2, "ap_sig_cseq_ST_st3_fsm_2");
    sc_trace(mVcdFile, ap_sig_70, "ap_sig_70");
    sc_trace(mVcdFile, tmp_2_cast_fu_164_p1, "tmp_2_cast_fu_164_p1");
    sc_trace(mVcdFile, tmp_2_cast_reg_253, "tmp_2_cast_reg_253");
    sc_trace(mVcdFile, exitcond2_fu_152_p2, "exitcond2_fu_152_p2");
    sc_trace(mVcdFile, out_V_addr_reg_258, "out_V_addr_reg_258");
    sc_trace(mVcdFile, k_1_fu_185_p2, "k_1_fu_185_p2");
    sc_trace(mVcdFile, k_1_reg_266, "k_1_reg_266");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st4_fsm_3, "ap_sig_cseq_ST_st4_fsm_3");
    sc_trace(mVcdFile, ap_sig_87, "ap_sig_87");
    sc_trace(mVcdFile, exitcond_fu_179_p2, "exitcond_fu_179_p2");
    sc_trace(mVcdFile, next_mul_fu_206_p2, "next_mul_fu_206_p2");
    sc_trace(mVcdFile, next_mul_reg_276, "next_mul_reg_276");
    sc_trace(mVcdFile, a_V_load_reg_286, "a_V_load_reg_286");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st5_fsm_4, "ap_sig_cseq_ST_st5_fsm_4");
    sc_trace(mVcdFile, ap_sig_104, "ap_sig_104");
    sc_trace(mVcdFile, b_V_load_reg_291, "b_V_load_reg_291");
    sc_trace(mVcdFile, tmp_5_fu_226_p2, "tmp_5_fu_226_p2");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st11_fsm_10, "ap_sig_cseq_ST_st11_fsm_10");
    sc_trace(mVcdFile, ap_sig_114, "ap_sig_114");
    sc_trace(mVcdFile, i_reg_65, "i_reg_65");
    sc_trace(mVcdFile, phi_mul1_reg_76, "phi_mul1_reg_76");
    sc_trace(mVcdFile, j_reg_88, "j_reg_88");
    sc_trace(mVcdFile, exitcond1_fu_140_p2, "exitcond1_fu_140_p2");
    sc_trace(mVcdFile, out_V_load_reg_99, "out_V_load_reg_99");
    sc_trace(mVcdFile, k_reg_112, "k_reg_112");
    sc_trace(mVcdFile, phi_mul_reg_123, "phi_mul_reg_123");
    sc_trace(mVcdFile, tmp_3_cast_fu_174_p1, "tmp_3_cast_fu_174_p1");
    sc_trace(mVcdFile, tmp_6_cast_fu_201_p1, "tmp_6_cast_fu_201_p1");
    sc_trace(mVcdFile, tmp_8_cast_fu_217_p1, "tmp_8_cast_fu_217_p1");
    sc_trace(mVcdFile, tmp_3_fu_168_p2, "tmp_3_fu_168_p2");
    sc_trace(mVcdFile, tmp_4_cast_fu_191_p1, "tmp_4_cast_fu_191_p1");
    sc_trace(mVcdFile, tmp_6_fu_195_p2, "tmp_6_fu_195_p2");
    sc_trace(mVcdFile, tmp_8_fu_212_p2, "tmp_8_fu_212_p2");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st6_fsm_5, "ap_sig_cseq_ST_st6_fsm_5");
    sc_trace(mVcdFile, ap_sig_185, "ap_sig_185");
    sc_trace(mVcdFile, grp_fu_222_p2, "grp_fu_222_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("matmult.hdltvin.dat");
    mHdltvoutHandle.open("matmult.hdltvout.dat");
}

matmult::~matmult() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete matmult_mul_32s_32s_32_6_U1;
}

void matmult::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void matmult::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
         !esl_seteq<1,1,1>(exitcond2_fu_152_p2.read(), ap_const_lv1_0))) {
        i_reg_65 = i_1_reg_240.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        i_reg_65 = ap_const_lv7_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_179_p2.read()))) {
        j_reg_88 = j_1_reg_248.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_140_p2.read()))) {
        j_reg_88 = ap_const_lv7_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st11_fsm_10.read())) {
        k_reg_112 = k_1_reg_266.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
                esl_seteq<1,1,1>(exitcond2_fu_152_p2.read(), ap_const_lv1_0))) {
        k_reg_112 = ap_const_lv7_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st11_fsm_10.read())) {
        out_V_load_reg_99 = tmp_5_fu_226_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
                esl_seteq<1,1,1>(exitcond2_fu_152_p2.read(), ap_const_lv1_0))) {
        out_V_load_reg_99 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
         !esl_seteq<1,1,1>(exitcond2_fu_152_p2.read(), ap_const_lv1_0))) {
        phi_mul1_reg_76 = next_mul2_reg_232.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        phi_mul1_reg_76 = ap_const_lv14_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st11_fsm_10.read())) {
        phi_mul_reg_123 = next_mul_reg_276.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
                esl_seteq<1,1,1>(exitcond2_fu_152_p2.read(), ap_const_lv1_0))) {
        phi_mul_reg_123 = ap_const_lv14_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read())) {
        a_V_load_reg_286 = a_V_q0.read();
        b_V_load_reg_291 = b_V_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        i_1_reg_240 = i_1_fu_146_p2.read();
        next_mul2_reg_232 = next_mul2_fu_134_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        j_1_reg_248 = j_1_fu_158_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        k_1_reg_266 = k_1_fu_185_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_179_p2.read()))) {
        next_mul_reg_276 = next_mul_fu_206_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && esl_seteq<1,1,1>(exitcond2_fu_152_p2.read(), ap_const_lv1_0))) {
        out_V_addr_reg_258 =  (sc_lv<14>) (tmp_3_cast_fu_174_p1.read());
        tmp_2_cast_reg_253 = tmp_2_cast_fu_164_p1.read();
    }
}

void matmult::thread_a_V_address0() {
    a_V_address0 =  (sc_lv<14>) (tmp_6_cast_fu_201_p1.read());
}

void matmult::thread_a_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        a_V_ce0 = ap_const_logic_1;
    } else {
        a_V_ce0 = ap_const_logic_0;
    }
}

void matmult::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_140_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void matmult::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void matmult::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_140_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void matmult::thread_ap_sig_104() {
    ap_sig_104 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(4, 4));
}

void matmult::thread_ap_sig_114() {
    ap_sig_114 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(10, 10));
}

void matmult::thread_ap_sig_185() {
    ap_sig_185 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(5, 5));
}

void matmult::thread_ap_sig_26() {
    ap_sig_26 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void matmult::thread_ap_sig_59() {
    ap_sig_59 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void matmult::thread_ap_sig_70() {
    ap_sig_70 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(2, 2));
}

void matmult::thread_ap_sig_87() {
    ap_sig_87 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(3, 3));
}

void matmult::thread_ap_sig_cseq_ST_st11_fsm_10() {
    if (ap_sig_114.read()) {
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_0;
    }
}

void matmult::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_26.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void matmult::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_59.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void matmult::thread_ap_sig_cseq_ST_st3_fsm_2() {
    if (ap_sig_70.read()) {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    }
}

void matmult::thread_ap_sig_cseq_ST_st4_fsm_3() {
    if (ap_sig_87.read()) {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    }
}

void matmult::thread_ap_sig_cseq_ST_st5_fsm_4() {
    if (ap_sig_104.read()) {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    }
}

void matmult::thread_ap_sig_cseq_ST_st6_fsm_5() {
    if (ap_sig_185.read()) {
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    }
}

void matmult::thread_b_V_address0() {
    b_V_address0 =  (sc_lv<14>) (tmp_8_cast_fu_217_p1.read());
}

void matmult::thread_b_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        b_V_ce0 = ap_const_logic_1;
    } else {
        b_V_ce0 = ap_const_logic_0;
    }
}

void matmult::thread_exitcond1_fu_140_p2() {
    exitcond1_fu_140_p2 = (!i_reg_65.read().is_01() || !ap_const_lv7_64.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_65.read() == ap_const_lv7_64);
}

void matmult::thread_exitcond2_fu_152_p2() {
    exitcond2_fu_152_p2 = (!j_reg_88.read().is_01() || !ap_const_lv7_64.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_88.read() == ap_const_lv7_64);
}

void matmult::thread_exitcond_fu_179_p2() {
    exitcond_fu_179_p2 = (!k_reg_112.read().is_01() || !ap_const_lv7_64.is_01())? sc_lv<1>(): sc_lv<1>(k_reg_112.read() == ap_const_lv7_64);
}

void matmult::thread_i_1_fu_146_p2() {
    i_1_fu_146_p2 = (!i_reg_65.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(i_reg_65.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void matmult::thread_j_1_fu_158_p2() {
    j_1_fu_158_p2 = (!j_reg_88.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(j_reg_88.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void matmult::thread_k_1_fu_185_p2() {
    k_1_fu_185_p2 = (!k_reg_112.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(k_reg_112.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void matmult::thread_next_mul2_fu_134_p2() {
    next_mul2_fu_134_p2 = (!phi_mul1_reg_76.read().is_01() || !ap_const_lv14_64.is_01())? sc_lv<14>(): (sc_biguint<14>(phi_mul1_reg_76.read()) + sc_biguint<14>(ap_const_lv14_64));
}

void matmult::thread_next_mul_fu_206_p2() {
    next_mul_fu_206_p2 = (!phi_mul_reg_123.read().is_01() || !ap_const_lv14_64.is_01())? sc_lv<14>(): (sc_biguint<14>(phi_mul_reg_123.read()) + sc_biguint<14>(ap_const_lv14_64));
}

void matmult::thread_out_V_address0() {
    out_V_address0 = out_V_addr_reg_258.read();
}

void matmult::thread_out_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        out_V_ce0 = ap_const_logic_1;
    } else {
        out_V_ce0 = ap_const_logic_0;
    }
}

void matmult::thread_out_V_d0() {
    out_V_d0 = out_V_load_reg_99.read();
}

void matmult::thread_out_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()))) {
        out_V_we0 = ap_const_logic_1;
    } else {
        out_V_we0 = ap_const_logic_0;
    }
}

void matmult::thread_tmp_2_cast_fu_164_p1() {
    tmp_2_cast_fu_164_p1 = esl_zext<14,7>(j_reg_88.read());
}

void matmult::thread_tmp_3_cast_fu_174_p1() {
    tmp_3_cast_fu_174_p1 = esl_zext<64,14>(tmp_3_fu_168_p2.read());
}

void matmult::thread_tmp_3_fu_168_p2() {
    tmp_3_fu_168_p2 = (!phi_mul1_reg_76.read().is_01() || !tmp_2_cast_fu_164_p1.read().is_01())? sc_lv<14>(): (sc_biguint<14>(phi_mul1_reg_76.read()) + sc_biguint<14>(tmp_2_cast_fu_164_p1.read()));
}

void matmult::thread_tmp_4_cast_fu_191_p1() {
    tmp_4_cast_fu_191_p1 = esl_zext<14,7>(k_reg_112.read());
}

void matmult::thread_tmp_5_fu_226_p2() {
    tmp_5_fu_226_p2 = (!grp_fu_222_p2.read().is_01() || !out_V_load_reg_99.read().is_01())? sc_lv<32>(): (sc_biguint<32>(grp_fu_222_p2.read()) + sc_biguint<32>(out_V_load_reg_99.read()));
}

void matmult::thread_tmp_6_cast_fu_201_p1() {
    tmp_6_cast_fu_201_p1 = esl_zext<64,14>(tmp_6_fu_195_p2.read());
}

void matmult::thread_tmp_6_fu_195_p2() {
    tmp_6_fu_195_p2 = (!phi_mul1_reg_76.read().is_01() || !tmp_4_cast_fu_191_p1.read().is_01())? sc_lv<14>(): (sc_biguint<14>(phi_mul1_reg_76.read()) + sc_biguint<14>(tmp_4_cast_fu_191_p1.read()));
}

void matmult::thread_tmp_8_cast_fu_217_p1() {
    tmp_8_cast_fu_217_p1 = esl_zext<64,14>(tmp_8_fu_212_p2.read());
}

void matmult::thread_tmp_8_fu_212_p2() {
    tmp_8_fu_212_p2 = (!phi_mul_reg_123.read().is_01() || !tmp_2_cast_reg_253.read().is_01())? sc_lv<14>(): (sc_biguint<14>(phi_mul_reg_123.read()) + sc_biguint<14>(tmp_2_cast_reg_253.read()));
}

void matmult::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_140_p2.read())) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        case 4 : 
            if (esl_seteq<1,1,1>(exitcond2_fu_152_p2.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_st4_fsm_3;
            } else {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            }
            break;
        case 8 : 
            if (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_179_p2.read())) {
                ap_NS_fsm = ap_ST_st5_fsm_4;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_st6_fsm_5;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_st7_fsm_6;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_st8_fsm_7;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_st9_fsm_8;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_st10_fsm_9;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_st11_fsm_10;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXX";
            break;
    }
}

void matmult::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_V_address0\" :  \"" << a_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_V_ce0\" :  \"" << a_V_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"a_V_q0\" :  \"" << a_V_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_V_address0\" :  \"" << b_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_V_ce0\" :  \"" << b_V_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b_V_q0\" :  \"" << b_V_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_V_address0\" :  \"" << out_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_V_ce0\" :  \"" << out_V_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_V_we0\" :  \"" << out_V_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_V_d0\" :  \"" << out_V_d0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

