// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __dut_threshold2_V_2_H__
#define __dut_threshold2_V_2_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct dut_threshold2_V_2_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 8;
  static const unsigned AddressRange = 648;
  static const unsigned AddressWidth = 10;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(dut_threshold2_V_2_ram) {
        for (unsigned i = 0; i < 48 ; i = i + 1) {
            ram[i] = "0b00000000";
        }
        for (unsigned i = 48; i < 112 ; i = i + 1) {
            ram[i] = "0b00000001";
        }
        for (unsigned i = 112; i < 176 ; i = i + 1) {
            ram[i] = "0b00000010";
        }
        for (unsigned i = 176; i < 240 ; i = i + 1) {
            ram[i] = "0b00001010";
        }
        for (unsigned i = 240; i < 304 ; i = i + 1) {
            ram[i] = "0b00001000";
        }
        for (unsigned i = 304; i < 368 ; i = i + 1) {
            ram[i] = "0b00000011";
        }
        for (unsigned i = 368; i < 432 ; i = i + 1) {
            ram[i] = "0b11111001";
        }
        for (unsigned i = 432; i < 496 ; i = i + 1) {
            ram[i] = "0b00000110";
        }
        for (unsigned i = 496; i < 560 ; i = i + 1) {
            ram[i] = "0b00000000";
        }
        for (unsigned i = 560; i < 624 ; i = i + 1) {
            ram[i] = "0b00000101";
        }
        for (unsigned i = 624; i < 648 ; i = i + 1) {
            ram[i] = "0b00000010";
        }


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(dut_threshold2_V_2) {


static const unsigned DataWidth = 8;
static const unsigned AddressRange = 648;
static const unsigned AddressWidth = 10;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


dut_threshold2_V_2_ram* meminst;


SC_CTOR(dut_threshold2_V_2) {
meminst = new dut_threshold2_V_2_ram("dut_threshold2_V_2_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);


meminst->reset(reset);
meminst->clk(clk);
}
~dut_threshold2_V_2() {
    delete meminst;
}


};//endmodule
#endif
