-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_dense is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    input_0_ce0 : OUT STD_LOGIC;
    input_0_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    output_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_0_ce0 : OUT STD_LOGIC;
    output_0_we0 : OUT STD_LOGIC;
    output_0_d0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of dut_dense is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000010";
    constant ap_ST_pp0_stg0_fsm_2 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000100";
    constant ap_ST_pp0_stg1_fsm_3 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000001000";
    constant ap_ST_pp0_stg2_fsm_4 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000010000";
    constant ap_ST_pp0_stg3_fsm_5 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000100000";
    constant ap_ST_pp0_stg4_fsm_6 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000001000000";
    constant ap_ST_st16_fsm_7 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000010000000";
    constant ap_ST_st17_fsm_8 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000100000000";
    constant ap_ST_st18_fsm_9 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000001000000000";
    constant ap_ST_st19_fsm_10 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000010000000000";
    constant ap_ST_st20_fsm_11 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000100000000000";
    constant ap_ST_st21_fsm_12 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000001000000000000";
    constant ap_ST_st22_fsm_13 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000010000000000000";
    constant ap_ST_st23_fsm_14 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000100000000000000";
    constant ap_ST_st24_fsm_15 : STD_LOGIC_VECTOR (26 downto 0) := "000000000001000000000000000";
    constant ap_ST_st25_fsm_16 : STD_LOGIC_VECTOR (26 downto 0) := "000000000010000000000000000";
    constant ap_ST_st26_fsm_17 : STD_LOGIC_VECTOR (26 downto 0) := "000000000100000000000000000";
    constant ap_ST_st27_fsm_18 : STD_LOGIC_VECTOR (26 downto 0) := "000000001000000000000000000";
    constant ap_ST_st28_fsm_19 : STD_LOGIC_VECTOR (26 downto 0) := "000000010000000000000000000";
    constant ap_ST_st29_fsm_20 : STD_LOGIC_VECTOR (26 downto 0) := "000000100000000000000000000";
    constant ap_ST_st30_fsm_21 : STD_LOGIC_VECTOR (26 downto 0) := "000001000000000000000000000";
    constant ap_ST_st31_fsm_22 : STD_LOGIC_VECTOR (26 downto 0) := "000010000000000000000000000";
    constant ap_ST_st32_fsm_23 : STD_LOGIC_VECTOR (26 downto 0) := "000100000000000000000000000";
    constant ap_ST_st33_fsm_24 : STD_LOGIC_VECTOR (26 downto 0) := "001000000000000000000000000";
    constant ap_ST_st34_fsm_25 : STD_LOGIC_VECTOR (26 downto 0) := "010000000000000000000000000";
    constant ap_ST_st35_fsm_26 : STD_LOGIC_VECTOR (26 downto 0) := "100000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_C2C80000 : STD_LOGIC_VECTOR (31 downto 0) := "11000010110010000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_C3800000 : STD_LOGIC_VECTOR (31 downto 0) := "11000011100000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_40000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_const_lv32_3DB504F3 : STD_LOGIC_VECTOR (31 downto 0) := "00111101101101010000010011110011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_44 : BOOLEAN;
    signal w_fc2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal w_fc2_ce0 : STD_LOGIC;
    signal w_fc2_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_fc2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_fc2_ce0 : STD_LOGIC;
    signal b_fc2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal one_out_reg_146 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_reg_158 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_175_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_190 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st19_fsm_10 : STD_LOGIC;
    signal ap_sig_87 : BOOLEAN;
    signal ap_sig_cseq_ST_st28_fsm_19 : STD_LOGIC;
    signal ap_sig_94 : BOOLEAN;
    signal grp_fu_169_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_195 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st24_fsm_15 : STD_LOGIC;
    signal ap_sig_104 : BOOLEAN;
    signal ap_sig_cseq_ST_st33_fsm_24 : STD_LOGIC;
    signal ap_sig_111 : BOOLEAN;
    signal exitcond2_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_121 : BOOLEAN;
    signal n_1_fu_207_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal n_1_reg_397 : STD_LOGIC_VECTOR (3 downto 0);
    signal n_cast6_fu_213_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal n_cast6_reg_402 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_fu_217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_407 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_2 : STD_LOGIC;
    signal ap_sig_137 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_reg_407_pp0_iter1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_407_pp0_iter2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_3_fu_223_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal m_3_reg_411 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_21_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_reg_426 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg1_fsm_3 : STD_LOGIC;
    signal ap_sig_164 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg2_fsm_4 : STD_LOGIC;
    signal ap_sig_175 : BOOLEAN;
    signal grp_fu_182_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_reg_436 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_296_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_reg_446 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st27_fsm_18 : STD_LOGIC;
    signal ap_sig_193 : BOOLEAN;
    signal b_fc2_load_reg_456 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_fu_185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_reg_461 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st34_fsm_25 : STD_LOGIC;
    signal ap_sig_205 : BOOLEAN;
    signal biased_max_fu_385_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st35_fsm_26 : STD_LOGIC;
    signal ap_sig_214 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg4_fsm_6 : STD_LOGIC;
    signal ap_sig_223 : BOOLEAN;
    signal max_reg_122 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_reg_134 : STD_LOGIC_VECTOR (3 downto 0);
    signal m_phi_fu_162_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal newIndex9_fu_270_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_fu_275_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_33_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_169_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_169_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp0_stg3_fsm_5 : STD_LOGIC;
    signal ap_sig_257 : BOOLEAN;
    signal ap_sig_cseq_ST_st20_fsm_11 : STD_LOGIC;
    signal ap_sig_265 : BOOLEAN;
    signal ap_sig_cseq_ST_st29_fsm_20 : STD_LOGIC;
    signal ap_sig_272 : BOOLEAN;
    signal grp_fu_175_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_175_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st16_fsm_7 : STD_LOGIC;
    signal ap_sig_284 : BOOLEAN;
    signal ap_sig_cseq_ST_st25_fsm_16 : STD_LOGIC;
    signal ap_sig_291 : BOOLEAN;
    signal grp_fu_182_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_fu_229_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_fu_233_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_37_fu_245_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl1_cast_fu_251_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp1_fu_255_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_cast_fu_241_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_cast_fu_260_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal w_index_fu_264_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal biased_to_int_fu_301_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_to_int_fu_319_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_305_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_29_fu_315_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_323_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_35_fu_333_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs8_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs7_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (26 downto 0);

    component dut_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_sitofp_32ns_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_fcmp_32ns_32ns_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component dut_dense_w_fc2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component dut_dense_b_fc2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    w_fc2_U : component dut_dense_w_fc2
    generic map (
        DataWidth => 1,
        AddressRange => 2560,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w_fc2_address0,
        ce0 => w_fc2_ce0,
        q0 => w_fc2_q0);

    b_fc2_U : component dut_dense_b_fc2
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_fc2_address0,
        ce0 => b_fc2_ce0,
        q0 => b_fc2_q0);

    dut_fadd_32ns_32ns_32_5_full_dsp_U200 : component dut_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_169_p0,
        din1 => grp_fu_169_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_169_p2);

    dut_fmul_32ns_32ns_32_4_max_dsp_U201 : component dut_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_175_p0,
        din1 => grp_fu_175_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_175_p2);

    dut_sitofp_32ns_32_6_U202 : component dut_sitofp_32ns_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_182_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_182_p1);

    dut_fcmp_32ns_32ns_1_1_U203 : component dut_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => reg_195,
        din1 => max_reg_122,
        opcode => ap_const_lv5_2,
        dout => tmp_32_fu_185_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not((ap_const_lv1_0 = exitcond_fu_217_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond2_fu_201_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_0 = exitcond_reg_407) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_6))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond2_fu_201_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_6) and not((ap_const_lv1_0 = exitcond_reg_407))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_6)) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond2_fu_201_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    m_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = exitcond_reg_407))) then 
                m_reg_158 <= m_3_reg_411;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond2_fu_201_p2 = ap_const_lv1_0))) then 
                m_reg_158 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    max_reg_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_26)) then 
                max_reg_122 <= biased_max_fu_385_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                max_reg_122 <= ap_const_lv32_C2C80000;
            end if; 
        end if;
    end process;

    n_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_26)) then 
                n_reg_134 <= n_1_reg_397;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                n_reg_134 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    one_out_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_4) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_407_pp0_iter2))) then 
                one_out_reg_146 <= grp_fu_169_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond2_fu_201_p2 = ap_const_lv1_0))) then 
                one_out_reg_146 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2)) then
                ap_reg_ppstg_exitcond_reg_407_pp0_iter1 <= exitcond_reg_407;
                ap_reg_ppstg_exitcond_reg_407_pp0_iter2 <= ap_reg_ppstg_exitcond_reg_407_pp0_iter1;
                exitcond_reg_407 <= exitcond_fu_217_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_19)) then
                b_fc2_load_reg_456 <= b_fc2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then
                m_3_reg_411 <= m_3_fu_223_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                n_1_reg_397 <= n_1_fu_207_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond2_fu_201_p2 = ap_const_lv1_0))) then
                    n_cast6_reg_402(3 downto 0) <= n_cast6_fu_213_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_10) or (ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_19))) then
                reg_190 <= grp_fu_175_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_15) or (ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_24))) then
                reg_195 <= grp_fu_169_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_3) and (ap_const_lv1_0 = exitcond_reg_407))) then
                tmp_21_reg_426 <= tmp_21_fu_286_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_4) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_407_pp0_iter1))) then
                tmp_23_reg_436 <= grp_fu_182_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_18)) then
                    tmp_25_reg_446(3 downto 0) <= tmp_25_fu_296_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_25)) then
                tmp_32_reg_461 <= tmp_32_fu_185_p2;
            end if;
        end if;
    end process;
    n_cast6_reg_402(9 downto 4) <= "000000";
    tmp_25_reg_446(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond2_fu_201_p2, exitcond_fu_217_p2, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_pp0_stg2_fsm_4)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond2_fu_201_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                end if;
            when ap_ST_pp0_stg0_fsm_2 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = exitcond_fu_217_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st16_fsm_7;
                end if;
            when ap_ST_pp0_stg1_fsm_3 => 
                ap_NS_fsm <= ap_ST_pp0_stg2_fsm_4;
            when ap_ST_pp0_stg2_fsm_4 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_4) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg3_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st16_fsm_7;
                end if;
            when ap_ST_pp0_stg3_fsm_5 => 
                ap_NS_fsm <= ap_ST_pp0_stg4_fsm_6;
            when ap_ST_pp0_stg4_fsm_6 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
            when ap_ST_st16_fsm_7 => 
                ap_NS_fsm <= ap_ST_st17_fsm_8;
            when ap_ST_st17_fsm_8 => 
                ap_NS_fsm <= ap_ST_st18_fsm_9;
            when ap_ST_st18_fsm_9 => 
                ap_NS_fsm <= ap_ST_st19_fsm_10;
            when ap_ST_st19_fsm_10 => 
                ap_NS_fsm <= ap_ST_st20_fsm_11;
            when ap_ST_st20_fsm_11 => 
                ap_NS_fsm <= ap_ST_st21_fsm_12;
            when ap_ST_st21_fsm_12 => 
                ap_NS_fsm <= ap_ST_st22_fsm_13;
            when ap_ST_st22_fsm_13 => 
                ap_NS_fsm <= ap_ST_st23_fsm_14;
            when ap_ST_st23_fsm_14 => 
                ap_NS_fsm <= ap_ST_st24_fsm_15;
            when ap_ST_st24_fsm_15 => 
                ap_NS_fsm <= ap_ST_st25_fsm_16;
            when ap_ST_st25_fsm_16 => 
                ap_NS_fsm <= ap_ST_st26_fsm_17;
            when ap_ST_st26_fsm_17 => 
                ap_NS_fsm <= ap_ST_st27_fsm_18;
            when ap_ST_st27_fsm_18 => 
                ap_NS_fsm <= ap_ST_st28_fsm_19;
            when ap_ST_st28_fsm_19 => 
                ap_NS_fsm <= ap_ST_st29_fsm_20;
            when ap_ST_st29_fsm_20 => 
                ap_NS_fsm <= ap_ST_st30_fsm_21;
            when ap_ST_st30_fsm_21 => 
                ap_NS_fsm <= ap_ST_st31_fsm_22;
            when ap_ST_st31_fsm_22 => 
                ap_NS_fsm <= ap_ST_st32_fsm_23;
            when ap_ST_st32_fsm_23 => 
                ap_NS_fsm <= ap_ST_st33_fsm_24;
            when ap_ST_st33_fsm_24 => 
                ap_NS_fsm <= ap_ST_st34_fsm_25;
            when ap_ST_st34_fsm_25 => 
                ap_NS_fsm <= ap_ST_st35_fsm_26;
            when ap_ST_st35_fsm_26 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, exitcond2_fu_201_p2, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond2_fu_201_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(exitcond2_fu_201_p2, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond2_fu_201_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_104_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_104 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    ap_sig_111_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_111 <= (ap_const_lv1_1 = ap_CS_fsm(24 downto 24));
    end process;


    ap_sig_121_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_121 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_137_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_137 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_164_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_164 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_175_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_175 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_193_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_193 <= (ap_const_lv1_1 = ap_CS_fsm(18 downto 18));
    end process;


    ap_sig_205_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_205 <= (ap_const_lv1_1 = ap_CS_fsm(25 downto 25));
    end process;


    ap_sig_214_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_214 <= (ap_const_lv1_1 = ap_CS_fsm(26 downto 26));
    end process;


    ap_sig_223_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_223 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    ap_sig_257_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_257 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_265_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_265 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    ap_sig_272_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_272 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    ap_sig_284_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_284 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    ap_sig_291_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_291 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    ap_sig_44_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_44 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_87_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_87 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    ap_sig_94_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_94 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    ap_sig_cseq_ST_pp0_stg0_fsm_2_assign_proc : process(ap_sig_137)
    begin
        if (ap_sig_137) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_pp0_stg1_fsm_3_assign_proc : process(ap_sig_164)
    begin
        if (ap_sig_164) then 
            ap_sig_cseq_ST_pp0_stg1_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg1_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_pp0_stg2_fsm_4_assign_proc : process(ap_sig_175)
    begin
        if (ap_sig_175) then 
            ap_sig_cseq_ST_pp0_stg2_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg2_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_pp0_stg3_fsm_5_assign_proc : process(ap_sig_257)
    begin
        if (ap_sig_257) then 
            ap_sig_cseq_ST_pp0_stg3_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg3_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_pp0_stg4_fsm_6_assign_proc : process(ap_sig_223)
    begin
        if (ap_sig_223) then 
            ap_sig_cseq_ST_pp0_stg4_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg4_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st16_fsm_7_assign_proc : process(ap_sig_284)
    begin
        if (ap_sig_284) then 
            ap_sig_cseq_ST_st16_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st16_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st19_fsm_10_assign_proc : process(ap_sig_87)
    begin
        if (ap_sig_87) then 
            ap_sig_cseq_ST_st19_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st19_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_44)
    begin
        if (ap_sig_44) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st20_fsm_11_assign_proc : process(ap_sig_265)
    begin
        if (ap_sig_265) then 
            ap_sig_cseq_ST_st20_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st24_fsm_15_assign_proc : process(ap_sig_104)
    begin
        if (ap_sig_104) then 
            ap_sig_cseq_ST_st24_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st24_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st25_fsm_16_assign_proc : process(ap_sig_291)
    begin
        if (ap_sig_291) then 
            ap_sig_cseq_ST_st25_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st25_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st27_fsm_18_assign_proc : process(ap_sig_193)
    begin
        if (ap_sig_193) then 
            ap_sig_cseq_ST_st27_fsm_18 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st27_fsm_18 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st28_fsm_19_assign_proc : process(ap_sig_94)
    begin
        if (ap_sig_94) then 
            ap_sig_cseq_ST_st28_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st28_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st29_fsm_20_assign_proc : process(ap_sig_272)
    begin
        if (ap_sig_272) then 
            ap_sig_cseq_ST_st29_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st29_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_121)
    begin
        if (ap_sig_121) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st33_fsm_24_assign_proc : process(ap_sig_111)
    begin
        if (ap_sig_111) then 
            ap_sig_cseq_ST_st33_fsm_24 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st33_fsm_24 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st34_fsm_25_assign_proc : process(ap_sig_205)
    begin
        if (ap_sig_205) then 
            ap_sig_cseq_ST_st34_fsm_25 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st34_fsm_25 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st35_fsm_26_assign_proc : process(ap_sig_214)
    begin
        if (ap_sig_214) then 
            ap_sig_cseq_ST_st35_fsm_26 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st35_fsm_26 <= ap_const_logic_0;
        end if; 
    end process;

    b_fc2_address0 <= tmp_25_fu_296_p1(4 - 1 downto 0);

    b_fc2_ce0_assign_proc : process(ap_sig_cseq_ST_st27_fsm_18)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_18)) then 
            b_fc2_ce0 <= ap_const_logic_1;
        else 
            b_fc2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    biased_max_fu_385_p3 <= 
        reg_195 when (tmp_33_fu_379_p2(0) = '1') else 
        max_reg_122;
    biased_to_int_fu_301_p1 <= reg_195;
    exitcond2_fu_201_p2 <= "1" when (n_reg_134 = ap_const_lv4_A) else "0";
    exitcond_fu_217_p2 <= "1" when (m_phi_fu_162_p4 = ap_const_lv9_100) else "0";

    grp_fu_169_p0_assign_proc : process(one_out_reg_146, reg_190, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg3_fsm_5, ap_sig_cseq_ST_st20_fsm_11, ap_sig_cseq_ST_st29_fsm_20)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_11) or (ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_20))) then 
            grp_fu_169_p0 <= reg_190;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_5))) then 
            grp_fu_169_p0 <= one_out_reg_146;
        else 
            grp_fu_169_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_169_p1_assign_proc : process(ap_reg_ppiten_pp0_it1, tmp_23_reg_436, b_fc2_load_reg_456, ap_sig_cseq_ST_pp0_stg3_fsm_5, ap_sig_cseq_ST_st20_fsm_11, ap_sig_cseq_ST_st29_fsm_20)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_20)) then 
            grp_fu_169_p1 <= b_fc2_load_reg_456;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_11)) then 
            grp_fu_169_p1 <= ap_const_lv32_C3800000;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_5))) then 
            grp_fu_169_p1 <= tmp_23_reg_436;
        else 
            grp_fu_169_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_175_p0_assign_proc : process(one_out_reg_146, reg_195, ap_sig_cseq_ST_st16_fsm_7, ap_sig_cseq_ST_st25_fsm_16)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_16)) then 
            grp_fu_175_p0 <= reg_195;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_7)) then 
            grp_fu_175_p0 <= one_out_reg_146;
        else 
            grp_fu_175_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_175_p1_assign_proc : process(ap_sig_cseq_ST_st16_fsm_7, ap_sig_cseq_ST_st25_fsm_16)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_16)) then 
            grp_fu_175_p1 <= ap_const_lv32_3DB504F3;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_7)) then 
            grp_fu_175_p1 <= ap_const_lv32_40000000;
        else 
            grp_fu_175_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_182_p0 <= std_logic_vector(resize(unsigned(tmp_21_reg_426),32));
    input_0_address0 <= newIndex9_fu_270_p1(9 - 1 downto 0);

    input_0_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            input_0_ce0 <= ap_const_logic_1;
        else 
            input_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_3_fu_223_p2 <= std_logic_vector(unsigned(m_phi_fu_162_p4) + unsigned(ap_const_lv9_1));

    m_phi_fu_162_p4_assign_proc : process(m_reg_158, exitcond_reg_407, ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_reg_ppiten_pp0_it1, m_3_reg_411)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = exitcond_reg_407))) then 
            m_phi_fu_162_p4 <= m_3_reg_411;
        else 
            m_phi_fu_162_p4 <= m_reg_158;
        end if; 
    end process;

    max_to_int_fu_319_p1 <= max_reg_122;
    n_1_fu_207_p2 <= std_logic_vector(unsigned(n_reg_134) + unsigned(ap_const_lv4_1));
    n_cast6_fu_213_p1 <= std_logic_vector(resize(unsigned(n_reg_134),10));
    newIndex9_fu_270_p1 <= std_logic_vector(resize(unsigned(m_phi_fu_162_p4),64));
    notlhs7_fu_355_p2 <= "0" when (tmp_26_fu_323_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_337_p2 <= "0" when (tmp_fu_305_p4 = ap_const_lv8_FF) else "1";
    notrhs8_fu_361_p2 <= "1" when (tmp_35_fu_333_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_343_p2 <= "1" when (tmp_29_fu_315_p1 = ap_const_lv23_0) else "0";
    output_0_address0 <= tmp_25_reg_446(9 - 1 downto 0);

    output_0_ce0_assign_proc : process(ap_sig_cseq_ST_st35_fsm_26)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_26)) then 
            output_0_ce0 <= ap_const_logic_1;
        else 
            output_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_0_d0 <= tmp_33_fu_379_p2;

    output_0_we0_assign_proc : process(ap_sig_cseq_ST_st35_fsm_26)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_26))) then 
            output_0_we0 <= ap_const_logic_1;
        else 
            output_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_251_p1 <= std_logic_vector(resize(unsigned(tmp_37_fu_245_p2),10));
    p_shl_cast_fu_241_p1 <= std_logic_vector(resize(unsigned(p_shl_fu_233_p3),12));
    p_shl_fu_233_p3 <= (tmp_36_fu_229_p1 & ap_const_lv3_0);
    tmp1_cast_fu_260_p1 <= std_logic_vector(resize(unsigned(tmp1_fu_255_p2),12));
    tmp1_fu_255_p2 <= std_logic_vector(unsigned(n_cast6_reg_402) + unsigned(p_shl1_cast_fu_251_p1));
    tmp2_fu_280_p2 <= (input_0_q0 xor ap_const_lv1_1);
    tmp_20_fu_275_p1 <= std_logic_vector(resize(unsigned(w_index_fu_264_p2),64));
    tmp_21_fu_286_p2 <= (w_fc2_q0 xor tmp2_fu_280_p2);
    tmp_25_fu_296_p1 <= std_logic_vector(resize(unsigned(n_reg_134),64));
    tmp_26_fu_323_p4 <= max_to_int_fu_319_p1(30 downto 23);
    tmp_27_fu_349_p2 <= (notrhs_fu_343_p2 or notlhs_fu_337_p2);
    tmp_29_fu_315_p1 <= biased_to_int_fu_301_p1(23 - 1 downto 0);
    tmp_30_fu_367_p2 <= (notrhs8_fu_361_p2 or notlhs7_fu_355_p2);
    tmp_31_fu_373_p2 <= (tmp_27_fu_349_p2 and tmp_30_fu_367_p2);
    tmp_33_fu_379_p2 <= (tmp_31_fu_373_p2 and tmp_32_reg_461);
    tmp_35_fu_333_p1 <= max_to_int_fu_319_p1(23 - 1 downto 0);
    tmp_36_fu_229_p1 <= m_phi_fu_162_p4(8 - 1 downto 0);
    tmp_37_fu_245_p2 <= std_logic_vector(shift_left(unsigned(m_phi_fu_162_p4),to_integer(unsigned('0' & ap_const_lv9_1(9-1 downto 0)))));
    tmp_fu_305_p4 <= biased_to_int_fu_301_p1(30 downto 23);
    w_fc2_address0 <= tmp_20_fu_275_p1(12 - 1 downto 0);

    w_fc2_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            w_fc2_ce0 <= ap_const_logic_1;
        else 
            w_fc2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    w_index_fu_264_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_241_p1) + unsigned(tmp1_cast_fu_260_p1));
end behav;
