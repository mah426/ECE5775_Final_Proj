-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_dense_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    input1_ce0 : OUT STD_LOGIC;
    input1_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input2_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    input2_ce0 : OUT STD_LOGIC;
    input2_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input3_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    input3_ce0 : OUT STD_LOGIC;
    input3_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input4_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    input4_ce0 : OUT STD_LOGIC;
    input4_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input5_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    input5_ce0 : OUT STD_LOGIC;
    input5_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input6_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    input6_ce0 : OUT STD_LOGIC;
    input6_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input7_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    input7_ce0 : OUT STD_LOGIC;
    input7_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input8_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    input8_ce0 : OUT STD_LOGIC;
    input8_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input9_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    input9_ce0 : OUT STD_LOGIC;
    input9_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input10_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    input10_ce0 : OUT STD_LOGIC;
    input10_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input11_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    input11_ce0 : OUT STD_LOGIC;
    input11_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input12_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    input12_ce0 : OUT STD_LOGIC;
    input12_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input13_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    input13_ce0 : OUT STD_LOGIC;
    input13_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input14_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    input14_ce0 : OUT STD_LOGIC;
    input14_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input15_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    input15_ce0 : OUT STD_LOGIC;
    input15_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of dut_dense_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_pp0_stg0_fsm_3 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_pp0_stg1_fsm_4 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_pp0_stg2_fsm_5 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_pp0_stg3_fsm_6 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_pp0_stg4_fsm_7 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_st37_fsm_8 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv32_C4000000 : STD_LOGIC_VECTOR (31 downto 0) := "11000100000000000000000000000000";
    constant ap_const_lv32_40000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_const_lv32_3D800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111101100000000000000000000000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv20_653 : STD_LOGIC_VECTOR (19 downto 0) := "00000000011001010011";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv10_144 : STD_LOGIC_VECTOR (9 downto 0) := "0101000100";
    constant ap_const_lv10_2BC : STD_LOGIC_VECTOR (9 downto 0) := "1010111100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_26 : BOOLEAN;
    signal b_fc1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_fc1_ce0 : STD_LOGIC;
    signal b_fc1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_fc1_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal w_fc1_ce0 : STD_LOGIC;
    signal w_fc1_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal one_out_reg_355 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_reg_367 : STD_LOGIC_VECTOR (9 downto 0);
    signal phi_mul_reg_378 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_389_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_409 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp0_stg1_fsm_4 : STD_LOGIC;
    signal ap_sig_161 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it6 : STD_LOGIC := '0';
    signal ifzero_reg_762 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ifzero_reg_762_pp0_iter4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_3 : STD_LOGIC;
    signal ap_sig_189 : BOOLEAN;
    signal ap_reg_ppstg_ifzero_reg_762_pp0_iter5 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_1_fu_421_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal n_1_reg_633 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_204 : BOOLEAN;
    signal exitcond1_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_addr_reg_643 : STD_LOGIC_VECTOR (8 downto 0);
    signal n_cast4_fu_433_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal n_cast4_reg_648 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_220 : BOOLEAN;
    signal b_fc1_load_reg_653 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_658 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_658_pp0_iter1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_658_pp0_iter2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_3_fu_443_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal m_3_reg_662 : STD_LOGIC_VECTOR (9 downto 0);
    signal next_mul_fu_466_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal next_mul_reg_667 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_25_reg_672 : STD_LOGIC_VECTOR (0 downto 0);
    signal ifzero_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ifzero_reg_762_pp0_iter1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ifzero_reg_762_pp0_iter2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ifzero_reg_762_pp0_iter3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ifzero_reg_762_pp0_iter6 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_766 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg2_fsm_5 : STD_LOGIC;
    signal ap_sig_293 : BOOLEAN;
    signal grp_fu_401_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_reg_776 : STD_LOGIC_VECTOR (31 downto 0);
    signal one_out_1_reg_781 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_395_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_787 : STD_LOGIC_VECTOR (31 downto 0);
    signal one_out_2_reg_792 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_reg_797 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg4_fsm_7 : STD_LOGIC;
    signal ap_sig_325 : BOOLEAN;
    signal n_reg_343 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st37_fsm_8 : STD_LOGIC;
    signal ap_sig_342 : BOOLEAN;
    signal one_out_phi_fu_359_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp0_stg3_fsm_6 : STD_LOGIC;
    signal ap_sig_350 : BOOLEAN;
    signal m_phi_fu_371_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal phi_mul_phi_fu_382_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_4_fu_427_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal newIndex8_fu_500_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_520_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_389_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_389_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_395_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_395_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_401_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_449_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_9_fu_453_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_6_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_486_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal newIndex_fu_492_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal w_index_fu_461_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_15_fu_534_p17 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_534_p18 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_572_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal biased_to_int_fu_588_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_592_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_26_fu_602_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);

    component dut_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_sitofp_32ns_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_fcmp_32ns_32ns_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component dut_mux_16to1_sel32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (0 downto 0);
        din9 : IN STD_LOGIC_VECTOR (0 downto 0);
        din10 : IN STD_LOGIC_VECTOR (0 downto 0);
        din11 : IN STD_LOGIC_VECTOR (0 downto 0);
        din12 : IN STD_LOGIC_VECTOR (0 downto 0);
        din13 : IN STD_LOGIC_VECTOR (0 downto 0);
        din14 : IN STD_LOGIC_VECTOR (0 downto 0);
        din15 : IN STD_LOGIC_VECTOR (0 downto 0);
        din16 : IN STD_LOGIC_VECTOR (0 downto 0);
        din17 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component dut_dense_1_b_fc1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_dense_1_w_fc1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    b_fc1_U : component dut_dense_1_b_fc1
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_fc1_address0,
        ce0 => b_fc1_ce0,
        q0 => b_fc1_q0);

    w_fc1_U : component dut_dense_1_w_fc1
    generic map (
        DataWidth => 1,
        AddressRange => 131072,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w_fc1_address0,
        ce0 => w_fc1_ce0,
        q0 => w_fc1_q0);

    dut_fadd_32ns_32ns_32_5_full_dsp_U176 : component dut_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_389_p0,
        din1 => grp_fu_389_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_389_p2);

    dut_fmul_32ns_32ns_32_4_max_dsp_U177 : component dut_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_395_p0,
        din1 => grp_fu_395_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_395_p2);

    dut_sitofp_32ns_32_6_U178 : component dut_sitofp_32ns_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_401_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_401_p1);

    dut_fcmp_32ns_32ns_1_1_U179 : component dut_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => reg_409,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => tmp_17_fu_404_p2);

    dut_mux_16to1_sel32_1_1_U180 : component dut_mux_16to1_sel32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 1,
        din17_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din1 => input_r_q0,
        din2 => input1_q0,
        din3 => input2_q0,
        din4 => input3_q0,
        din5 => input4_q0,
        din6 => input5_q0,
        din7 => input6_q0,
        din8 => input7_q0,
        din9 => input8_q0,
        din10 => input9_q0,
        din11 => input10_q0,
        din12 => input11_q0,
        din13 => input12_q0,
        din14 => input13_q0,
        din15 => input14_q0,
        din16 => input15_q0,
        din17 => tmp_15_fu_534_p17,
        dout => tmp_15_fu_534_p18);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and not((ap_const_lv1_0 = exitcond_fu_437_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_0 = exitcond_reg_658) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_7))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_7) and not((ap_const_lv1_0 = exitcond_reg_658))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_7)) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_7)) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_7)) then 
                    ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_7)) then 
                    ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_7)) then 
                    ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                    ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    m_reg_367_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_lv1_0 = exitcond_reg_658))) then 
                m_reg_367 <= m_3_reg_662;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                m_reg_367 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    n_reg_343_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_8)) then 
                n_reg_343 <= n_1_reg_633;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                n_reg_343 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    one_out_reg_355_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_658_pp0_iter2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_6))) then 
                one_out_reg_355 <= one_out_1_reg_781;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                one_out_reg_355 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_378_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_lv1_0 = exitcond_reg_658))) then 
                phi_mul_reg_378 <= next_mul_reg_667;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                phi_mul_reg_378 <= ap_const_lv20_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3)) then
                ap_reg_ppstg_exitcond_reg_658_pp0_iter1 <= exitcond_reg_658;
                ap_reg_ppstg_exitcond_reg_658_pp0_iter2 <= ap_reg_ppstg_exitcond_reg_658_pp0_iter1;
                ap_reg_ppstg_ifzero_reg_762_pp0_iter1 <= ifzero_reg_762;
                ap_reg_ppstg_ifzero_reg_762_pp0_iter2 <= ap_reg_ppstg_ifzero_reg_762_pp0_iter1;
                ap_reg_ppstg_ifzero_reg_762_pp0_iter3 <= ap_reg_ppstg_ifzero_reg_762_pp0_iter2;
                ap_reg_ppstg_ifzero_reg_762_pp0_iter4 <= ap_reg_ppstg_ifzero_reg_762_pp0_iter3;
                ap_reg_ppstg_ifzero_reg_762_pp0_iter5 <= ap_reg_ppstg_ifzero_reg_762_pp0_iter4;
                ap_reg_ppstg_ifzero_reg_762_pp0_iter6 <= ap_reg_ppstg_ifzero_reg_762_pp0_iter5;
                exitcond_reg_658 <= exitcond_fu_437_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                b_fc1_load_reg_653 <= b_fc1_q0;
                    n_cast4_reg_648(8 downto 0) <= n_cast4_fu_433_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_lv1_0 = exitcond_fu_437_p2))) then
                ifzero_reg_762 <= ifzero_fu_525_p2;
                tmp_25_reg_672 <= phi_mul_phi_fu_382_p4(19 downto 19);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3))) then
                m_3_reg_662 <= m_3_fu_443_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                n_1_reg_633 <= n_1_fu_421_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_lv1_0 = exitcond_fu_437_p2))) then
                next_mul_reg_667 <= next_mul_fu_466_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_5) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_658_pp0_iter2))) then
                one_out_1_reg_781 <= grp_fu_389_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and not((ap_reg_ppstg_ifzero_reg_762_pp0_iter4 = ap_const_lv1_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3))) then
                one_out_2_reg_792 <= grp_fu_395_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond1_fu_415_p2))) then
                output_addr_reg_643 <= tmp_4_fu_427_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and not((ap_reg_ppstg_ifzero_reg_762_pp0_iter4 = ap_const_lv1_0))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and not((ap_const_lv1_0 = ap_reg_ppstg_ifzero_reg_762_pp0_iter5))))) then
                reg_409 <= grp_fu_389_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_4) and (ap_const_lv1_0 = exitcond_reg_658))) then
                tmp_11_reg_766 <= tmp_11_fu_578_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_5) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_658_pp0_iter1))) then
                tmp_13_reg_776 <= grp_fu_401_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_4) and not((ap_const_lv1_0 = ap_reg_ppstg_ifzero_reg_762_pp0_iter6)))) then
                tmp_18_reg_797 <= tmp_18_fu_624_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not((ap_const_lv1_0 = ap_reg_ppstg_ifzero_reg_762_pp0_iter3)))) then
                tmp_8_reg_787 <= grp_fu_395_p2;
            end if;
        end if;
    end process;
    n_cast4_reg_648(16 downto 9) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it5, ap_reg_ppiten_pp0_it6, exitcond1_fu_415_p2, exitcond_fu_437_p2, ap_sig_cseq_ST_pp0_stg2_fsm_5)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_415_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_3;
            when ap_ST_pp0_stg0_fsm_3 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = exitcond_fu_437_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st37_fsm_8;
                end if;
            when ap_ST_pp0_stg1_fsm_4 => 
                ap_NS_fsm <= ap_ST_pp0_stg2_fsm_5;
            when ap_ST_pp0_stg2_fsm_5 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_5) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it5))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg3_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st37_fsm_8;
                end if;
            when ap_ST_pp0_stg3_fsm_6 => 
                ap_NS_fsm <= ap_ST_pp0_stg4_fsm_7;
            when ap_ST_pp0_stg4_fsm_7 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_3;
            when ap_ST_st37_fsm_8 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;

    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, exitcond1_fu_415_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond1_fu_415_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond1_fu_415_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond1_fu_415_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_161_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_161 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_189_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_189 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_204_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_204 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_220_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_220 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_26_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_26 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_293_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_293 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_325_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_325 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    ap_sig_342_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_342 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    ap_sig_350_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_350 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    ap_sig_cseq_ST_pp0_stg0_fsm_3_assign_proc : process(ap_sig_189)
    begin
        if (ap_sig_189) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_pp0_stg1_fsm_4_assign_proc : process(ap_sig_161)
    begin
        if (ap_sig_161) then 
            ap_sig_cseq_ST_pp0_stg1_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg1_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_pp0_stg2_fsm_5_assign_proc : process(ap_sig_293)
    begin
        if (ap_sig_293) then 
            ap_sig_cseq_ST_pp0_stg2_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg2_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_pp0_stg3_fsm_6_assign_proc : process(ap_sig_350)
    begin
        if (ap_sig_350) then 
            ap_sig_cseq_ST_pp0_stg3_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg3_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_pp0_stg4_fsm_7_assign_proc : process(ap_sig_325)
    begin
        if (ap_sig_325) then 
            ap_sig_cseq_ST_pp0_stg4_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg4_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_26)
    begin
        if (ap_sig_26) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_204)
    begin
        if (ap_sig_204) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st37_fsm_8_assign_proc : process(ap_sig_342)
    begin
        if (ap_sig_342) then 
            ap_sig_cseq_ST_st37_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st37_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_220)
    begin
        if (ap_sig_220) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;

    b_fc1_address0 <= tmp_4_fu_427_p1(8 - 1 downto 0);

    b_fc1_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            b_fc1_ce0 <= ap_const_logic_1;
        else 
            b_fc1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    biased_to_int_fu_588_p1 <= reg_409;
    exitcond1_fu_415_p2 <= "1" when (n_reg_343 = ap_const_lv9_100) else "0";
    exitcond_fu_437_p2 <= "1" when (m_phi_fu_371_p4 = ap_const_lv10_200) else "0";

    grp_fu_389_p0_assign_proc : process(ap_sig_cseq_ST_pp0_stg1_fsm_4, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it3, ap_reg_ppiten_pp0_it5, ap_sig_cseq_ST_pp0_stg2_fsm_5, tmp_8_reg_787, one_out_2_reg_792, one_out_phi_fu_359_p4, ap_sig_cseq_ST_pp0_stg3_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))) then 
            grp_fu_389_p0 <= one_out_2_reg_792;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_5))) then 
            grp_fu_389_p0 <= tmp_8_reg_787;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_6))) then 
            grp_fu_389_p0 <= one_out_phi_fu_359_p4;
        else 
            grp_fu_389_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_389_p1_assign_proc : process(ap_sig_cseq_ST_pp0_stg1_fsm_4, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it3, ap_reg_ppiten_pp0_it5, b_fc1_load_reg_653, ap_sig_cseq_ST_pp0_stg2_fsm_5, tmp_13_reg_776, ap_sig_cseq_ST_pp0_stg3_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))) then 
            grp_fu_389_p1 <= b_fc1_load_reg_653;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_5))) then 
            grp_fu_389_p1 <= ap_const_lv32_C4000000;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_6))) then 
            grp_fu_389_p1 <= tmp_13_reg_776;
        else 
            grp_fu_389_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_395_p0_assign_proc : process(reg_409, ap_reg_ppiten_pp0_it4, ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_pp0_stg2_fsm_5, one_out_1_reg_781, ap_sig_cseq_ST_pp0_stg3_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_5))) then 
            grp_fu_395_p0 <= reg_409;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_6))) then 
            grp_fu_395_p0 <= one_out_1_reg_781;
        else 
            grp_fu_395_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_395_p1_assign_proc : process(ap_reg_ppiten_pp0_it4, ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_pp0_stg2_fsm_5, ap_sig_cseq_ST_pp0_stg3_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_5))) then 
            grp_fu_395_p1 <= ap_const_lv32_3D800000;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_6))) then 
            grp_fu_395_p1 <= ap_const_lv32_40000000;
        else 
            grp_fu_395_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_401_p0 <= std_logic_vector(resize(unsigned(tmp_11_reg_766),32));
    ifzero_fu_525_p2 <= "1" when (m_3_fu_443_p2 = ap_const_lv10_200) else "0";
    input10_address0 <= newIndex8_fu_500_p1(9 - 1 downto 0);

    input10_ce0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg0_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3))) then 
            input10_ce0 <= ap_const_logic_1;
        else 
            input10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input11_address0 <= newIndex8_fu_500_p1(9 - 1 downto 0);

    input11_ce0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg0_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3))) then 
            input11_ce0 <= ap_const_logic_1;
        else 
            input11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input12_address0 <= newIndex8_fu_500_p1(9 - 1 downto 0);

    input12_ce0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg0_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3))) then 
            input12_ce0 <= ap_const_logic_1;
        else 
            input12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input13_address0 <= newIndex8_fu_500_p1(9 - 1 downto 0);

    input13_ce0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg0_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3))) then 
            input13_ce0 <= ap_const_logic_1;
        else 
            input13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input14_address0 <= newIndex8_fu_500_p1(9 - 1 downto 0);

    input14_ce0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg0_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3))) then 
            input14_ce0 <= ap_const_logic_1;
        else 
            input14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input15_address0 <= newIndex8_fu_500_p1(9 - 1 downto 0);

    input15_ce0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg0_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3))) then 
            input15_ce0 <= ap_const_logic_1;
        else 
            input15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input1_address0 <= newIndex8_fu_500_p1(9 - 1 downto 0);

    input1_ce0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg0_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3))) then 
            input1_ce0 <= ap_const_logic_1;
        else 
            input1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input2_address0 <= newIndex8_fu_500_p1(9 - 1 downto 0);

    input2_ce0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg0_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3))) then 
            input2_ce0 <= ap_const_logic_1;
        else 
            input2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input3_address0 <= newIndex8_fu_500_p1(9 - 1 downto 0);

    input3_ce0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg0_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3))) then 
            input3_ce0 <= ap_const_logic_1;
        else 
            input3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input4_address0 <= newIndex8_fu_500_p1(9 - 1 downto 0);

    input4_ce0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg0_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3))) then 
            input4_ce0 <= ap_const_logic_1;
        else 
            input4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input5_address0 <= newIndex8_fu_500_p1(9 - 1 downto 0);

    input5_ce0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg0_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3))) then 
            input5_ce0 <= ap_const_logic_1;
        else 
            input5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input6_address0 <= newIndex8_fu_500_p1(9 - 1 downto 0);

    input6_ce0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg0_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3))) then 
            input6_ce0 <= ap_const_logic_1;
        else 
            input6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input7_address0 <= newIndex8_fu_500_p1(9 - 1 downto 0);

    input7_ce0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg0_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3))) then 
            input7_ce0 <= ap_const_logic_1;
        else 
            input7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input8_address0 <= newIndex8_fu_500_p1(9 - 1 downto 0);

    input8_ce0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg0_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3))) then 
            input8_ce0 <= ap_const_logic_1;
        else 
            input8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input9_address0 <= newIndex8_fu_500_p1(9 - 1 downto 0);

    input9_ce0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg0_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3))) then 
            input9_ce0 <= ap_const_logic_1;
        else 
            input9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_r_address0 <= newIndex8_fu_500_p1(9 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg0_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_3_fu_443_p2 <= std_logic_vector(unsigned(m_phi_fu_371_p4) + unsigned(ap_const_lv10_1));

    m_phi_fu_371_p4_assign_proc : process(m_reg_367, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg0_fsm_3, exitcond_reg_658, m_3_reg_662)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_lv1_0 = exitcond_reg_658))) then 
            m_phi_fu_371_p4 <= m_3_reg_662;
        else 
            m_phi_fu_371_p4 <= m_reg_367;
        end if; 
    end process;

    n_1_fu_421_p2 <= std_logic_vector(unsigned(n_reg_343) + unsigned(ap_const_lv9_1));
    n_cast4_fu_433_p1 <= std_logic_vector(resize(unsigned(n_reg_343),17));
    newIndex8_fu_500_p1 <= std_logic_vector(resize(unsigned(newIndex_fu_492_p3),64));
    newIndex_fu_492_p3 <= 
        m_phi_fu_371_p4 when (tmp_6_fu_480_p2(0) = '1') else 
        tmp_7_fu_486_p2;
    next_mul_fu_466_p2 <= std_logic_vector(unsigned(ap_const_lv20_653) + unsigned(phi_mul_phi_fu_382_p4));
    notlhs_fu_606_p2 <= "0" when (tmp_fu_592_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_612_p2 <= "1" when (tmp_26_fu_602_p1 = ap_const_lv23_0) else "0";

    one_out_phi_fu_359_p4_assign_proc : process(one_out_reg_355, ap_reg_ppiten_pp0_it2, ap_reg_ppstg_exitcond_reg_658_pp0_iter2, one_out_1_reg_781, ap_sig_cseq_ST_pp0_stg3_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_658_pp0_iter2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_6))) then 
            one_out_phi_fu_359_p4 <= one_out_1_reg_781;
        else 
            one_out_phi_fu_359_p4 <= one_out_reg_355;
        end if; 
    end process;

    output_r_address0 <= output_addr_reg_643;

    output_r_ce0_assign_proc : process(ap_reg_ppiten_pp0_it6, ap_sig_cseq_ST_pp0_stg2_fsm_5)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_5))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= tmp_18_reg_797;

    output_r_we0_assign_proc : process(ap_reg_ppiten_pp0_it6, ap_reg_ppstg_ifzero_reg_762_pp0_iter6, ap_sig_cseq_ST_pp0_stg2_fsm_5)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_5) and not((ap_const_lv1_0 = ap_reg_ppstg_ifzero_reg_762_pp0_iter6))))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    phi_mul_phi_fu_382_p4_assign_proc : process(phi_mul_reg_378, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg0_fsm_3, exitcond_reg_658, next_mul_reg_667)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_lv1_0 = exitcond_reg_658))) then 
            phi_mul_phi_fu_382_p4 <= next_mul_reg_667;
        else 
            phi_mul_phi_fu_382_p4 <= phi_mul_reg_378;
        end if; 
    end process;

    tmp1_fu_572_p2 <= (tmp_15_fu_534_p18 xor ap_const_lv1_1);
    tmp_10_fu_520_p1 <= std_logic_vector(resize(unsigned(w_index_fu_461_p2),64));
    tmp_11_fu_578_p2 <= (w_fc1_q0 xor tmp1_fu_572_p2);
    tmp_15_fu_534_p17 <= std_logic_vector(resize(unsigned(tmp_25_reg_672),32));
    tmp_16_fu_618_p2 <= (notrhs_fu_612_p2 or notlhs_fu_606_p2);
    tmp_18_fu_624_p2 <= (tmp_16_fu_618_p2 and tmp_17_fu_404_p2);
    tmp_22_fu_449_p1 <= m_phi_fu_371_p4(9 - 1 downto 0);
    tmp_26_fu_602_p1 <= biased_to_int_fu_588_p1(23 - 1 downto 0);
    tmp_4_fu_427_p1 <= std_logic_vector(resize(unsigned(n_reg_343),64));
    tmp_6_fu_480_p2 <= "1" when (unsigned(m_phi_fu_371_p4) < unsigned(ap_const_lv10_144)) else "0";
    tmp_7_fu_486_p2 <= std_logic_vector(signed(ap_const_lv10_2BC) + signed(m_phi_fu_371_p4));
    tmp_9_fu_453_p3 <= (tmp_22_fu_449_p1 & ap_const_lv8_0);
    tmp_fu_592_p4 <= biased_to_int_fu_588_p1(30 downto 23);
    w_fc1_address0 <= tmp_10_fu_520_p1(17 - 1 downto 0);

    w_fc1_ce0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg0_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3))) then 
            w_fc1_ce0 <= ap_const_logic_1;
        else 
            w_fc1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    w_index_fu_461_p2 <= std_logic_vector(unsigned(tmp_9_fu_453_p3) + unsigned(n_cast4_reg_648));
end behav;
