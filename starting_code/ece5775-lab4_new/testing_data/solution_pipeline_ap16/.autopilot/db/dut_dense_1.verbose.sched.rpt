

================================================================
== Vivado HLS Report for 'dut_dense_1'
================================================================
* Date:           Sat Oct 29 16:06:37 2022

* Version:        2016.2 (Build 1577090 on Thu Jun 02 16:59:10 MDT 2016)
* Project:        bnn.prj
* Solution:       solution3
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|      8.16|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +--------+--------+--------+--------+---------+
    |     Latency     |     Interval    | Pipeline|
    |   min  |   max  |   min  |   max  |   Type  |
    +--------+--------+--------+--------+---------+
    |  663297|  663297|  663297|  663297|   none  |
    +--------+--------+--------+--------+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-----------------+--------+--------+----------+-----------+-----------+------+----------+
        |                 |     Latency     | Iteration|  Initiation Interval  | Trip |          |
        |    Loop Name    |   min  |   max  |  Latency |  achieved |   target  | Count| Pipelined|
        +-----------------+--------+--------+----------+-----------+-----------+------+----------+
        |- LOOP_DENSE_0   |  663296|  663296|      2591|          -|          -|   256|    no    |
        | + LOOP_DENSE_1  |    2587|    2587|        33|          5|          1|   512|    yes   |
        +-----------------+--------+--------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 5, depth = 33


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 37
* Pipeline: 1
  Pipeline-0: II = 5, D = 33, States = { 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / (!exitcond1)
3 --> 
	4  / true
4 --> 
	37  / (exitcond)
	5  / (!exitcond)
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 
	17  / true
17 --> 
	18  / true
18 --> 
	19  / true
19 --> 
	20  / true
20 --> 
	21  / true
21 --> 
	22  / true
22 --> 
	23  / true
23 --> 
	24  / true
24 --> 
	25  / true
25 --> 
	26  / true
26 --> 
	27  / true
27 --> 
	28  / true
28 --> 
	29  / true
29 --> 
	30  / true
30 --> 
	31  / true
31 --> 
	32  / true
32 --> 
	33  / true
33 --> 
	34  / true
34 --> 
	35  / true
35 --> 
	36  / true
36 --> 
	4  / true
37 --> 
	2  / true
* FSM state operations: 

 <State 1>: 1.57ns
ST_1: stg_38 [1/1] 1.57ns
:0  br label %1


 <State 2>: 2.39ns
ST_2: n [1/1] 0.00ns
:0  %n = phi i9 [ 0, %0 ], [ %n_1, %branch32 ]

ST_2: exitcond1 [1/1] 2.03ns
:1  %exitcond1 = icmp eq i9 %n, -256

ST_2: n_1 [1/1] 1.84ns
:2  %n_1 = add i9 %n, 1

ST_2: stg_42 [1/1] 0.00ns
:3  br i1 %exitcond1, label %4, label %2

ST_2: tmp_4 [1/1] 0.00ns
:5  %tmp_4 = zext i9 %n to i64

ST_2: b_fc1_addr [1/1] 0.00ns
:6  %b_fc1_addr = getelementptr [256 x float]* @b_fc1, i64 0, i64 %tmp_4

ST_2: b_fc1_load [2/2] 2.39ns
:7  %b_fc1_load = load float* %b_fc1_addr, align 4

ST_2: output_addr [1/1] 0.00ns
:8  %output_addr = getelementptr [324 x i1]* %output_r, i64 0, i64 %tmp_4

ST_2: stg_47 [1/1] 0.00ns
:0  ret void


 <State 3>: 2.39ns
ST_3: n_cast4 [1/1] 0.00ns
:0  %n_cast4 = zext i9 %n to i17

ST_3: empty [1/1] 0.00ns
:1  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 256, i64 256, i64 256)

ST_3: stg_50 [1/1] 0.00ns
:2  call void (...)* @_ssdm_op_SpecLoopName([13 x i8]* @p_str23) nounwind

ST_3: tmp_s [1/1] 0.00ns
:3  %tmp_s = call i32 (...)* @_ssdm_op_SpecRegionBegin([13 x i8]* @p_str23)

ST_3: stg_52 [1/1] 0.00ns
:4  call void (...)* @_ssdm_op_SpecPipeline(i32 -1, i32 1, i32 1, i32 0, [1 x i8]* @p_str3) nounwind

ST_3: b_fc1_load [1/2] 2.39ns
:7  %b_fc1_load = load float* %b_fc1_addr, align 4

ST_3: stg_54 [1/1] 1.57ns
:9  br label %3


 <State 4>: 5.83ns
ST_4: one_out [1/1] 0.00ns
:0  %one_out = phi float [ 0.000000e+00, %2 ], [ %one_out_1, %ifFalse ]

ST_4: m [1/1] 0.00ns
:1  %m = phi i10 [ 0, %2 ], [ %m_3, %ifFalse ]

ST_4: phi_mul [1/1] 0.00ns
:2  %phi_mul = phi i20 [ 0, %2 ], [ %next_mul, %ifFalse ]

ST_4: exitcond [1/1] 2.07ns
:3  %exitcond = icmp eq i10 %m, -512

ST_4: m_3 [1/1] 1.84ns
:4  %m_3 = add i10 %m, 1

ST_4: stg_60 [1/1] 0.00ns
:5  br i1 %exitcond, label %branch32, label %ifBlock

ST_4: tmp_22 [1/1] 0.00ns
ifBlock:4  %tmp_22 = trunc i10 %m to i9

ST_4: tmp_9 [1/1] 0.00ns
ifBlock:5  %tmp_9 = call i17 @_ssdm_op_BitConcatenate.i17.i9.i8(i9 %tmp_22, i8 0)

ST_4: w_index [1/1] 2.08ns
ifBlock:6  %w_index = add i17 %tmp_9, %n_cast4

ST_4: next_mul [1/1] 2.08ns
ifBlock:7  %next_mul = add i20 1619, %phi_mul

ST_4: tmp_25 [1/1] 0.00ns
ifBlock:8  %tmp_25 = call i1 @_ssdm_op_BitSelect.i1.i20.i32(i20 %phi_mul, i32 19)

ST_4: tmp_6 [1/1] 2.07ns
ifBlock:10  %tmp_6 = icmp ult i10 %m, 324

ST_4: tmp_7 [1/1] 1.84ns
ifBlock:11  %tmp_7 = add i10 -324, %m

ST_4: newIndex [1/1] 1.37ns
ifBlock:12  %newIndex = select i1 %tmp_6, i10 %m, i10 %tmp_7

ST_4: newIndex8 [1/1] 0.00ns
ifBlock:13  %newIndex8 = zext i10 %newIndex to i64

ST_4: input_addr [1/1] 0.00ns
ifBlock:14  %input_addr = getelementptr [324 x i1]* %input_r, i64 0, i64 %newIndex8

ST_4: input_load [2/2] 2.39ns
ifBlock:15  %input_load = load i1* %input_addr, align 1

ST_4: input1_addr [1/1] 0.00ns
ifBlock:16  %input1_addr = getelementptr [324 x i1]* %input1, i64 0, i64 %newIndex8

ST_4: input1_load [2/2] 2.39ns
ifBlock:17  %input1_load = load i1* %input1_addr, align 1

ST_4: input2_addr [1/1] 0.00ns
ifBlock:18  %input2_addr = getelementptr [324 x i1]* %input2, i64 0, i64 %newIndex8

ST_4: input2_load [2/2] 2.39ns
ifBlock:19  %input2_load = load i1* %input2_addr, align 1

ST_4: input3_addr [1/1] 0.00ns
ifBlock:20  %input3_addr = getelementptr [324 x i1]* %input3, i64 0, i64 %newIndex8

ST_4: input3_load [2/2] 2.39ns
ifBlock:21  %input3_load = load i1* %input3_addr, align 1

ST_4: input4_addr [1/1] 0.00ns
ifBlock:22  %input4_addr = getelementptr [324 x i1]* %input4, i64 0, i64 %newIndex8

ST_4: input4_load [2/2] 2.39ns
ifBlock:23  %input4_load = load i1* %input4_addr, align 1

ST_4: input5_addr [1/1] 0.00ns
ifBlock:24  %input5_addr = getelementptr [324 x i1]* %input5, i64 0, i64 %newIndex8

ST_4: input5_load [2/2] 2.39ns
ifBlock:25  %input5_load = load i1* %input5_addr, align 1

ST_4: input6_addr [1/1] 0.00ns
ifBlock:26  %input6_addr = getelementptr [324 x i1]* %input6, i64 0, i64 %newIndex8

ST_4: input6_load [2/2] 2.39ns
ifBlock:27  %input6_load = load i1* %input6_addr, align 1

ST_4: input7_addr [1/1] 0.00ns
ifBlock:28  %input7_addr = getelementptr [324 x i1]* %input7, i64 0, i64 %newIndex8

ST_4: input7_load [2/2] 2.39ns
ifBlock:29  %input7_load = load i1* %input7_addr, align 1

ST_4: input8_addr [1/1] 0.00ns
ifBlock:30  %input8_addr = getelementptr [324 x i1]* %input8, i64 0, i64 %newIndex8

ST_4: input8_load [2/2] 2.39ns
ifBlock:31  %input8_load = load i1* %input8_addr, align 1

ST_4: input9_addr [1/1] 0.00ns
ifBlock:32  %input9_addr = getelementptr [324 x i1]* %input9, i64 0, i64 %newIndex8

ST_4: input9_load [2/2] 2.39ns
ifBlock:33  %input9_load = load i1* %input9_addr, align 1

ST_4: input10_addr [1/1] 0.00ns
ifBlock:34  %input10_addr = getelementptr [324 x i1]* %input10, i64 0, i64 %newIndex8

ST_4: input10_load [2/2] 2.39ns
ifBlock:35  %input10_load = load i1* %input10_addr, align 1

ST_4: input11_addr [1/1] 0.00ns
ifBlock:36  %input11_addr = getelementptr [324 x i1]* %input11, i64 0, i64 %newIndex8

ST_4: input11_load [2/2] 2.39ns
ifBlock:37  %input11_load = load i1* %input11_addr, align 1

ST_4: input12_addr [1/1] 0.00ns
ifBlock:38  %input12_addr = getelementptr [324 x i1]* %input12, i64 0, i64 %newIndex8

ST_4: input12_load [2/2] 2.39ns
ifBlock:39  %input12_load = load i1* %input12_addr, align 1

ST_4: input13_addr [1/1] 0.00ns
ifBlock:40  %input13_addr = getelementptr [324 x i1]* %input13, i64 0, i64 %newIndex8

ST_4: input13_load [2/2] 2.39ns
ifBlock:41  %input13_load = load i1* %input13_addr, align 1

ST_4: input14_addr [1/1] 0.00ns
ifBlock:42  %input14_addr = getelementptr [324 x i1]* %input14, i64 0, i64 %newIndex8

ST_4: input14_load [2/2] 2.39ns
ifBlock:43  %input14_load = load i1* %input14_addr, align 1

ST_4: input15_addr [1/1] 0.00ns
ifBlock:44  %input15_addr = getelementptr [324 x i1]* %input15, i64 0, i64 %newIndex8

ST_4: input15_load [2/2] 2.39ns
ifBlock:45  %input15_load = load i1* %input15_addr, align 1

ST_4: tmp_10 [1/1] 0.00ns
ifBlock:47  %tmp_10 = zext i17 %w_index to i64

ST_4: w_fc1_addr [1/1] 0.00ns
ifBlock:48  %w_fc1_addr = getelementptr [131072 x i1]* @w_fc1, i64 0, i64 %tmp_10

ST_4: w_fc1_load [2/2] 2.39ns
ifBlock:49  %w_fc1_load = load i1* %w_fc1_addr, align 1

ST_4: ifzero [1/1] 2.07ns
ifBlock:56  %ifzero = icmp eq i10 %m_3, -512

ST_4: stg_106 [1/1] 0.00ns
ifBlock:57  br i1 %ifzero, label %ifTrue, label %ifFalse


 <State 5>: 6.00ns
ST_5: arrayNo_cast [1/1] 0.00ns
ifBlock:9  %arrayNo_cast = zext i1 %tmp_25 to i32

ST_5: input_load [1/2] 2.39ns
ifBlock:15  %input_load = load i1* %input_addr, align 1

ST_5: input1_load [1/2] 2.39ns
ifBlock:17  %input1_load = load i1* %input1_addr, align 1

ST_5: input2_load [1/2] 2.39ns
ifBlock:19  %input2_load = load i1* %input2_addr, align 1

ST_5: input3_load [1/2] 2.39ns
ifBlock:21  %input3_load = load i1* %input3_addr, align 1

ST_5: input4_load [1/2] 2.39ns
ifBlock:23  %input4_load = load i1* %input4_addr, align 1

ST_5: input5_load [1/2] 2.39ns
ifBlock:25  %input5_load = load i1* %input5_addr, align 1

ST_5: input6_load [1/2] 2.39ns
ifBlock:27  %input6_load = load i1* %input6_addr, align 1

ST_5: input7_load [1/2] 2.39ns
ifBlock:29  %input7_load = load i1* %input7_addr, align 1

ST_5: input8_load [1/2] 2.39ns
ifBlock:31  %input8_load = load i1* %input8_addr, align 1

ST_5: input9_load [1/2] 2.39ns
ifBlock:33  %input9_load = load i1* %input9_addr, align 1

ST_5: input10_load [1/2] 2.39ns
ifBlock:35  %input10_load = load i1* %input10_addr, align 1

ST_5: input11_load [1/2] 2.39ns
ifBlock:37  %input11_load = load i1* %input11_addr, align 1

ST_5: input12_load [1/2] 2.39ns
ifBlock:39  %input12_load = load i1* %input12_addr, align 1

ST_5: input13_load [1/2] 2.39ns
ifBlock:41  %input13_load = load i1* %input13_addr, align 1

ST_5: input14_load [1/2] 2.39ns
ifBlock:43  %input14_load = load i1* %input14_addr, align 1

ST_5: input15_load [1/2] 2.39ns
ifBlock:45  %input15_load = load i1* %input15_addr, align 1

ST_5: tmp_15 [1/1] 2.23ns
ifBlock:46  %tmp_15 = call i1 @_ssdm_op_Mux.ap_auto.16i1.i32(i1 %input_load, i1 %input1_load, i1 %input2_load, i1 %input3_load, i1 %input4_load, i1 %input5_load, i1 %input6_load, i1 %input7_load, i1 %input8_load, i1 %input9_load, i1 %input10_load, i1 %input11_load, i1 %input12_load, i1 %input13_load, i1 %input14_load, i1 %input15_load, i32 %arrayNo_cast)

ST_5: w_fc1_load [1/2] 2.39ns
ifBlock:49  %w_fc1_load = load i1* %w_fc1_addr, align 1

ST_5: tmp1 [1/1] 0.00ns (grouped into LUT with out node tmp_11)
ifBlock:50  %tmp1 = xor i1 %tmp_15, true

ST_5: tmp_11 [1/1] 1.37ns (out node of the LUT)
ifBlock:51  %tmp_11 = xor i1 %w_fc1_load, %tmp1


 <State 6>: 6.41ns
ST_6: tmp_12 [1/1] 0.00ns
ifBlock:52  %tmp_12 = zext i1 %tmp_11 to i32

ST_6: tmp_13 [6/6] 6.41ns
ifBlock:53  %tmp_13 = sitofp i32 %tmp_12 to float


 <State 7>: 6.41ns
ST_7: tmp_13 [5/6] 6.41ns
ifBlock:53  %tmp_13 = sitofp i32 %tmp_12 to float


 <State 8>: 6.41ns
ST_8: tmp_13 [4/6] 6.41ns
ifBlock:53  %tmp_13 = sitofp i32 %tmp_12 to float


 <State 9>: 6.41ns
ST_9: tmp_13 [3/6] 6.41ns
ifBlock:53  %tmp_13 = sitofp i32 %tmp_12 to float


 <State 10>: 6.41ns
ST_10: tmp_13 [2/6] 6.41ns
ifBlock:53  %tmp_13 = sitofp i32 %tmp_12 to float


 <State 11>: 6.41ns
ST_11: tmp_13 [1/6] 6.41ns
ifBlock:53  %tmp_13 = sitofp i32 %tmp_12 to float


 <State 12>: 7.26ns
ST_12: one_out_1 [5/5] 7.26ns
ifBlock:54  %one_out_1 = fadd float %one_out, %tmp_13


 <State 13>: 7.26ns
ST_13: one_out_1 [4/5] 7.26ns
ifBlock:54  %one_out_1 = fadd float %one_out, %tmp_13


 <State 14>: 7.26ns
ST_14: one_out_1 [3/5] 7.26ns
ifBlock:54  %one_out_1 = fadd float %one_out, %tmp_13


 <State 15>: 7.26ns
ST_15: one_out_1 [2/5] 7.26ns
ifBlock:54  %one_out_1 = fadd float %one_out, %tmp_13


 <State 16>: 7.26ns
ST_16: one_out_1 [1/5] 7.26ns
ifBlock:54  %one_out_1 = fadd float %one_out, %tmp_13


 <State 17>: 5.70ns
ST_17: tmp_8 [4/4] 5.70ns
ifTrue:0  %tmp_8 = fmul float %one_out_1, 2.000000e+00


 <State 18>: 5.70ns
ST_18: tmp_8 [3/4] 5.70ns
ifTrue:0  %tmp_8 = fmul float %one_out_1, 2.000000e+00


 <State 19>: 5.70ns
ST_19: tmp_8 [2/4] 5.70ns
ifTrue:0  %tmp_8 = fmul float %one_out_1, 2.000000e+00


 <State 20>: 5.70ns
ST_20: tmp_8 [1/4] 5.70ns
ifTrue:0  %tmp_8 = fmul float %one_out_1, 2.000000e+00


 <State 21>: 7.26ns
ST_21: tmp_14 [5/5] 7.26ns
ifTrue:1  %tmp_14 = fadd float %tmp_8, -5.120000e+02


 <State 22>: 7.26ns
ST_22: tmp_14 [4/5] 7.26ns
ifTrue:1  %tmp_14 = fadd float %tmp_8, -5.120000e+02


 <State 23>: 7.26ns
ST_23: tmp_14 [3/5] 7.26ns
ifTrue:1  %tmp_14 = fadd float %tmp_8, -5.120000e+02


 <State 24>: 7.26ns
ST_24: tmp_14 [2/5] 7.26ns
ifTrue:1  %tmp_14 = fadd float %tmp_8, -5.120000e+02


 <State 25>: 7.26ns
ST_25: tmp_14 [1/5] 7.26ns
ifTrue:1  %tmp_14 = fadd float %tmp_8, -5.120000e+02


 <State 26>: 5.70ns
ST_26: one_out_2 [4/4] 5.70ns
ifTrue:2  %one_out_2 = fmul float %tmp_14, 6.250000e-02


 <State 27>: 5.70ns
ST_27: one_out_2 [3/4] 5.70ns
ifTrue:2  %one_out_2 = fmul float %tmp_14, 6.250000e-02


 <State 28>: 5.70ns
ST_28: one_out_2 [2/4] 5.70ns
ifTrue:2  %one_out_2 = fmul float %tmp_14, 6.250000e-02


 <State 29>: 5.70ns
ST_29: one_out_2 [1/4] 5.70ns
ifTrue:2  %one_out_2 = fmul float %tmp_14, 6.250000e-02


 <State 30>: 7.26ns
ST_30: biased [5/5] 7.26ns
ifTrue:3  %biased = fadd float %one_out_2, %b_fc1_load


 <State 31>: 7.26ns
ST_31: biased [4/5] 7.26ns
ifTrue:3  %biased = fadd float %one_out_2, %b_fc1_load


 <State 32>: 7.26ns
ST_32: biased [3/5] 7.26ns
ifTrue:3  %biased = fadd float %one_out_2, %b_fc1_load


 <State 33>: 7.26ns
ST_33: biased [2/5] 7.26ns
ifTrue:3  %biased = fadd float %one_out_2, %b_fc1_load


 <State 34>: 7.26ns
ST_34: biased [1/5] 7.26ns
ifTrue:3  %biased = fadd float %one_out_2, %b_fc1_load


 <State 35>: 8.16ns
ST_35: biased_to_int [1/1] 0.00ns
ifTrue:4  %biased_to_int = bitcast float %biased to i32

ST_35: tmp [1/1] 0.00ns
ifTrue:5  %tmp = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %biased_to_int, i32 23, i32 30)

ST_35: tmp_26 [1/1] 0.00ns
ifTrue:6  %tmp_26 = trunc i32 %biased_to_int to i23

ST_35: notlhs [1/1] 2.00ns
ifTrue:7  %notlhs = icmp ne i8 %tmp, -1

ST_35: notrhs [1/1] 2.39ns
ifTrue:8  %notrhs = icmp eq i23 %tmp_26, 0

ST_35: tmp_16 [1/1] 0.00ns (grouped into LUT with out node tmp_18)
ifTrue:9  %tmp_16 = or i1 %notrhs, %notlhs

ST_35: tmp_17 [1/1] 6.79ns
ifTrue:10  %tmp_17 = fcmp ogt float %biased, 0.000000e+00

ST_35: tmp_18 [1/1] 1.37ns (out node of the LUT)
ifTrue:11  %tmp_18 = and i1 %tmp_16, %tmp_17


 <State 36>: 2.39ns
ST_36: empty_30 [1/1] 0.00ns
ifBlock:0  %empty_30 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 512, i64 512, i64 512)

ST_36: stg_167 [1/1] 0.00ns
ifBlock:1  call void (...)* @_ssdm_op_SpecLoopName([13 x i8]* @p_str24) nounwind

ST_36: tmp_5 [1/1] 0.00ns
ifBlock:2  %tmp_5 = call i32 (...)* @_ssdm_op_SpecRegionBegin([13 x i8]* @p_str24)

ST_36: stg_169 [1/1] 0.00ns
ifBlock:3  call void (...)* @_ssdm_op_SpecPipeline(i32 -1, i32 1, i32 1, i32 0, [1 x i8]* @p_str3) nounwind

ST_36: empty_31 [1/1] 0.00ns
ifBlock:55  %empty_31 = call i32 (...)* @_ssdm_op_SpecRegionEnd([13 x i8]* @p_str24, i32 %tmp_5)

ST_36: stg_171 [1/1] 2.39ns
ifTrue:12  store i1 %tmp_18, i1* %output_addr, align 1

ST_36: stg_172 [1/1] 0.00ns
ifTrue:13  br label %ifFalse

ST_36: stg_173 [1/1] 0.00ns
ifFalse:0  br label %3


 <State 37>: 0.00ns
ST_37: empty_32 [1/1] 0.00ns
branch32:0  %empty_32 = call i32 (...)* @_ssdm_op_SpecRegionEnd([13 x i8]* @p_str23, i32 %tmp_s)

ST_37: stg_175 [1/1] 0.00ns
branch32:1  br label %1



============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 No timing violations. 


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23
	State 24
	State 25
	State 26
	State 27
	State 28
	State 29
	State 30
	State 31
	State 32
	State 33
	State 34
	State 35
	State 36
	State 37


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
