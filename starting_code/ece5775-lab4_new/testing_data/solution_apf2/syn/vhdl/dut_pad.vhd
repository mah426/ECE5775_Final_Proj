-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_pad is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_0_ce0 : OUT STD_LOGIC;
    input_0_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_1_ce0 : OUT STD_LOGIC;
    input_1_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    output_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    output_0_ce0 : OUT STD_LOGIC;
    output_0_we0 : OUT STD_LOGIC;
    output_0_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    output_1_ce0 : OUT STD_LOGIC;
    output_1_we0 : OUT STD_LOGIC;
    output_1_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    M : IN STD_LOGIC_VECTOR (6 downto 0);
    I : IN STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of dut_pad is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (22 downto 0) := "00000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (22 downto 0) := "00000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (22 downto 0) := "00000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (22 downto 0) := "00000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (22 downto 0) := "00000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (22 downto 0) := "00000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (22 downto 0) := "00001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (22 downto 0) := "00010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (22 downto 0) := "00100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (22 downto 0) := "01000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (22 downto 0) := "10000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv13_1440 : STD_LOGIC_VECTOR (12 downto 0) := "1010001000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv13_A20 : STD_LOGIC_VECTOR (12 downto 0) := "0101000100000";
    constant ap_const_lv13_15E0 : STD_LOGIC_VECTOR (12 downto 0) := "1010111100000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv12_A20 : STD_LOGIC_VECTOR (11 downto 0) := "101000100000";
    constant ap_const_lv12_5E0 : STD_LOGIC_VECTOR (11 downto 0) := "010111100000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_40 : BOOLEAN;
    signal tmp_cast5_cast_fu_210_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_cast5_cast_reg_439 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_cast_cast_fu_214_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_cast_cast_reg_444 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_1_fu_224_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_91 : BOOLEAN;
    signal tmp_3_fu_256_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_reg_460 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond1_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal I_cast6_fu_259_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal I_cast6_reg_465 : STD_LOGIC_VECTOR (7 downto 0);
    signal I_cast_fu_262_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal I_cast_reg_470 : STD_LOGIC_VECTOR (11 downto 0);
    signal next_mul_fu_265_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal next_mul_reg_475 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_111 : BOOLEAN;
    signal m_1_fu_283_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal m_1_reg_483 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_fu_289_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_reg_488 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_2_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_cast2_fu_294_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal x_cast2_reg_493 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_128 : BOOLEAN;
    signal x_1_fu_307_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal x_1_reg_501 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_6_cast_fu_313_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_6_cast_reg_506 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_5_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_1_fu_330_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal y_1_reg_514 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_145 : BOOLEAN;
    signal tmp2_fu_346_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_reg_519 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp9_fu_355_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp9_reg_524 : STD_LOGIC_VECTOR (8 downto 0);
    signal o_index_fu_372_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal o_index_reg_529 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_161 : BOOLEAN;
    signal tmp_11_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_535 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_load_phi_fu_403_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_load_phi_reg_550 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_176 : BOOLEAN;
    signal tmp_6_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_556 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_144 : STD_LOGIC_VECTOR (12 downto 0);
    signal m_reg_155 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul_reg_166 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_reg_178 : STD_LOGIC_VECTOR (4 downto 0);
    signal y_reg_189 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st23_fsm_22 : STD_LOGIC;
    signal ap_sig_202 : BOOLEAN;
    signal newIndex2_fu_250_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal newIndex3_fu_397_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal newIndex4_fu_420_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_200_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_204_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_10_fu_236_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal newIndex1_fu_242_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal m_cast_fu_274_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_fu_289_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_fu_289_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal x_cast_fu_298_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal y_cast_fu_321_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal y_cast1_fu_317_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_336_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp2_fu_346_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp2_fu_346_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal y_1_cast_fu_351_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_fu_367_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_fu_367_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp1_fu_367_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_index_fu_360_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_12_fu_383_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal newIndex_fu_389_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_410_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_410_ap_start : STD_LOGIC;
    signal grp_fu_410_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp1_fu_367_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp2_fu_346_p00 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_4_fu_289_p00 : STD_LOGIC_VECTOR (8 downto 0);

    component dut_urem_13ns_13ns_13_17_seq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;



begin
    dut_urem_13ns_13ns_13_17_seq_U1 : component dut_urem_13ns_13ns_13_17_seq
    generic map (
        ID => 1,
        NUM_STAGE => 17,
        din0_WIDTH => 13,
        din1_WIDTH => 13,
        dout_WIDTH => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_410_ap_start,
        done => grp_fu_410_ap_done,
        din0 => o_index_reg_529,
        din1 => ap_const_lv13_A20,
        ce => ap_const_logic_1,
        dout => grp_fu_410_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_218_p2 = ap_const_lv1_0))) then 
                i_reg_144 <= i_1_fu_224_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_144 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    m_reg_155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond1_fu_218_p2 = ap_const_lv1_0)))) then 
                m_reg_155 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = tmp_5_fu_302_p2))) then 
                m_reg_155 <= m_1_reg_483;
            end if; 
        end if;
    end process;

    phi_mul_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond1_fu_218_p2 = ap_const_lv1_0)))) then 
                phi_mul_reg_166 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = tmp_5_fu_302_p2))) then 
                phi_mul_reg_166 <= next_mul_reg_475;
            end if; 
        end if;
    end process;

    x_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond_fu_325_p2)))) then 
                x_reg_178 <= x_1_reg_501;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = tmp_2_fu_278_p2)))) then 
                x_reg_178 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    y_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
                y_reg_189 <= y_1_reg_514;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = tmp_5_fu_302_p2)))) then 
                y_reg_189 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond1_fu_218_p2 = ap_const_lv1_0)))) then
                    I_cast6_reg_465(5 downto 0) <= I_cast6_fu_259_p1(5 downto 0);
                    I_cast_reg_470(5 downto 0) <= I_cast_fu_262_p1(5 downto 0);
                tmp_3_reg_460 <= tmp_3_fu_256_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then
                input_load_phi_reg_550 <= input_load_phi_fu_403_p3;
                tmp_6_reg_556 <= tmp_6_fu_415_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                m_1_reg_483 <= m_1_fu_283_p2;
                next_mul_reg_475 <= next_mul_fu_265_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                o_index_reg_529 <= o_index_fu_372_p2;
                tmp_11_reg_535 <= tmp_11_fu_377_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond_fu_325_p2))) then
                tmp2_reg_519 <= tmp2_fu_346_p2;
                tmp9_reg_524 <= tmp9_fu_355_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = tmp_2_fu_278_p2)))) then
                tmp_4_reg_488 <= tmp_4_fu_289_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = tmp_5_fu_302_p2)))) then
                    tmp_6_cast_reg_506(4 downto 0) <= tmp_6_cast_fu_313_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                    tmp_cast5_cast_reg_439(4 downto 0) <= tmp_cast5_cast_fu_210_p1(4 downto 0);
                    tmp_cast_cast_reg_444(4 downto 0) <= tmp_cast_cast_fu_214_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                x_1_reg_501 <= x_1_fu_307_p2;
                    x_cast2_reg_493(4 downto 0) <= x_cast2_fu_294_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                y_1_reg_514 <= y_1_fu_330_p2;
            end if;
        end if;
    end process;
    tmp_cast5_cast_reg_439(12 downto 5) <= "00000000";
    tmp_cast_cast_reg_444(8 downto 5) <= "0000";
    I_cast6_reg_465(7 downto 6) <= "00";
    I_cast_reg_470(11 downto 6) <= "000000";
    x_cast2_reg_493(11 downto 5) <= "0000000";
    tmp_6_cast_reg_506(12 downto 5) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond1_fu_218_p2, tmp_2_fu_278_p2, tmp_5_fu_302_p2, exitcond_fu_325_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond1_fu_218_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                if ((ap_const_lv1_0 = tmp_2_fu_278_p2)) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                if ((ap_const_lv1_0 = tmp_5_fu_302_p2)) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st5_fsm_4 => 
                if (not((ap_const_lv1_0 = exitcond_fu_325_p2))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    I_cast6_fu_259_p1 <= std_logic_vector(resize(unsigned(I),8));
    I_cast_fu_262_p1 <= std_logic_vector(resize(unsigned(I),12));

    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st3_fsm_2, tmp_2_fu_278_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_2_fu_278_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, tmp_2_fu_278_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_2_fu_278_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_111_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_111 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_128_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_128 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_145_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_145 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_161_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_161 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_176_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_176 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    ap_sig_202_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_202 <= (ap_const_lv1_1 = ap_CS_fsm(22 downto 22));
    end process;


    ap_sig_40_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_40 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_91_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_91 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_40)
    begin
        if (ap_sig_40) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st23_fsm_22_assign_proc : process(ap_sig_202)
    begin
        if (ap_sig_202) then 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_91)
    begin
        if (ap_sig_91) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_111)
    begin
        if (ap_sig_111) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_128)
    begin
        if (ap_sig_128) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_145)
    begin
        if (ap_sig_145) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_161)
    begin
        if (ap_sig_161) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_176)
    begin
        if (ap_sig_176) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_218_p2 <= "1" when (i_reg_144 = ap_const_lv13_1440) else "0";
    exitcond_fu_325_p2 <= "1" when (y_cast_fu_321_p1 = I) else "0";

    grp_fu_410_ap_start_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            grp_fu_410_ap_start <= ap_const_logic_1;
        else 
            grp_fu_410_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    i_1_fu_224_p2 <= std_logic_vector(unsigned(i_reg_144) + unsigned(ap_const_lv13_1));
    i_index_fu_360_p2 <= std_logic_vector(unsigned(tmp2_reg_519) + unsigned(x_cast2_reg_493));
    input_0_address0 <= newIndex3_fu_397_p1(12 - 1 downto 0);

    input_0_ce0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            input_0_ce0 <= ap_const_logic_1;
        else 
            input_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_1_address0 <= newIndex3_fu_397_p1(12 - 1 downto 0);

    input_1_ce0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            input_1_ce0 <= ap_const_logic_1;
        else 
            input_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_load_phi_fu_403_p3 <= 
        input_0_q0 when (tmp_11_reg_535(0) = '1') else 
        input_1_q0;
    m_1_fu_283_p2 <= std_logic_vector(unsigned(m_reg_155) + unsigned(ap_const_lv5_1));
    m_cast_fu_274_p1 <= std_logic_vector(resize(unsigned(m_reg_155),6));
    newIndex1_fu_242_p3 <= 
        i_reg_144 when (tmp_9_fu_230_p2(0) = '1') else 
        tmp_10_fu_236_p2;
    newIndex2_fu_250_p1 <= std_logic_vector(resize(unsigned(newIndex1_fu_242_p3),64));
    newIndex3_fu_397_p1 <= std_logic_vector(resize(unsigned(newIndex_fu_389_p3),64));
    newIndex4_fu_420_p1 <= std_logic_vector(resize(unsigned(grp_fu_410_p2),64));
    newIndex_fu_389_p3 <= 
        i_index_fu_360_p2 when (tmp_11_fu_377_p2(0) = '1') else 
        tmp_12_fu_383_p2;
    next_mul_fu_265_p2 <= std_logic_vector(unsigned(phi_mul_reg_166) + unsigned(I_cast6_reg_465));
    o_index_fu_372_p2 <= std_logic_vector(unsigned(tmp_6_cast_reg_506) + unsigned(tmp1_fu_367_p2));

    output_0_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st23_fsm_22, newIndex2_fu_250_p1, newIndex4_fu_420_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
            output_0_address0 <= newIndex4_fu_420_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            output_0_address0 <= newIndex2_fu_250_p1(12 - 1 downto 0);
        else 
            output_0_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    output_0_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st23_fsm_22)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22))) then 
            output_0_ce0 <= ap_const_logic_1;
        else 
            output_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_0_d0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, input_load_phi_reg_550, ap_sig_cseq_ST_st23_fsm_22)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
            output_0_d0 <= input_load_phi_reg_550;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            output_0_d0 <= ap_const_lv1_0;
        else 
            output_0_d0 <= "X";
        end if; 
    end process;


    output_0_we0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond1_fu_218_p2, tmp_6_reg_556, ap_sig_cseq_ST_st23_fsm_22, tmp_9_fu_230_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_218_p2 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_9_fu_230_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) and not((ap_const_lv1_0 = tmp_6_reg_556))))) then 
            output_0_we0 <= ap_const_logic_1;
        else 
            output_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_1_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st23_fsm_22, newIndex2_fu_250_p1, newIndex4_fu_420_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
            output_1_address0 <= newIndex4_fu_420_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            output_1_address0 <= newIndex2_fu_250_p1(12 - 1 downto 0);
        else 
            output_1_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    output_1_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st23_fsm_22)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22))) then 
            output_1_ce0 <= ap_const_logic_1;
        else 
            output_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_1_d0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, input_load_phi_reg_550, ap_sig_cseq_ST_st23_fsm_22)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
            output_1_d0 <= input_load_phi_reg_550;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            output_1_d0 <= ap_const_lv1_0;
        else 
            output_1_d0 <= "X";
        end if; 
    end process;


    output_1_we0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond1_fu_218_p2, tmp_6_reg_556, ap_sig_cseq_ST_st23_fsm_22, tmp_9_fu_230_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_218_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_9_fu_230_p2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) and (ap_const_lv1_0 = tmp_6_reg_556)))) then 
            output_1_we0 <= ap_const_logic_1;
        else 
            output_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_367_p0 <= tmp1_fu_367_p00(9 - 1 downto 0);
    tmp1_fu_367_p00 <= std_logic_vector(resize(unsigned(tmp9_reg_524),13));
    tmp1_fu_367_p1 <= tmp_cast5_cast_reg_439(5 - 1 downto 0);
    tmp1_fu_367_p2 <= std_logic_vector(resize(unsigned(tmp1_fu_367_p0) * unsigned(tmp1_fu_367_p1), 13));
    tmp2_fu_346_p0 <= tmp2_fu_346_p00(8 - 1 downto 0);
    tmp2_fu_346_p00 <= std_logic_vector(resize(unsigned(tmp_fu_336_p2),12));
    tmp2_fu_346_p1 <= I_cast_reg_470(6 - 1 downto 0);
    tmp2_fu_346_p2 <= std_logic_vector(resize(unsigned(tmp2_fu_346_p0) * unsigned(tmp2_fu_346_p1), 12));
    tmp9_fu_355_p2 <= std_logic_vector(unsigned(y_1_cast_fu_351_p1) + unsigned(tmp_4_reg_488));
    tmp_10_fu_236_p2 <= std_logic_vector(unsigned(i_reg_144) + unsigned(ap_const_lv13_15E0));
    tmp_11_fu_377_p2 <= "1" when (unsigned(i_index_fu_360_p2) < unsigned(ap_const_lv12_A20)) else "0";
    tmp_12_fu_383_p2 <= std_logic_vector(unsigned(i_index_fu_360_p2) + unsigned(ap_const_lv12_5E0));
    tmp_1_fu_200_p1 <= I(5 - 1 downto 0);
    tmp_2_fu_278_p2 <= "1" when (signed(m_cast_fu_274_p1) < signed(tmp_3_reg_460)) else "0";
    tmp_3_fu_256_p1 <= M(6 - 1 downto 0);
    tmp_4_fu_289_p0 <= tmp_4_fu_289_p00(5 - 1 downto 0);
    tmp_4_fu_289_p00 <= std_logic_vector(resize(unsigned(m_reg_155),9));
    tmp_4_fu_289_p1 <= tmp_cast_cast_reg_444(5 - 1 downto 0);
    tmp_4_fu_289_p2 <= std_logic_vector(resize(unsigned(tmp_4_fu_289_p0) * unsigned(tmp_4_fu_289_p1), 9));
    tmp_5_fu_302_p2 <= "1" when (signed(x_cast_fu_298_p1) < signed(I)) else "0";
    tmp_6_cast_fu_313_p1 <= std_logic_vector(resize(unsigned(x_1_fu_307_p2),13));
    tmp_6_fu_415_p2 <= "1" when (unsigned(o_index_reg_529) < unsigned(ap_const_lv13_A20)) else "0";
    tmp_9_fu_230_p2 <= "1" when (unsigned(i_reg_144) < unsigned(ap_const_lv13_A20)) else "0";
    tmp_cast5_cast_fu_210_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_204_p2),13));
    tmp_cast_cast_fu_214_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_204_p2),9));
    tmp_fu_336_p2 <= std_logic_vector(unsigned(y_cast1_fu_317_p1) + unsigned(phi_mul_reg_166));
    tmp_s_fu_204_p2 <= std_logic_vector(unsigned(ap_const_lv5_2) + unsigned(tmp_1_fu_200_p1));
    x_1_fu_307_p2 <= std_logic_vector(unsigned(x_reg_178) + unsigned(ap_const_lv5_1));
    x_cast2_fu_294_p1 <= std_logic_vector(resize(unsigned(x_reg_178),12));
    x_cast_fu_298_p1 <= std_logic_vector(resize(unsigned(x_reg_178),6));
    y_1_cast_fu_351_p1 <= std_logic_vector(resize(unsigned(y_1_fu_330_p2),9));
    y_1_fu_330_p2 <= std_logic_vector(unsigned(y_reg_189) + unsigned(ap_const_lv5_1));
    y_cast1_fu_317_p1 <= std_logic_vector(resize(unsigned(y_reg_189),8));
    y_cast_fu_321_p1 <= std_logic_vector(resize(unsigned(y_reg_189),6));
end behav;
