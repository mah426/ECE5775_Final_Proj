-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_dense_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of dut_dense_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_pp0_stg0_fsm_3 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_pp0_stg1_fsm_4 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_pp0_stg2_fsm_5 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_pp0_stg3_fsm_6 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_pp0_stg4_fsm_7 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_st37_fsm_8 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_C4000000 : STD_LOGIC_VECTOR (31 downto 0) := "11000100000000000000000000000000";
    constant ap_const_lv32_40000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_const_lv32_3D800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111101100000000000000000000000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_26 : BOOLEAN;
    signal b_fc1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_fc1_ce0 : STD_LOGIC;
    signal b_fc1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_fc1_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal w_fc1_ce0 : STD_LOGIC;
    signal w_fc1_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal one_out_reg_131 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_reg_143 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_154_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_174 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp0_stg1_fsm_4 : STD_LOGIC;
    signal ap_sig_69 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it6 : STD_LOGIC := '0';
    signal ifzero_reg_352 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ifzero_reg_352_pp0_iter4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_3 : STD_LOGIC;
    signal ap_sig_97 : BOOLEAN;
    signal ap_reg_ppstg_ifzero_reg_352_pp0_iter5 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_1_fu_186_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal n_1_reg_308 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_112 : BOOLEAN;
    signal exitcond1_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_addr_reg_318 : STD_LOGIC_VECTOR (9 downto 0);
    signal n_cast4_fu_198_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal n_cast4_reg_323 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_128 : BOOLEAN;
    signal b_fc1_load_reg_328 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_333 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_333_pp0_iter1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_333_pp0_iter2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_3_fu_208_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal m_3_reg_337 : STD_LOGIC_VECTOR (9 downto 0);
    signal ifzero_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ifzero_reg_352_pp0_iter1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ifzero_reg_352_pp0_iter2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ifzero_reg_352_pp0_iter3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ifzero_reg_352_pp0_iter6 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_356 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg2_fsm_5 : STD_LOGIC;
    signal ap_sig_166 : BOOLEAN;
    signal grp_fu_166_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_reg_366 : STD_LOGIC_VECTOR (31 downto 0);
    signal one_out_1_reg_371 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_160_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_377 : STD_LOGIC_VECTOR (31 downto 0);
    signal one_out_2_reg_382 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_reg_387 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg4_fsm_7 : STD_LOGIC;
    signal ap_sig_198 : BOOLEAN;
    signal n_reg_119 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st37_fsm_8 : STD_LOGIC;
    signal ap_sig_215 : BOOLEAN;
    signal one_out_phi_fu_135_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp0_stg3_fsm_6 : STD_LOGIC;
    signal ap_sig_223 : BOOLEAN;
    signal m_phi_fu_147_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_192_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal newIndex8_fu_231_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_236_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_154_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_154_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_160_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_160_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_166_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_214_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_9_fu_218_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal w_index_fu_226_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp1_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal biased_to_int_fu_263_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_267_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_fu_277_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);

    component dut_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_sitofp_32ns_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_fcmp_32ns_32ns_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component dut_dense_1_b_fc1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_dense_1_w_fc1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    b_fc1_U : component dut_dense_1_b_fc1
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_fc1_address0,
        ce0 => b_fc1_ce0,
        q0 => b_fc1_q0);

    w_fc1_U : component dut_dense_1_w_fc1
    generic map (
        DataWidth => 1,
        AddressRange => 131072,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w_fc1_address0,
        ce0 => w_fc1_ce0,
        q0 => w_fc1_q0);

    dut_fadd_32ns_32ns_32_5_full_dsp_U118 : component dut_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_154_p0,
        din1 => grp_fu_154_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_154_p2);

    dut_fmul_32ns_32ns_32_4_max_dsp_U119 : component dut_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_160_p0,
        din1 => grp_fu_160_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_160_p2);

    dut_sitofp_32ns_32_6_U120 : component dut_sitofp_32ns_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_166_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_166_p1);

    dut_fcmp_32ns_32ns_1_1_U121 : component dut_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => reg_174,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => tmp_14_fu_169_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and not((ap_const_lv1_0 = exitcond_fu_202_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_0 = exitcond_reg_333) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_7))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_7) and not((ap_const_lv1_0 = exitcond_reg_333))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_7)) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_7)) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_7)) then 
                    ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_7)) then 
                    ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_7)) then 
                    ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                    ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    m_reg_143_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_lv1_0 = exitcond_reg_333))) then 
                m_reg_143 <= m_3_reg_337;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                m_reg_143 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    n_reg_119_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_8)) then 
                n_reg_119 <= n_1_reg_308;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                n_reg_119 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    one_out_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_333_pp0_iter2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_6))) then 
                one_out_reg_131 <= one_out_1_reg_371;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                one_out_reg_131 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3)) then
                ap_reg_ppstg_exitcond_reg_333_pp0_iter1 <= exitcond_reg_333;
                ap_reg_ppstg_exitcond_reg_333_pp0_iter2 <= ap_reg_ppstg_exitcond_reg_333_pp0_iter1;
                ap_reg_ppstg_ifzero_reg_352_pp0_iter1 <= ifzero_reg_352;
                ap_reg_ppstg_ifzero_reg_352_pp0_iter2 <= ap_reg_ppstg_ifzero_reg_352_pp0_iter1;
                ap_reg_ppstg_ifzero_reg_352_pp0_iter3 <= ap_reg_ppstg_ifzero_reg_352_pp0_iter2;
                ap_reg_ppstg_ifzero_reg_352_pp0_iter4 <= ap_reg_ppstg_ifzero_reg_352_pp0_iter3;
                ap_reg_ppstg_ifzero_reg_352_pp0_iter5 <= ap_reg_ppstg_ifzero_reg_352_pp0_iter4;
                ap_reg_ppstg_ifzero_reg_352_pp0_iter6 <= ap_reg_ppstg_ifzero_reg_352_pp0_iter5;
                exitcond_reg_333 <= exitcond_fu_202_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                b_fc1_load_reg_328 <= b_fc1_q0;
                    n_cast4_reg_323(8 downto 0) <= n_cast4_fu_198_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_lv1_0 = exitcond_fu_202_p2))) then
                ifzero_reg_352 <= ifzero_fu_241_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3))) then
                m_3_reg_337 <= m_3_fu_208_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                n_1_reg_308 <= n_1_fu_186_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_5) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_333_pp0_iter2))) then
                one_out_1_reg_371 <= grp_fu_154_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and not((ap_reg_ppstg_ifzero_reg_352_pp0_iter4 = ap_const_lv1_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3))) then
                one_out_2_reg_382 <= grp_fu_160_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond1_fu_180_p2))) then
                    output_addr_reg_318(8 downto 0) <= tmp_4_fu_192_p1(10 - 1 downto 0)(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and not((ap_reg_ppstg_ifzero_reg_352_pp0_iter4 = ap_const_lv1_0))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and not((ap_const_lv1_0 = ap_reg_ppstg_ifzero_reg_352_pp0_iter5))))) then
                reg_174 <= grp_fu_154_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_5) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_333_pp0_iter1))) then
                tmp_11_reg_366 <= grp_fu_166_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_4) and not((ap_const_lv1_0 = ap_reg_ppstg_ifzero_reg_352_pp0_iter6)))) then
                tmp_15_reg_387 <= tmp_15_fu_299_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_4) and (ap_const_lv1_0 = exitcond_reg_333))) then
                tmp_7_reg_356 <= tmp_7_fu_253_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not((ap_const_lv1_0 = ap_reg_ppstg_ifzero_reg_352_pp0_iter3)))) then
                tmp_8_reg_377 <= grp_fu_160_p2;
            end if;
        end if;
    end process;
    output_addr_reg_318(9) <= '0';
    n_cast4_reg_323(16 downto 9) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it5, ap_reg_ppiten_pp0_it6, exitcond1_fu_180_p2, exitcond_fu_202_p2, ap_sig_cseq_ST_pp0_stg2_fsm_5)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_180_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_3;
            when ap_ST_pp0_stg0_fsm_3 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = exitcond_fu_202_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st37_fsm_8;
                end if;
            when ap_ST_pp0_stg1_fsm_4 => 
                ap_NS_fsm <= ap_ST_pp0_stg2_fsm_5;
            when ap_ST_pp0_stg2_fsm_5 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_5) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it5))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg3_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st37_fsm_8;
                end if;
            when ap_ST_pp0_stg3_fsm_6 => 
                ap_NS_fsm <= ap_ST_pp0_stg4_fsm_7;
            when ap_ST_pp0_stg4_fsm_7 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_3;
            when ap_ST_st37_fsm_8 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;

    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, exitcond1_fu_180_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond1_fu_180_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond1_fu_180_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond1_fu_180_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_112_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_112 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_128_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_128 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_166_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_166 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_198_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_198 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    ap_sig_215_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_215 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    ap_sig_223_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_223 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    ap_sig_26_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_26 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_69_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_69 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_97_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_97 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_cseq_ST_pp0_stg0_fsm_3_assign_proc : process(ap_sig_97)
    begin
        if (ap_sig_97) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_pp0_stg1_fsm_4_assign_proc : process(ap_sig_69)
    begin
        if (ap_sig_69) then 
            ap_sig_cseq_ST_pp0_stg1_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg1_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_pp0_stg2_fsm_5_assign_proc : process(ap_sig_166)
    begin
        if (ap_sig_166) then 
            ap_sig_cseq_ST_pp0_stg2_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg2_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_pp0_stg3_fsm_6_assign_proc : process(ap_sig_223)
    begin
        if (ap_sig_223) then 
            ap_sig_cseq_ST_pp0_stg3_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg3_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_pp0_stg4_fsm_7_assign_proc : process(ap_sig_198)
    begin
        if (ap_sig_198) then 
            ap_sig_cseq_ST_pp0_stg4_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg4_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_26)
    begin
        if (ap_sig_26) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_112)
    begin
        if (ap_sig_112) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st37_fsm_8_assign_proc : process(ap_sig_215)
    begin
        if (ap_sig_215) then 
            ap_sig_cseq_ST_st37_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st37_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_128)
    begin
        if (ap_sig_128) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;

    b_fc1_address0 <= tmp_4_fu_192_p1(8 - 1 downto 0);

    b_fc1_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            b_fc1_ce0 <= ap_const_logic_1;
        else 
            b_fc1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    biased_to_int_fu_263_p1 <= reg_174;
    exitcond1_fu_180_p2 <= "1" when (n_reg_119 = ap_const_lv9_100) else "0";
    exitcond_fu_202_p2 <= "1" when (m_phi_fu_147_p4 = ap_const_lv10_200) else "0";

    grp_fu_154_p0_assign_proc : process(ap_sig_cseq_ST_pp0_stg1_fsm_4, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it3, ap_reg_ppiten_pp0_it5, ap_sig_cseq_ST_pp0_stg2_fsm_5, tmp_8_reg_377, one_out_2_reg_382, one_out_phi_fu_135_p4, ap_sig_cseq_ST_pp0_stg3_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))) then 
            grp_fu_154_p0 <= one_out_2_reg_382;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_5))) then 
            grp_fu_154_p0 <= tmp_8_reg_377;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_6))) then 
            grp_fu_154_p0 <= one_out_phi_fu_135_p4;
        else 
            grp_fu_154_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_154_p1_assign_proc : process(ap_sig_cseq_ST_pp0_stg1_fsm_4, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it3, ap_reg_ppiten_pp0_it5, b_fc1_load_reg_328, ap_sig_cseq_ST_pp0_stg2_fsm_5, tmp_11_reg_366, ap_sig_cseq_ST_pp0_stg3_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))) then 
            grp_fu_154_p1 <= b_fc1_load_reg_328;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_5))) then 
            grp_fu_154_p1 <= ap_const_lv32_C4000000;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_6))) then 
            grp_fu_154_p1 <= tmp_11_reg_366;
        else 
            grp_fu_154_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_160_p0_assign_proc : process(reg_174, ap_reg_ppiten_pp0_it4, ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_pp0_stg2_fsm_5, one_out_1_reg_371, ap_sig_cseq_ST_pp0_stg3_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_5))) then 
            grp_fu_160_p0 <= reg_174;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_6))) then 
            grp_fu_160_p0 <= one_out_1_reg_371;
        else 
            grp_fu_160_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_160_p1_assign_proc : process(ap_reg_ppiten_pp0_it4, ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_pp0_stg2_fsm_5, ap_sig_cseq_ST_pp0_stg3_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_5))) then 
            grp_fu_160_p1 <= ap_const_lv32_3D800000;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_6))) then 
            grp_fu_160_p1 <= ap_const_lv32_40000000;
        else 
            grp_fu_160_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_166_p0 <= std_logic_vector(resize(unsigned(tmp_7_reg_356),32));
    ifzero_fu_241_p2 <= "1" when (m_3_fu_208_p2 = ap_const_lv10_200) else "0";
    input_r_address0 <= newIndex8_fu_231_p1(10 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg0_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_3_fu_208_p2 <= std_logic_vector(unsigned(m_phi_fu_147_p4) + unsigned(ap_const_lv10_1));

    m_phi_fu_147_p4_assign_proc : process(m_reg_143, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg0_fsm_3, exitcond_reg_333, m_3_reg_337)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_lv1_0 = exitcond_reg_333))) then 
            m_phi_fu_147_p4 <= m_3_reg_337;
        else 
            m_phi_fu_147_p4 <= m_reg_143;
        end if; 
    end process;

    n_1_fu_186_p2 <= std_logic_vector(unsigned(n_reg_119) + unsigned(ap_const_lv9_1));
    n_cast4_fu_198_p1 <= std_logic_vector(resize(unsigned(n_reg_119),17));
    newIndex8_fu_231_p1 <= std_logic_vector(resize(unsigned(m_phi_fu_147_p4),64));
    notlhs_fu_281_p2 <= "0" when (tmp_fu_267_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_287_p2 <= "1" when (tmp_22_fu_277_p1 = ap_const_lv23_0) else "0";

    one_out_phi_fu_135_p4_assign_proc : process(one_out_reg_131, ap_reg_ppiten_pp0_it2, ap_reg_ppstg_exitcond_reg_333_pp0_iter2, one_out_1_reg_371, ap_sig_cseq_ST_pp0_stg3_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_333_pp0_iter2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_6))) then 
            one_out_phi_fu_135_p4 <= one_out_1_reg_371;
        else 
            one_out_phi_fu_135_p4 <= one_out_reg_131;
        end if; 
    end process;

    output_r_address0 <= output_addr_reg_318;

    output_r_ce0_assign_proc : process(ap_reg_ppiten_pp0_it6, ap_sig_cseq_ST_pp0_stg2_fsm_5)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_5))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= tmp_15_reg_387;

    output_r_we0_assign_proc : process(ap_reg_ppiten_pp0_it6, ap_reg_ppstg_ifzero_reg_352_pp0_iter6, ap_sig_cseq_ST_pp0_stg2_fsm_5)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_5) and not((ap_const_lv1_0 = ap_reg_ppstg_ifzero_reg_352_pp0_iter6))))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_247_p2 <= (input_r_q0 xor ap_const_lv1_1);
    tmp_13_fu_293_p2 <= (notrhs_fu_287_p2 or notlhs_fu_281_p2);
    tmp_15_fu_299_p2 <= (tmp_13_fu_293_p2 and tmp_14_fu_169_p2);
    tmp_21_fu_214_p1 <= m_phi_fu_147_p4(9 - 1 downto 0);
    tmp_22_fu_277_p1 <= biased_to_int_fu_263_p1(23 - 1 downto 0);
    tmp_4_fu_192_p1 <= std_logic_vector(resize(unsigned(n_reg_119),64));
    tmp_6_fu_236_p1 <= std_logic_vector(resize(unsigned(w_index_fu_226_p2),64));
    tmp_7_fu_253_p2 <= (w_fc1_q0 xor tmp1_fu_247_p2);
    tmp_9_fu_218_p3 <= (tmp_21_fu_214_p1 & ap_const_lv8_0);
    tmp_fu_267_p4 <= biased_to_int_fu_263_p1(30 downto 23);
    w_fc1_address0 <= tmp_6_fu_236_p1(17 - 1 downto 0);

    w_fc1_ce0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg0_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3))) then 
            w_fc1_ce0 <= ap_const_logic_1;
        else 
            w_fc1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    w_index_fu_226_p2 <= std_logic_vector(unsigned(n_cast4_reg_323) + unsigned(tmp_9_fu_218_p3));
end behav;
