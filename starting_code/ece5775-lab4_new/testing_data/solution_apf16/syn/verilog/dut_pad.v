// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dut_pad (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0_address0,
        input_0_ce0,
        input_0_q0,
        input_1_address0,
        input_1_ce0,
        input_1_q0,
        input_2_address0,
        input_2_ce0,
        input_2_q0,
        input_3_address0,
        input_3_ce0,
        input_3_q0,
        input_4_address0,
        input_4_ce0,
        input_4_q0,
        input_5_address0,
        input_5_ce0,
        input_5_q0,
        input_6_address0,
        input_6_ce0,
        input_6_q0,
        input_7_address0,
        input_7_ce0,
        input_7_q0,
        input_8_address0,
        input_8_ce0,
        input_8_q0,
        input_9_address0,
        input_9_ce0,
        input_9_q0,
        input_10_address0,
        input_10_ce0,
        input_10_q0,
        input_11_address0,
        input_11_ce0,
        input_11_q0,
        input_12_address0,
        input_12_ce0,
        input_12_q0,
        input_13_address0,
        input_13_ce0,
        input_13_q0,
        input_14_address0,
        input_14_ce0,
        input_14_q0,
        input_15_address0,
        input_15_ce0,
        input_15_q0,
        output_0_address0,
        output_0_ce0,
        output_0_we0,
        output_0_d0,
        output_1_address0,
        output_1_ce0,
        output_1_we0,
        output_1_d0,
        output_2_address0,
        output_2_ce0,
        output_2_we0,
        output_2_d0,
        output_3_address0,
        output_3_ce0,
        output_3_we0,
        output_3_d0,
        output_4_address0,
        output_4_ce0,
        output_4_we0,
        output_4_d0,
        output_5_address0,
        output_5_ce0,
        output_5_we0,
        output_5_d0,
        output_6_address0,
        output_6_ce0,
        output_6_we0,
        output_6_d0,
        output_7_address0,
        output_7_ce0,
        output_7_we0,
        output_7_d0,
        output_8_address0,
        output_8_ce0,
        output_8_we0,
        output_8_d0,
        output_9_address0,
        output_9_ce0,
        output_9_we0,
        output_9_d0,
        output_10_address0,
        output_10_ce0,
        output_10_we0,
        output_10_d0,
        output_11_address0,
        output_11_ce0,
        output_11_we0,
        output_11_d0,
        output_12_address0,
        output_12_ce0,
        output_12_we0,
        output_12_d0,
        output_13_address0,
        output_13_ce0,
        output_13_we0,
        output_13_d0,
        output_14_address0,
        output_14_ce0,
        output_14_we0,
        output_14_d0,
        output_15_address0,
        output_15_ce0,
        output_15_we0,
        output_15_d0,
        M,
        I
);

parameter    ap_ST_st1_fsm_0 = 24'b1;
parameter    ap_ST_st2_fsm_1 = 24'b10;
parameter    ap_ST_st3_fsm_2 = 24'b100;
parameter    ap_ST_st4_fsm_3 = 24'b1000;
parameter    ap_ST_st5_fsm_4 = 24'b10000;
parameter    ap_ST_st6_fsm_5 = 24'b100000;
parameter    ap_ST_st7_fsm_6 = 24'b1000000;
parameter    ap_ST_st8_fsm_7 = 24'b10000000;
parameter    ap_ST_st9_fsm_8 = 24'b100000000;
parameter    ap_ST_st10_fsm_9 = 24'b1000000000;
parameter    ap_ST_st11_fsm_10 = 24'b10000000000;
parameter    ap_ST_st12_fsm_11 = 24'b100000000000;
parameter    ap_ST_st13_fsm_12 = 24'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 24'b10000000000000;
parameter    ap_ST_st15_fsm_14 = 24'b100000000000000;
parameter    ap_ST_st16_fsm_15 = 24'b1000000000000000;
parameter    ap_ST_st17_fsm_16 = 24'b10000000000000000;
parameter    ap_ST_st18_fsm_17 = 24'b100000000000000000;
parameter    ap_ST_st19_fsm_18 = 24'b1000000000000000000;
parameter    ap_ST_st20_fsm_19 = 24'b10000000000000000000;
parameter    ap_ST_st21_fsm_20 = 24'b100000000000000000000;
parameter    ap_ST_st22_fsm_21 = 24'b1000000000000000000000;
parameter    ap_ST_st23_fsm_22 = 24'b10000000000000000000000;
parameter    ap_ST_st24_fsm_23 = 24'b100000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_15 = 32'b10101;
parameter    ap_const_lv32_16 = 32'b10110;
parameter    ap_const_lv13_0 = 13'b0000000000000;
parameter    ap_const_lv27_0 = 27'b000000000000000000000000000;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv5_E = 5'b1110;
parameter    ap_const_lv13_E = 13'b1110;
parameter    ap_const_lv5_D = 5'b1101;
parameter    ap_const_lv13_D = 13'b1101;
parameter    ap_const_lv5_C = 5'b1100;
parameter    ap_const_lv13_C = 13'b1100;
parameter    ap_const_lv5_B = 5'b1011;
parameter    ap_const_lv13_B = 13'b1011;
parameter    ap_const_lv5_A = 5'b1010;
parameter    ap_const_lv13_A = 13'b1010;
parameter    ap_const_lv5_9 = 5'b1001;
parameter    ap_const_lv13_9 = 13'b1001;
parameter    ap_const_lv5_8 = 5'b1000;
parameter    ap_const_lv13_8 = 13'b1000;
parameter    ap_const_lv5_7 = 5'b111;
parameter    ap_const_lv13_7 = 13'b111;
parameter    ap_const_lv5_6 = 5'b110;
parameter    ap_const_lv13_6 = 13'b110;
parameter    ap_const_lv5_5 = 5'b101;
parameter    ap_const_lv13_5 = 13'b101;
parameter    ap_const_lv5_4 = 5'b100;
parameter    ap_const_lv13_4 = 13'b100;
parameter    ap_const_lv5_3 = 5'b11;
parameter    ap_const_lv13_3 = 13'b11;
parameter    ap_const_lv5_2 = 5'b10;
parameter    ap_const_lv13_2 = 13'b10;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_const_lv13_1 = 13'b1;
parameter    ap_const_lv13_1440 = 13'b1010001000000;
parameter    ap_const_lv27_3292 = 27'b11001010010010;
parameter    ap_const_lv32_1A = 32'b11010;
parameter    ap_const_lv13_144 = 13'b101000100;
parameter    ap_const_lv32_19 = 32'b11001;
parameter    ap_const_lv12_144 = 12'b101000100;
parameter    ap_const_lv32_1B = 32'b11011;
parameter    ap_const_lv28_3292 = 28'b11001010010010;
parameter    ap_const_lv26_1949 = 26'b1100101001001;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] input_0_address0;
output   input_0_ce0;
input  [0:0] input_0_q0;
output  [8:0] input_1_address0;
output   input_1_ce0;
input  [0:0] input_1_q0;
output  [8:0] input_2_address0;
output   input_2_ce0;
input  [0:0] input_2_q0;
output  [8:0] input_3_address0;
output   input_3_ce0;
input  [0:0] input_3_q0;
output  [8:0] input_4_address0;
output   input_4_ce0;
input  [0:0] input_4_q0;
output  [8:0] input_5_address0;
output   input_5_ce0;
input  [0:0] input_5_q0;
output  [8:0] input_6_address0;
output   input_6_ce0;
input  [0:0] input_6_q0;
output  [8:0] input_7_address0;
output   input_7_ce0;
input  [0:0] input_7_q0;
output  [8:0] input_8_address0;
output   input_8_ce0;
input  [0:0] input_8_q0;
output  [8:0] input_9_address0;
output   input_9_ce0;
input  [0:0] input_9_q0;
output  [8:0] input_10_address0;
output   input_10_ce0;
input  [0:0] input_10_q0;
output  [8:0] input_11_address0;
output   input_11_ce0;
input  [0:0] input_11_q0;
output  [8:0] input_12_address0;
output   input_12_ce0;
input  [0:0] input_12_q0;
output  [8:0] input_13_address0;
output   input_13_ce0;
input  [0:0] input_13_q0;
output  [8:0] input_14_address0;
output   input_14_ce0;
input  [0:0] input_14_q0;
output  [8:0] input_15_address0;
output   input_15_ce0;
input  [0:0] input_15_q0;
output  [8:0] output_0_address0;
output   output_0_ce0;
output   output_0_we0;
output  [0:0] output_0_d0;
output  [8:0] output_1_address0;
output   output_1_ce0;
output   output_1_we0;
output  [0:0] output_1_d0;
output  [8:0] output_2_address0;
output   output_2_ce0;
output   output_2_we0;
output  [0:0] output_2_d0;
output  [8:0] output_3_address0;
output   output_3_ce0;
output   output_3_we0;
output  [0:0] output_3_d0;
output  [8:0] output_4_address0;
output   output_4_ce0;
output   output_4_we0;
output  [0:0] output_4_d0;
output  [8:0] output_5_address0;
output   output_5_ce0;
output   output_5_we0;
output  [0:0] output_5_d0;
output  [8:0] output_6_address0;
output   output_6_ce0;
output   output_6_we0;
output  [0:0] output_6_d0;
output  [8:0] output_7_address0;
output   output_7_ce0;
output   output_7_we0;
output  [0:0] output_7_d0;
output  [8:0] output_8_address0;
output   output_8_ce0;
output   output_8_we0;
output  [0:0] output_8_d0;
output  [8:0] output_9_address0;
output   output_9_ce0;
output   output_9_we0;
output  [0:0] output_9_d0;
output  [8:0] output_10_address0;
output   output_10_ce0;
output   output_10_we0;
output  [0:0] output_10_d0;
output  [8:0] output_11_address0;
output   output_11_ce0;
output   output_11_we0;
output  [0:0] output_11_d0;
output  [8:0] output_12_address0;
output   output_12_ce0;
output   output_12_we0;
output  [0:0] output_12_d0;
output  [8:0] output_13_address0;
output   output_13_ce0;
output   output_13_we0;
output  [0:0] output_13_d0;
output  [8:0] output_14_address0;
output   output_14_ce0;
output   output_14_we0;
output  [0:0] output_14_d0;
output  [8:0] output_15_address0;
output   output_15_ce0;
output   output_15_we0;
output  [0:0] output_15_d0;
input  [6:0] M;
input  [5:0] I;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_0_ce0;
reg input_1_ce0;
reg input_2_ce0;
reg input_3_ce0;
reg input_4_ce0;
reg input_5_ce0;
reg input_6_ce0;
reg input_7_ce0;
reg input_8_ce0;
reg input_9_ce0;
reg input_10_ce0;
reg input_11_ce0;
reg input_12_ce0;
reg input_13_ce0;
reg input_14_ce0;
reg input_15_ce0;
reg[8:0] output_0_address0;
reg output_0_ce0;
reg output_0_we0;
reg[0:0] output_0_d0;
reg[8:0] output_1_address0;
reg output_1_ce0;
reg output_1_we0;
reg[0:0] output_1_d0;
reg[8:0] output_2_address0;
reg output_2_ce0;
reg output_2_we0;
reg[0:0] output_2_d0;
reg[8:0] output_3_address0;
reg output_3_ce0;
reg output_3_we0;
reg[0:0] output_3_d0;
reg[8:0] output_4_address0;
reg output_4_ce0;
reg output_4_we0;
reg[0:0] output_4_d0;
reg[8:0] output_5_address0;
reg output_5_ce0;
reg output_5_we0;
reg[0:0] output_5_d0;
reg[8:0] output_6_address0;
reg output_6_ce0;
reg output_6_we0;
reg[0:0] output_6_d0;
reg[8:0] output_7_address0;
reg output_7_ce0;
reg output_7_we0;
reg[0:0] output_7_d0;
reg[8:0] output_8_address0;
reg output_8_ce0;
reg output_8_we0;
reg[0:0] output_8_d0;
reg[8:0] output_9_address0;
reg output_9_ce0;
reg output_9_we0;
reg[0:0] output_9_d0;
reg[8:0] output_10_address0;
reg output_10_ce0;
reg output_10_we0;
reg[0:0] output_10_d0;
reg[8:0] output_11_address0;
reg output_11_ce0;
reg output_11_we0;
reg[0:0] output_11_d0;
reg[8:0] output_12_address0;
reg output_12_ce0;
reg output_12_we0;
reg[0:0] output_12_d0;
reg[8:0] output_13_address0;
reg output_13_ce0;
reg output_13_we0;
reg[0:0] output_13_d0;
reg[8:0] output_14_address0;
reg output_14_ce0;
reg output_14_we0;
reg[0:0] output_14_d0;
reg[8:0] output_15_address0;
reg output_15_ce0;
reg output_15_we0;
reg[0:0] output_15_d0;

(* fsm_encoding = "none" *) reg   [23:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_41;
wire   [12:0] tmp_cast5_cast_fu_823_p1;
reg   [12:0] tmp_cast5_cast_reg_1171;
wire   [8:0] tmp_cast_cast_fu_827_p1;
reg   [8:0] tmp_cast_cast_reg_1176;
wire   [12:0] i_1_fu_837_p2;
reg   [12:0] i_1_reg_1184;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_274;
wire   [26:0] next_mul_fu_843_p2;
reg   [26:0] next_mul_reg_1189;
wire   [0:0] exitcond1_fu_831_p2;
wire   [5:0] tmp_8_fu_879_p1;
reg   [5:0] tmp_8_reg_1197;
wire   [7:0] I_cast6_fu_882_p1;
reg   [7:0] I_cast6_reg_1202;
wire   [11:0] I_cast_fu_885_p1;
reg   [11:0] I_cast_reg_1207;
wire   [12:0] idx_urem_fu_900_p3;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_297;
wire   [7:0] next_mul8_fu_908_p2;
reg   [7:0] next_mul8_reg_1217;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_306;
wire   [4:0] m_1_fu_926_p2;
reg   [4:0] m_1_reg_1225;
wire   [8:0] tmp_4_fu_932_p2;
reg   [8:0] tmp_4_reg_1230;
wire   [0:0] tmp_2_fu_921_p2;
wire   [11:0] x_cast2_fu_937_p1;
reg   [11:0] x_cast2_reg_1235;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_323;
wire   [4:0] x_1_fu_950_p2;
reg   [4:0] x_1_reg_1243;
wire   [12:0] tmp_6_cast_fu_956_p1;
reg   [12:0] tmp_6_cast_reg_1248;
wire   [0:0] tmp_5_fu_945_p2;
wire   [4:0] y_1_fu_973_p2;
reg   [4:0] y_1_reg_1256;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_340;
wire   [11:0] tmp2_fu_989_p2;
reg   [11:0] tmp2_reg_1261;
wire   [0:0] exitcond_fu_968_p2;
wire   [8:0] tmp9_fu_998_p2;
reg   [8:0] tmp9_reg_1266;
wire   [11:0] i_index_fu_1003_p2;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_356;
wire   [12:0] o_index_fu_1015_p2;
reg   [12:0] o_index_reg_1276;
reg   [4:0] tmp_11_reg_1282;
reg   [5:0] tmp_12_reg_1287;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_369;
reg    ap_sig_cseq_ST_st22_fsm_21;
reg    ap_sig_378;
wire   [0:0] tmp_6_fu_1083_p18;
reg   [0:0] tmp_6_reg_1372;
reg    ap_sig_cseq_ST_st23_fsm_22;
reg    ap_sig_417;
reg   [12:0] i_reg_734;
reg   [26:0] phi_mul_reg_745;
reg   [12:0] phi_urem_reg_756;
reg   [4:0] m_reg_768;
reg   [7:0] phi_mul7_reg_779;
reg   [4:0] x_reg_791;
reg   [4:0] y_reg_802;
reg    ap_sig_cseq_ST_st24_fsm_23;
reg    ap_sig_445;
wire   [63:0] newIndex2_fu_859_p1;
wire   [63:0] newIndex3_fu_1056_p1;
wire   [63:0] newIndex5_fu_1124_p1;
wire   [4:0] tmp_9_fu_849_p4;
wire  signed [12:0] arrayNo2_fu_1121_p1;
wire   [4:0] tmp_3_fu_813_p1;
wire   [4:0] tmp_s_fu_817_p2;
wire   [12:0] next_urem_fu_888_p2;
wire   [0:0] tmp_10_fu_894_p2;
wire   [5:0] m_cast_fu_917_p1;
wire   [4:0] tmp_4_fu_932_p0;
wire   [4:0] tmp_4_fu_932_p1;
wire   [5:0] x_cast_fu_941_p1;
wire   [5:0] y_cast_fu_964_p1;
wire   [7:0] y_cast1_fu_960_p1;
wire   [7:0] tmp_fu_979_p2;
wire   [5:0] tmp2_fu_989_p0;
wire   [7:0] tmp2_fu_989_p1;
wire   [8:0] y_1_cast_fu_994_p1;
wire   [4:0] tmp1_fu_1010_p0;
wire   [8:0] tmp1_fu_1010_p1;
wire   [12:0] tmp1_fu_1010_p2;
wire   [25:0] mul5_fu_1151_p2;
wire   [9:0] grp_fu_1033_p1;
wire   [27:0] mul2_fu_1144_p2;
wire   [9:0] grp_fu_1051_p1;
wire   [11:0] grp_fu_1033_p2;
wire  signed [11:0] arrayNo_fu_1076_p1;
wire   [31:0] tmp_6_fu_1083_p17;
wire   [12:0] grp_fu_1051_p2;
wire   [12:0] mul2_fu_1144_p0;
wire   [14:0] mul2_fu_1144_p1;
wire   [11:0] mul5_fu_1151_p0;
wire   [13:0] mul5_fu_1151_p1;
reg    grp_fu_1033_ap_start;
wire    grp_fu_1033_ap_done;
reg    grp_fu_1051_ap_start;
wire    grp_fu_1051_ap_done;
reg   [23:0] ap_NS_fsm;
wire   [27:0] mul2_fu_1144_p00;
wire   [25:0] mul5_fu_1151_p00;
wire   [12:0] tmp1_fu_1010_p10;
wire   [11:0] tmp2_fu_989_p10;
wire   [8:0] tmp_4_fu_932_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 24'b1;
end

dut_urem_12ns_10ns_12_16_seq #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 12 ))
dut_urem_12ns_10ns_12_16_seq_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_1033_ap_start),
    .done(grp_fu_1033_ap_done),
    .din0(i_index_fu_1003_p2),
    .din1(grp_fu_1033_p1),
    .ce(1'b1),
    .dout(grp_fu_1033_p2)
);

dut_urem_13ns_10ns_13_17_seq #(
    .ID( 1 ),
    .NUM_STAGE( 17 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 13 ))
dut_urem_13ns_10ns_13_17_seq_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_1051_ap_start),
    .done(grp_fu_1051_ap_done),
    .din0(o_index_reg_1276),
    .din1(grp_fu_1051_p1),
    .ce(1'b1),
    .dout(grp_fu_1051_p2)
);

dut_mux_16to1_sel32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 1 ),
    .din6_WIDTH( 1 ),
    .din7_WIDTH( 1 ),
    .din8_WIDTH( 1 ),
    .din9_WIDTH( 1 ),
    .din10_WIDTH( 1 ),
    .din11_WIDTH( 1 ),
    .din12_WIDTH( 1 ),
    .din13_WIDTH( 1 ),
    .din14_WIDTH( 1 ),
    .din15_WIDTH( 1 ),
    .din16_WIDTH( 1 ),
    .din17_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
dut_mux_16to1_sel32_1_1_U3(
    .din1(input_0_q0),
    .din2(input_1_q0),
    .din3(input_2_q0),
    .din4(input_3_q0),
    .din5(input_4_q0),
    .din6(input_5_q0),
    .din7(input_6_q0),
    .din8(input_7_q0),
    .din9(input_8_q0),
    .din10(input_9_q0),
    .din11(input_10_q0),
    .din12(input_11_q0),
    .din13(input_12_q0),
    .din14(input_13_q0),
    .din15(input_14_q0),
    .din16(input_15_q0),
    .din17(tmp_6_fu_1083_p17),
    .dout(tmp_6_fu_1083_p18)
);

dut_mul_mul_13ns_15ns_28_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 28 ))
dut_mul_mul_13ns_15ns_28_1_U4(
    .din0(mul2_fu_1144_p0),
    .din1(mul2_fu_1144_p1),
    .dout(mul2_fu_1144_p2)
);

dut_mul_mul_12ns_14ns_26_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 26 ))
dut_mul_mul_12ns_14ns_26_1_U5(
    .din0(mul5_fu_1151_p0),
    .din1(mul5_fu_1151_p1),
    .dout(mul5_fu_1151_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        i_reg_734 <= i_1_reg_1184;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        i_reg_734 <= ap_const_lv13_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond1_fu_831_p2 == 1'b0))) begin
        m_reg_768 <= ap_const_lv5_0;
    end else if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) & (1'b0 == tmp_5_fu_945_p2))) begin
        m_reg_768 <= m_1_reg_1225;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond1_fu_831_p2 == 1'b0))) begin
        phi_mul7_reg_779 <= ap_const_lv8_0;
    end else if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) & (1'b0 == tmp_5_fu_945_p2))) begin
        phi_mul7_reg_779 <= next_mul8_reg_1217;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        phi_mul_reg_745 <= next_mul_reg_1189;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        phi_mul_reg_745 <= ap_const_lv27_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        phi_urem_reg_756 <= idx_urem_fu_900_p3;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        phi_urem_reg_756 <= ap_const_lv13_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & ~(1'b0 == exitcond_fu_968_p2))) begin
        x_reg_791 <= x_1_reg_1243;
    end else if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & ~(1'b0 == tmp_2_fu_921_p2))) begin
        x_reg_791 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st24_fsm_23)) begin
        y_reg_802 <= y_1_reg_1256;
    end else if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) & ~(1'b0 == tmp_5_fu_945_p2))) begin
        y_reg_802 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond1_fu_831_p2 == 1'b0))) begin
        I_cast6_reg_1202[5 : 0] <= I_cast6_fu_882_p1[5 : 0];
        I_cast_reg_1207[5 : 0] <= I_cast_fu_885_p1[5 : 0];
        tmp_8_reg_1197 <= tmp_8_fu_879_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        i_1_reg_1184 <= i_1_fu_837_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        m_1_reg_1225 <= m_1_fu_926_p2;
        next_mul8_reg_1217 <= next_mul8_fu_908_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_831_p2 == 1'b0))) begin
        next_mul_reg_1189 <= next_mul_fu_843_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        o_index_reg_1276 <= o_index_fu_1015_p2;
        tmp_11_reg_1282 <= {{mul5_fu_1151_p2[ap_const_lv32_19 : ap_const_lv32_15]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & (1'b0 == exitcond_fu_968_p2))) begin
        tmp2_reg_1261 <= tmp2_fu_989_p2;
        tmp9_reg_1266 <= tmp9_fu_998_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        tmp_12_reg_1287 <= {{mul2_fu_1144_p2[ap_const_lv32_1B : ap_const_lv32_16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & ~(1'b0 == tmp_2_fu_921_p2))) begin
        tmp_4_reg_1230 <= tmp_4_fu_932_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) & ~(1'b0 == tmp_5_fu_945_p2))) begin
        tmp_6_cast_reg_1248[4 : 0] <= tmp_6_cast_fu_956_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st23_fsm_22)) begin
        tmp_6_reg_1372 <= tmp_6_fu_1083_p18;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        tmp_cast5_cast_reg_1171[4 : 0] <= tmp_cast5_cast_fu_823_p1[4 : 0];
        tmp_cast_cast_reg_1176[4 : 0] <= tmp_cast_cast_fu_827_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        x_1_reg_1243 <= x_1_fu_950_p2;
        x_cast2_reg_1235[4 : 0] <= x_cast2_fu_937_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        y_1_reg_1256 <= y_1_fu_973_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0)) | ((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & (1'b0 == tmp_2_fu_921_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & (1'b0 == tmp_2_fu_921_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_41) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_378) begin
        ap_sig_cseq_ST_st22_fsm_21 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st22_fsm_21 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_417) begin
        ap_sig_cseq_ST_st23_fsm_22 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st23_fsm_22 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_445) begin
        ap_sig_cseq_ST_st24_fsm_23 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st24_fsm_23 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_274) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_297) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_306) begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_323) begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_340) begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_356) begin
        ap_sig_cseq_ST_st7_fsm_6 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_369) begin
        ap_sig_cseq_ST_st8_fsm_7 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        grp_fu_1033_ap_start = 1'b1;
    end else begin
        grp_fu_1033_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        grp_fu_1051_ap_start = 1'b1;
    end else begin
        grp_fu_1051_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st22_fsm_21)) begin
        input_0_ce0 = 1'b1;
    end else begin
        input_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st22_fsm_21)) begin
        input_10_ce0 = 1'b1;
    end else begin
        input_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st22_fsm_21)) begin
        input_11_ce0 = 1'b1;
    end else begin
        input_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st22_fsm_21)) begin
        input_12_ce0 = 1'b1;
    end else begin
        input_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st22_fsm_21)) begin
        input_13_ce0 = 1'b1;
    end else begin
        input_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st22_fsm_21)) begin
        input_14_ce0 = 1'b1;
    end else begin
        input_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st22_fsm_21)) begin
        input_15_ce0 = 1'b1;
    end else begin
        input_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st22_fsm_21)) begin
        input_1_ce0 = 1'b1;
    end else begin
        input_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st22_fsm_21)) begin
        input_2_ce0 = 1'b1;
    end else begin
        input_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st22_fsm_21)) begin
        input_3_ce0 = 1'b1;
    end else begin
        input_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st22_fsm_21)) begin
        input_4_ce0 = 1'b1;
    end else begin
        input_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st22_fsm_21)) begin
        input_5_ce0 = 1'b1;
    end else begin
        input_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st22_fsm_21)) begin
        input_6_ce0 = 1'b1;
    end else begin
        input_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st22_fsm_21)) begin
        input_7_ce0 = 1'b1;
    end else begin
        input_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st22_fsm_21)) begin
        input_8_ce0 = 1'b1;
    end else begin
        input_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st22_fsm_21)) begin
        input_9_ce0 = 1'b1;
    end else begin
        input_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st24_fsm_23)) begin
        output_0_address0 = newIndex5_fu_1124_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_0_address0 = newIndex2_fu_859_p1;
    end else begin
        output_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st24_fsm_23))) begin
        output_0_ce0 = 1'b1;
    end else begin
        output_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st24_fsm_23)) begin
        output_0_d0 = tmp_6_reg_1372;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_0_d0 = 1'b0;
    end else begin
        output_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_831_p2 == 1'b0) & (ap_const_lv5_0 == tmp_9_fu_849_p4)) | ((1'b1 == ap_sig_cseq_ST_st24_fsm_23) & (ap_const_lv13_0 == arrayNo2_fu_1121_p1)))) begin
        output_0_we0 = 1'b1;
    end else begin
        output_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st24_fsm_23)) begin
        output_10_address0 = newIndex5_fu_1124_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_10_address0 = newIndex2_fu_859_p1;
    end else begin
        output_10_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st24_fsm_23))) begin
        output_10_ce0 = 1'b1;
    end else begin
        output_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st24_fsm_23)) begin
        output_10_d0 = tmp_6_reg_1372;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_10_d0 = 1'b0;
    end else begin
        output_10_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_831_p2 == 1'b0) & (tmp_9_fu_849_p4 == ap_const_lv5_A)) | ((1'b1 == ap_sig_cseq_ST_st24_fsm_23) & (arrayNo2_fu_1121_p1 == ap_const_lv13_A)))) begin
        output_10_we0 = 1'b1;
    end else begin
        output_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st24_fsm_23)) begin
        output_11_address0 = newIndex5_fu_1124_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_11_address0 = newIndex2_fu_859_p1;
    end else begin
        output_11_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st24_fsm_23))) begin
        output_11_ce0 = 1'b1;
    end else begin
        output_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st24_fsm_23)) begin
        output_11_d0 = tmp_6_reg_1372;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_11_d0 = 1'b0;
    end else begin
        output_11_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_831_p2 == 1'b0) & (tmp_9_fu_849_p4 == ap_const_lv5_B)) | ((1'b1 == ap_sig_cseq_ST_st24_fsm_23) & (arrayNo2_fu_1121_p1 == ap_const_lv13_B)))) begin
        output_11_we0 = 1'b1;
    end else begin
        output_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st24_fsm_23)) begin
        output_12_address0 = newIndex5_fu_1124_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_12_address0 = newIndex2_fu_859_p1;
    end else begin
        output_12_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st24_fsm_23))) begin
        output_12_ce0 = 1'b1;
    end else begin
        output_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st24_fsm_23)) begin
        output_12_d0 = tmp_6_reg_1372;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_12_d0 = 1'b0;
    end else begin
        output_12_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_831_p2 == 1'b0) & (tmp_9_fu_849_p4 == ap_const_lv5_C)) | ((1'b1 == ap_sig_cseq_ST_st24_fsm_23) & (arrayNo2_fu_1121_p1 == ap_const_lv13_C)))) begin
        output_12_we0 = 1'b1;
    end else begin
        output_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st24_fsm_23)) begin
        output_13_address0 = newIndex5_fu_1124_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_13_address0 = newIndex2_fu_859_p1;
    end else begin
        output_13_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st24_fsm_23))) begin
        output_13_ce0 = 1'b1;
    end else begin
        output_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st24_fsm_23)) begin
        output_13_d0 = tmp_6_reg_1372;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_13_d0 = 1'b0;
    end else begin
        output_13_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_831_p2 == 1'b0) & (tmp_9_fu_849_p4 == ap_const_lv5_D)) | ((1'b1 == ap_sig_cseq_ST_st24_fsm_23) & (arrayNo2_fu_1121_p1 == ap_const_lv13_D)))) begin
        output_13_we0 = 1'b1;
    end else begin
        output_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st24_fsm_23)) begin
        output_14_address0 = newIndex5_fu_1124_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_14_address0 = newIndex2_fu_859_p1;
    end else begin
        output_14_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st24_fsm_23))) begin
        output_14_ce0 = 1'b1;
    end else begin
        output_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st24_fsm_23)) begin
        output_14_d0 = tmp_6_reg_1372;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_14_d0 = 1'b0;
    end else begin
        output_14_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_831_p2 == 1'b0) & (tmp_9_fu_849_p4 == ap_const_lv5_E)) | ((1'b1 == ap_sig_cseq_ST_st24_fsm_23) & (arrayNo2_fu_1121_p1 == ap_const_lv13_E)))) begin
        output_14_we0 = 1'b1;
    end else begin
        output_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st24_fsm_23)) begin
        output_15_address0 = newIndex5_fu_1124_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_15_address0 = newIndex2_fu_859_p1;
    end else begin
        output_15_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st24_fsm_23))) begin
        output_15_ce0 = 1'b1;
    end else begin
        output_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st24_fsm_23)) begin
        output_15_d0 = tmp_6_reg_1372;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_15_d0 = 1'b0;
    end else begin
        output_15_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_831_p2 == 1'b0) & ~(ap_const_lv5_0 == tmp_9_fu_849_p4) & ~(tmp_9_fu_849_p4 == ap_const_lv5_1) & ~(tmp_9_fu_849_p4 == ap_const_lv5_2) & ~(tmp_9_fu_849_p4 == ap_const_lv5_3) & ~(tmp_9_fu_849_p4 == ap_const_lv5_4) & ~(tmp_9_fu_849_p4 == ap_const_lv5_5) & ~(tmp_9_fu_849_p4 == ap_const_lv5_6) & ~(tmp_9_fu_849_p4 == ap_const_lv5_7) & ~(tmp_9_fu_849_p4 == ap_const_lv5_8) & ~(tmp_9_fu_849_p4 == ap_const_lv5_9) & ~(tmp_9_fu_849_p4 == ap_const_lv5_A) & ~(tmp_9_fu_849_p4 == ap_const_lv5_B) & ~(tmp_9_fu_849_p4 == ap_const_lv5_C) & ~(tmp_9_fu_849_p4 == ap_const_lv5_D) & ~(tmp_9_fu_849_p4 == ap_const_lv5_E)) | ((1'b1 == ap_sig_cseq_ST_st24_fsm_23) & ~(ap_const_lv13_0 == arrayNo2_fu_1121_p1) & ~(arrayNo2_fu_1121_p1 == ap_const_lv13_1) & ~(arrayNo2_fu_1121_p1 == ap_const_lv13_2) & ~(arrayNo2_fu_1121_p1 == ap_const_lv13_3) & ~(arrayNo2_fu_1121_p1 == ap_const_lv13_4) & ~(arrayNo2_fu_1121_p1 == ap_const_lv13_5) & ~(arrayNo2_fu_1121_p1 == ap_const_lv13_6) & ~(arrayNo2_fu_1121_p1 == ap_const_lv13_7) & ~(arrayNo2_fu_1121_p1 == ap_const_lv13_8) & ~(arrayNo2_fu_1121_p1 == ap_const_lv13_9) & ~(arrayNo2_fu_1121_p1 == ap_const_lv13_A) & ~(arrayNo2_fu_1121_p1 == ap_const_lv13_B) & ~(arrayNo2_fu_1121_p1 == ap_const_lv13_C) & ~(arrayNo2_fu_1121_p1 == ap_const_lv13_D) & ~(arrayNo2_fu_1121_p1 == ap_const_lv13_E)))) begin
        output_15_we0 = 1'b1;
    end else begin
        output_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st24_fsm_23)) begin
        output_1_address0 = newIndex5_fu_1124_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_1_address0 = newIndex2_fu_859_p1;
    end else begin
        output_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st24_fsm_23))) begin
        output_1_ce0 = 1'b1;
    end else begin
        output_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st24_fsm_23)) begin
        output_1_d0 = tmp_6_reg_1372;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_1_d0 = 1'b0;
    end else begin
        output_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_831_p2 == 1'b0) & (tmp_9_fu_849_p4 == ap_const_lv5_1)) | ((1'b1 == ap_sig_cseq_ST_st24_fsm_23) & (arrayNo2_fu_1121_p1 == ap_const_lv13_1)))) begin
        output_1_we0 = 1'b1;
    end else begin
        output_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st24_fsm_23)) begin
        output_2_address0 = newIndex5_fu_1124_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_2_address0 = newIndex2_fu_859_p1;
    end else begin
        output_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st24_fsm_23))) begin
        output_2_ce0 = 1'b1;
    end else begin
        output_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st24_fsm_23)) begin
        output_2_d0 = tmp_6_reg_1372;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_2_d0 = 1'b0;
    end else begin
        output_2_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_831_p2 == 1'b0) & (tmp_9_fu_849_p4 == ap_const_lv5_2)) | ((1'b1 == ap_sig_cseq_ST_st24_fsm_23) & (arrayNo2_fu_1121_p1 == ap_const_lv13_2)))) begin
        output_2_we0 = 1'b1;
    end else begin
        output_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st24_fsm_23)) begin
        output_3_address0 = newIndex5_fu_1124_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_3_address0 = newIndex2_fu_859_p1;
    end else begin
        output_3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st24_fsm_23))) begin
        output_3_ce0 = 1'b1;
    end else begin
        output_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st24_fsm_23)) begin
        output_3_d0 = tmp_6_reg_1372;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_3_d0 = 1'b0;
    end else begin
        output_3_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_831_p2 == 1'b0) & (tmp_9_fu_849_p4 == ap_const_lv5_3)) | ((1'b1 == ap_sig_cseq_ST_st24_fsm_23) & (arrayNo2_fu_1121_p1 == ap_const_lv13_3)))) begin
        output_3_we0 = 1'b1;
    end else begin
        output_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st24_fsm_23)) begin
        output_4_address0 = newIndex5_fu_1124_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_4_address0 = newIndex2_fu_859_p1;
    end else begin
        output_4_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st24_fsm_23))) begin
        output_4_ce0 = 1'b1;
    end else begin
        output_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st24_fsm_23)) begin
        output_4_d0 = tmp_6_reg_1372;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_4_d0 = 1'b0;
    end else begin
        output_4_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_831_p2 == 1'b0) & (tmp_9_fu_849_p4 == ap_const_lv5_4)) | ((1'b1 == ap_sig_cseq_ST_st24_fsm_23) & (arrayNo2_fu_1121_p1 == ap_const_lv13_4)))) begin
        output_4_we0 = 1'b1;
    end else begin
        output_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st24_fsm_23)) begin
        output_5_address0 = newIndex5_fu_1124_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_5_address0 = newIndex2_fu_859_p1;
    end else begin
        output_5_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st24_fsm_23))) begin
        output_5_ce0 = 1'b1;
    end else begin
        output_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st24_fsm_23)) begin
        output_5_d0 = tmp_6_reg_1372;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_5_d0 = 1'b0;
    end else begin
        output_5_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_831_p2 == 1'b0) & (tmp_9_fu_849_p4 == ap_const_lv5_5)) | ((1'b1 == ap_sig_cseq_ST_st24_fsm_23) & (arrayNo2_fu_1121_p1 == ap_const_lv13_5)))) begin
        output_5_we0 = 1'b1;
    end else begin
        output_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st24_fsm_23)) begin
        output_6_address0 = newIndex5_fu_1124_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_6_address0 = newIndex2_fu_859_p1;
    end else begin
        output_6_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st24_fsm_23))) begin
        output_6_ce0 = 1'b1;
    end else begin
        output_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st24_fsm_23)) begin
        output_6_d0 = tmp_6_reg_1372;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_6_d0 = 1'b0;
    end else begin
        output_6_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_831_p2 == 1'b0) & (tmp_9_fu_849_p4 == ap_const_lv5_6)) | ((1'b1 == ap_sig_cseq_ST_st24_fsm_23) & (arrayNo2_fu_1121_p1 == ap_const_lv13_6)))) begin
        output_6_we0 = 1'b1;
    end else begin
        output_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st24_fsm_23)) begin
        output_7_address0 = newIndex5_fu_1124_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_7_address0 = newIndex2_fu_859_p1;
    end else begin
        output_7_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st24_fsm_23))) begin
        output_7_ce0 = 1'b1;
    end else begin
        output_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st24_fsm_23)) begin
        output_7_d0 = tmp_6_reg_1372;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_7_d0 = 1'b0;
    end else begin
        output_7_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_831_p2 == 1'b0) & (tmp_9_fu_849_p4 == ap_const_lv5_7)) | ((1'b1 == ap_sig_cseq_ST_st24_fsm_23) & (arrayNo2_fu_1121_p1 == ap_const_lv13_7)))) begin
        output_7_we0 = 1'b1;
    end else begin
        output_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st24_fsm_23)) begin
        output_8_address0 = newIndex5_fu_1124_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_8_address0 = newIndex2_fu_859_p1;
    end else begin
        output_8_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st24_fsm_23))) begin
        output_8_ce0 = 1'b1;
    end else begin
        output_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st24_fsm_23)) begin
        output_8_d0 = tmp_6_reg_1372;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_8_d0 = 1'b0;
    end else begin
        output_8_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_831_p2 == 1'b0) & (tmp_9_fu_849_p4 == ap_const_lv5_8)) | ((1'b1 == ap_sig_cseq_ST_st24_fsm_23) & (arrayNo2_fu_1121_p1 == ap_const_lv13_8)))) begin
        output_8_we0 = 1'b1;
    end else begin
        output_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st24_fsm_23)) begin
        output_9_address0 = newIndex5_fu_1124_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_9_address0 = newIndex2_fu_859_p1;
    end else begin
        output_9_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st24_fsm_23))) begin
        output_9_ce0 = 1'b1;
    end else begin
        output_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st24_fsm_23)) begin
        output_9_d0 = tmp_6_reg_1372;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_9_d0 = 1'b0;
    end else begin
        output_9_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_831_p2 == 1'b0) & (tmp_9_fu_849_p4 == ap_const_lv5_9)) | ((1'b1 == ap_sig_cseq_ST_st24_fsm_23) & (arrayNo2_fu_1121_p1 == ap_const_lv13_9)))) begin
        output_9_we0 = 1'b1;
    end else begin
        output_9_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if (~(exitcond1_fu_831_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : begin
            ap_NS_fsm = ap_ST_st2_fsm_1;
        end
        ap_ST_st4_fsm_3 : begin
            if ((1'b0 == tmp_2_fu_921_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        end
        ap_ST_st5_fsm_4 : begin
            if ((1'b0 == tmp_5_fu_945_p2)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end
        end
        ap_ST_st6_fsm_5 : begin
            if (~(1'b0 == exitcond_fu_968_p2)) begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end else begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end
        end
        ap_ST_st7_fsm_6 : begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : begin
            ap_NS_fsm = ap_ST_st14_fsm_13;
        end
        ap_ST_st14_fsm_13 : begin
            ap_NS_fsm = ap_ST_st15_fsm_14;
        end
        ap_ST_st15_fsm_14 : begin
            ap_NS_fsm = ap_ST_st16_fsm_15;
        end
        ap_ST_st16_fsm_15 : begin
            ap_NS_fsm = ap_ST_st17_fsm_16;
        end
        ap_ST_st17_fsm_16 : begin
            ap_NS_fsm = ap_ST_st18_fsm_17;
        end
        ap_ST_st18_fsm_17 : begin
            ap_NS_fsm = ap_ST_st19_fsm_18;
        end
        ap_ST_st19_fsm_18 : begin
            ap_NS_fsm = ap_ST_st20_fsm_19;
        end
        ap_ST_st20_fsm_19 : begin
            ap_NS_fsm = ap_ST_st21_fsm_20;
        end
        ap_ST_st21_fsm_20 : begin
            ap_NS_fsm = ap_ST_st22_fsm_21;
        end
        ap_ST_st22_fsm_21 : begin
            ap_NS_fsm = ap_ST_st23_fsm_22;
        end
        ap_ST_st23_fsm_22 : begin
            ap_NS_fsm = ap_ST_st24_fsm_23;
        end
        ap_ST_st24_fsm_23 : begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign I_cast6_fu_882_p1 = I;

assign I_cast_fu_885_p1 = I;

always @ (*) begin
    ap_sig_274 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_297 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

always @ (*) begin
    ap_sig_306 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

always @ (*) begin
    ap_sig_323 = (1'b1 == ap_CS_fsm[ap_const_lv32_4]);
end

always @ (*) begin
    ap_sig_340 = (1'b1 == ap_CS_fsm[ap_const_lv32_5]);
end

always @ (*) begin
    ap_sig_356 = (1'b1 == ap_CS_fsm[ap_const_lv32_6]);
end

always @ (*) begin
    ap_sig_369 = (1'b1 == ap_CS_fsm[ap_const_lv32_7]);
end

always @ (*) begin
    ap_sig_378 = (1'b1 == ap_CS_fsm[ap_const_lv32_15]);
end

always @ (*) begin
    ap_sig_41 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_417 = (1'b1 == ap_CS_fsm[ap_const_lv32_16]);
end

always @ (*) begin
    ap_sig_445 = (1'b1 == ap_CS_fsm[ap_const_lv32_17]);
end

assign arrayNo2_fu_1121_p1 = $signed(tmp_12_reg_1287);

assign arrayNo_fu_1076_p1 = $signed(tmp_11_reg_1282);

assign exitcond1_fu_831_p2 = ((i_reg_734 == ap_const_lv13_1440) ? 1'b1 : 1'b0);

assign exitcond_fu_968_p2 = ((y_cast_fu_964_p1 == I) ? 1'b1 : 1'b0);

assign grp_fu_1033_p1 = ap_const_lv12_144;

assign grp_fu_1051_p1 = ap_const_lv13_144;

assign i_1_fu_837_p2 = (i_reg_734 + ap_const_lv13_1);

assign i_index_fu_1003_p2 = (x_cast2_reg_1235 + tmp2_reg_1261);

assign idx_urem_fu_900_p3 = ((tmp_10_fu_894_p2[0:0] === 1'b1) ? next_urem_fu_888_p2 : ap_const_lv13_0);

assign input_0_address0 = newIndex3_fu_1056_p1;

assign input_10_address0 = newIndex3_fu_1056_p1;

assign input_11_address0 = newIndex3_fu_1056_p1;

assign input_12_address0 = newIndex3_fu_1056_p1;

assign input_13_address0 = newIndex3_fu_1056_p1;

assign input_14_address0 = newIndex3_fu_1056_p1;

assign input_15_address0 = newIndex3_fu_1056_p1;

assign input_1_address0 = newIndex3_fu_1056_p1;

assign input_2_address0 = newIndex3_fu_1056_p1;

assign input_3_address0 = newIndex3_fu_1056_p1;

assign input_4_address0 = newIndex3_fu_1056_p1;

assign input_5_address0 = newIndex3_fu_1056_p1;

assign input_6_address0 = newIndex3_fu_1056_p1;

assign input_7_address0 = newIndex3_fu_1056_p1;

assign input_8_address0 = newIndex3_fu_1056_p1;

assign input_9_address0 = newIndex3_fu_1056_p1;

assign m_1_fu_926_p2 = (m_reg_768 + ap_const_lv5_1);

assign m_cast_fu_917_p1 = m_reg_768;

assign mul2_fu_1144_p0 = mul2_fu_1144_p00;

assign mul2_fu_1144_p00 = o_index_reg_1276;

assign mul2_fu_1144_p1 = ap_const_lv28_3292;

assign mul5_fu_1151_p0 = mul5_fu_1151_p00;

assign mul5_fu_1151_p00 = i_index_fu_1003_p2;

assign mul5_fu_1151_p1 = ap_const_lv26_1949;

assign newIndex2_fu_859_p1 = phi_urem_reg_756;

assign newIndex3_fu_1056_p1 = grp_fu_1033_p2;

assign newIndex5_fu_1124_p1 = grp_fu_1051_p2;

assign next_mul8_fu_908_p2 = (phi_mul7_reg_779 + I_cast6_reg_1202);

assign next_mul_fu_843_p2 = (phi_mul_reg_745 + ap_const_lv27_3292);

assign next_urem_fu_888_p2 = (phi_urem_reg_756 + ap_const_lv13_1);

assign o_index_fu_1015_p2 = (tmp1_fu_1010_p2 + tmp_6_cast_reg_1248);

assign tmp1_fu_1010_p0 = tmp_cast5_cast_reg_1171;

assign tmp1_fu_1010_p1 = tmp1_fu_1010_p10;

assign tmp1_fu_1010_p10 = tmp9_reg_1266;

assign tmp1_fu_1010_p2 = (tmp1_fu_1010_p0 * tmp1_fu_1010_p1);

assign tmp2_fu_989_p0 = I_cast_reg_1207;

assign tmp2_fu_989_p1 = tmp2_fu_989_p10;

assign tmp2_fu_989_p10 = tmp_fu_979_p2;

assign tmp2_fu_989_p2 = (tmp2_fu_989_p0 * tmp2_fu_989_p1);

assign tmp9_fu_998_p2 = (tmp_4_reg_1230 + y_1_cast_fu_994_p1);

assign tmp_10_fu_894_p2 = ((next_urem_fu_888_p2 < ap_const_lv13_144) ? 1'b1 : 1'b0);

assign tmp_2_fu_921_p2 = (($signed(m_cast_fu_917_p1) < $signed(tmp_8_reg_1197)) ? 1'b1 : 1'b0);

assign tmp_3_fu_813_p1 = I[4:0];

assign tmp_4_fu_932_p0 = tmp_4_fu_932_p00;

assign tmp_4_fu_932_p00 = m_reg_768;

assign tmp_4_fu_932_p1 = tmp_cast_cast_reg_1176;

assign tmp_4_fu_932_p2 = (tmp_4_fu_932_p0 * tmp_4_fu_932_p1);

assign tmp_5_fu_945_p2 = (($signed(x_cast_fu_941_p1) < $signed(I)) ? 1'b1 : 1'b0);

assign tmp_6_cast_fu_956_p1 = x_1_fu_950_p2;

assign tmp_6_fu_1083_p17 = $unsigned(arrayNo_fu_1076_p1);

assign tmp_8_fu_879_p1 = M[5:0];

assign tmp_9_fu_849_p4 = {{phi_mul_reg_745[ap_const_lv32_1A : ap_const_lv32_16]}};

assign tmp_cast5_cast_fu_823_p1 = tmp_s_fu_817_p2;

assign tmp_cast_cast_fu_827_p1 = tmp_s_fu_817_p2;

assign tmp_fu_979_p2 = (phi_mul7_reg_779 + y_cast1_fu_960_p1);

assign tmp_s_fu_817_p2 = (ap_const_lv5_2 + tmp_3_fu_813_p1);

assign x_1_fu_950_p2 = (x_reg_791 + ap_const_lv5_1);

assign x_cast2_fu_937_p1 = x_reg_791;

assign x_cast_fu_941_p1 = x_reg_791;

assign y_1_cast_fu_994_p1 = y_1_fu_973_p2;

assign y_1_fu_973_p2 = (y_reg_802 + ap_const_lv5_1);

assign y_cast1_fu_960_p1 = y_reg_802;

assign y_cast_fu_964_p1 = y_reg_802;

always @ (posedge ap_clk) begin
    tmp_cast5_cast_reg_1171[12:5] <= 8'b00000000;
    tmp_cast_cast_reg_1176[8:5] <= 4'b0000;
    I_cast6_reg_1202[7:6] <= 2'b00;
    I_cast_reg_1207[11:6] <= 6'b000000;
    x_cast2_reg_1235[11:5] <= 7'b0000000;
    tmp_6_cast_reg_1248[12:5] <= 8'b00000000;
end

endmodule //dut_pad
