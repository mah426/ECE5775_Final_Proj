// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dut_dense (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0_address0,
        input_0_ce0,
        input_0_q0,
        output_0_address0,
        output_0_ce0,
        output_0_we0,
        output_0_d0
);

parameter    ap_ST_st1_fsm_0 = 34'b1;
parameter    ap_ST_st2_fsm_1 = 34'b10;
parameter    ap_ST_st3_fsm_2 = 34'b100;
parameter    ap_ST_st4_fsm_3 = 34'b1000;
parameter    ap_ST_st5_fsm_4 = 34'b10000;
parameter    ap_ST_st6_fsm_5 = 34'b100000;
parameter    ap_ST_st7_fsm_6 = 34'b1000000;
parameter    ap_ST_st8_fsm_7 = 34'b10000000;
parameter    ap_ST_st9_fsm_8 = 34'b100000000;
parameter    ap_ST_st10_fsm_9 = 34'b1000000000;
parameter    ap_ST_st11_fsm_10 = 34'b10000000000;
parameter    ap_ST_st12_fsm_11 = 34'b100000000000;
parameter    ap_ST_st13_fsm_12 = 34'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 34'b10000000000000;
parameter    ap_ST_st15_fsm_14 = 34'b100000000000000;
parameter    ap_ST_st16_fsm_15 = 34'b1000000000000000;
parameter    ap_ST_st17_fsm_16 = 34'b10000000000000000;
parameter    ap_ST_st18_fsm_17 = 34'b100000000000000000;
parameter    ap_ST_st19_fsm_18 = 34'b1000000000000000000;
parameter    ap_ST_st20_fsm_19 = 34'b10000000000000000000;
parameter    ap_ST_st21_fsm_20 = 34'b100000000000000000000;
parameter    ap_ST_st22_fsm_21 = 34'b1000000000000000000000;
parameter    ap_ST_st23_fsm_22 = 34'b10000000000000000000000;
parameter    ap_ST_st24_fsm_23 = 34'b100000000000000000000000;
parameter    ap_ST_st25_fsm_24 = 34'b1000000000000000000000000;
parameter    ap_ST_st26_fsm_25 = 34'b10000000000000000000000000;
parameter    ap_ST_st27_fsm_26 = 34'b100000000000000000000000000;
parameter    ap_ST_st28_fsm_27 = 34'b1000000000000000000000000000;
parameter    ap_ST_st29_fsm_28 = 34'b10000000000000000000000000000;
parameter    ap_ST_st30_fsm_29 = 34'b100000000000000000000000000000;
parameter    ap_ST_st31_fsm_30 = 34'b1000000000000000000000000000000;
parameter    ap_ST_st32_fsm_31 = 34'b10000000000000000000000000000000;
parameter    ap_ST_st33_fsm_32 = 34'b100000000000000000000000000000000;
parameter    ap_ST_st34_fsm_33 = 34'b1000000000000000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv32_1A = 32'b11010;
parameter    ap_const_lv32_16 = 32'b10110;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_19 = 32'b11001;
parameter    ap_const_lv32_20 = 32'b100000;
parameter    ap_const_lv32_21 = 32'b100001;
parameter    ap_const_lv32_C2C80000 = 32'b11000010110010000000000000000000;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv9_0 = 9'b000000000;
parameter    ap_const_lv32_C3800000 = 32'b11000011100000000000000000000000;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_12 = 32'b10010;
parameter    ap_const_lv32_1B = 32'b11011;
parameter    ap_const_lv32_40000000 = 32'b1000000000000000000000000000000;
parameter    ap_const_lv32_3DB504F3 = 32'b111101101101010000010011110011;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv4_A = 4'b1010;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv9_100 = 9'b100000000;
parameter    ap_const_lv9_1 = 9'b1;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv32_1E = 32'b11110;
parameter    ap_const_lv8_FF = 8'b11111111;
parameter    ap_const_lv23_0 = 23'b00000000000000000000000;
parameter    ap_const_lv5_2 = 5'b10;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] input_0_address0;
output   input_0_ce0;
input  [0:0] input_0_q0;
output  [9:0] output_0_address0;
output   output_0_ce0;
output   output_0_we0;
output  [0:0] output_0_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_0_ce0;
reg output_0_ce0;
reg output_0_we0;

(* fsm_encoding = "none" *) reg   [33:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_51;
wire   [11:0] w_fc2_address0;
reg    w_fc2_ce0;
wire   [0:0] w_fc2_q0;
wire   [3:0] b_fc2_address0;
reg    b_fc2_ce0;
wire   [31:0] b_fc2_q0;
wire   [31:0] grp_fu_165_p2;
reg   [31:0] reg_180;
reg    ap_sig_cseq_ST_st18_fsm_17;
reg    ap_sig_90;
reg    ap_sig_cseq_ST_st27_fsm_26;
reg    ap_sig_97;
wire   [31:0] grp_fu_159_p2;
reg   [31:0] reg_185;
reg    ap_sig_cseq_ST_st23_fsm_22;
reg    ap_sig_107;
reg    ap_sig_cseq_ST_st32_fsm_31;
reg    ap_sig_114;
wire   [9:0] n_cast5_fu_191_p1;
reg   [9:0] n_cast5_reg_383;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_124;
wire   [3:0] n_1_fu_201_p2;
reg   [3:0] n_1_reg_391;
wire   [8:0] m_3_fu_213_p2;
reg   [8:0] m_3_reg_399;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_135;
wire   [0:0] exitcond_fu_207_p2;
wire   [0:0] tmp_20_fu_276_p2;
reg   [0:0] tmp_20_reg_414;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_152;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_161;
wire   [31:0] grp_fu_172_p1;
reg   [31:0] tmp_22_reg_424;
reg    ap_sig_cseq_ST_st10_fsm_9;
reg    ap_sig_170;
reg    ap_sig_cseq_ST_st15_fsm_14;
reg    ap_sig_178;
wire   [63:0] tmp_16_fu_286_p1;
reg   [63:0] tmp_16_reg_434;
reg    ap_sig_cseq_ST_st26_fsm_25;
reg    ap_sig_187;
reg   [31:0] b_fc2_load_reg_444;
wire   [0:0] tmp_26_fu_175_p2;
reg   [0:0] tmp_26_reg_449;
reg    ap_sig_cseq_ST_st33_fsm_32;
reg    ap_sig_199;
wire   [31:0] biased_max_fu_375_p3;
reg    ap_sig_cseq_ST_st34_fsm_33;
reg    ap_sig_208;
reg   [31:0] max_reg_112;
reg   [3:0] n_reg_124;
reg   [31:0] one_out_reg_136;
wire   [0:0] exitcond2_fu_195_p2;
reg   [8:0] m_reg_148;
wire   [63:0] newIndex9_fu_260_p1;
wire   [63:0] tmp_18_fu_265_p1;
wire   [0:0] tmp_27_fu_369_p2;
reg   [31:0] grp_fu_159_p0;
reg   [31:0] grp_fu_159_p1;
reg    ap_sig_cseq_ST_st11_fsm_10;
reg    ap_sig_240;
reg    ap_sig_cseq_ST_st19_fsm_18;
reg    ap_sig_247;
reg    ap_sig_cseq_ST_st28_fsm_27;
reg    ap_sig_254;
reg   [31:0] grp_fu_165_p0;
reg   [31:0] grp_fu_165_p1;
reg    ap_sig_cseq_ST_st24_fsm_23;
reg    ap_sig_266;
wire   [31:0] grp_fu_172_p0;
wire   [7:0] tmp_31_fu_219_p1;
wire   [10:0] p_shl_fu_223_p3;
wire   [8:0] tmp_32_fu_235_p2;
wire   [9:0] p_shl1_cast_fu_241_p1;
wire   [9:0] tmp1_fu_245_p2;
wire   [11:0] tmp1_cast_fu_250_p1;
wire   [11:0] p_shl_cast_fu_231_p1;
wire   [11:0] w_index_fu_254_p2;
wire   [0:0] tmp2_fu_270_p2;
wire   [31:0] biased_to_int_fu_291_p1;
wire   [31:0] max_to_int_fu_309_p1;
wire   [7:0] tmp_fu_295_p4;
wire   [22:0] tmp_24_fu_305_p1;
wire   [0:0] notrhs_fu_333_p2;
wire   [0:0] notlhs_fu_327_p2;
wire   [7:0] tmp_17_fu_313_p4;
wire   [22:0] tmp_30_fu_323_p1;
wire   [0:0] notrhs7_fu_351_p2;
wire   [0:0] notlhs6_fu_345_p2;
wire   [0:0] tmp_19_fu_339_p2;
wire   [0:0] tmp_23_fu_357_p2;
wire   [0:0] tmp_25_fu_363_p2;
reg   [33:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 34'b1;
end

dut_dense_w_fc2 #(
    .DataWidth( 1 ),
    .AddressRange( 2560 ),
    .AddressWidth( 12 ))
w_fc2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w_fc2_address0),
    .ce0(w_fc2_ce0),
    .q0(w_fc2_q0)
);

dut_dense_b_fc2 #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
b_fc2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(b_fc2_address0),
    .ce0(b_fc2_ce0),
    .q0(b_fc2_q0)
);

dut_fadd_32ns_32ns_32_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dut_fadd_32ns_32ns_32_5_full_dsp_U126(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_159_p0),
    .din1(grp_fu_159_p1),
    .ce(1'b1),
    .dout(grp_fu_159_p2)
);

dut_fmul_32ns_32ns_32_4_max_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dut_fmul_32ns_32ns_32_4_max_dsp_U127(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_165_p0),
    .din1(grp_fu_165_p1),
    .ce(1'b1),
    .dout(grp_fu_165_p2)
);

dut_sitofp_32ns_32_6 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dut_sitofp_32ns_32_6_U128(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_172_p0),
    .ce(1'b1),
    .dout(grp_fu_172_p1)
);

dut_fcmp_32ns_32ns_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
dut_fcmp_32ns_32ns_1_1_U129(
    .din0(reg_185),
    .din1(max_reg_112),
    .opcode(ap_const_lv5_2),
    .dout(tmp_26_fu_175_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st15_fsm_14)) begin
        m_reg_148 <= m_3_reg_399;
    end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (1'b0 == exitcond2_fu_195_p2))) begin
        m_reg_148 <= ap_const_lv9_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st34_fsm_33)) begin
        max_reg_112 <= biased_max_fu_375_p3;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        max_reg_112 <= ap_const_lv32_C2C80000;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st34_fsm_33)) begin
        n_reg_124 <= n_1_reg_391;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        n_reg_124 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st15_fsm_14)) begin
        one_out_reg_136 <= grp_fu_159_p2;
    end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (1'b0 == exitcond2_fu_195_p2))) begin
        one_out_reg_136 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st27_fsm_26)) begin
        b_fc2_load_reg_444 <= b_fc2_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        m_3_reg_399 <= m_3_fu_213_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        n_1_reg_391 <= n_1_fu_201_p2;
        n_cast5_reg_383[3 : 0] <= n_cast5_fu_191_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st18_fsm_17) | (1'b1 == ap_sig_cseq_ST_st27_fsm_26))) begin
        reg_180 <= grp_fu_165_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st23_fsm_22) | (1'b1 == ap_sig_cseq_ST_st32_fsm_31))) begin
        reg_185 <= grp_fu_159_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st26_fsm_25)) begin
        tmp_16_reg_434[3 : 0] <= tmp_16_fu_286_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        tmp_20_reg_414 <= tmp_20_fu_276_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        tmp_22_reg_424 <= grp_fu_172_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st33_fsm_32)) begin
        tmp_26_reg_449 <= tmp_26_fu_175_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0)) | ((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(1'b0 == exitcond2_fu_195_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(1'b0 == exitcond2_fu_195_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_170) begin
        ap_sig_cseq_ST_st10_fsm_9 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_9 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_240) begin
        ap_sig_cseq_ST_st11_fsm_10 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st11_fsm_10 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_178) begin
        ap_sig_cseq_ST_st15_fsm_14 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st15_fsm_14 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_90) begin
        ap_sig_cseq_ST_st18_fsm_17 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st18_fsm_17 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_247) begin
        ap_sig_cseq_ST_st19_fsm_18 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st19_fsm_18 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_51) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_107) begin
        ap_sig_cseq_ST_st23_fsm_22 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st23_fsm_22 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_266) begin
        ap_sig_cseq_ST_st24_fsm_23 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st24_fsm_23 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_187) begin
        ap_sig_cseq_ST_st26_fsm_25 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st26_fsm_25 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_97) begin
        ap_sig_cseq_ST_st27_fsm_26 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st27_fsm_26 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_254) begin
        ap_sig_cseq_ST_st28_fsm_27 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st28_fsm_27 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_124) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_114) begin
        ap_sig_cseq_ST_st32_fsm_31 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st32_fsm_31 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_199) begin
        ap_sig_cseq_ST_st33_fsm_32 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st33_fsm_32 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_208) begin
        ap_sig_cseq_ST_st34_fsm_33 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st34_fsm_33 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_135) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_152) begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_161) begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st26_fsm_25)) begin
        b_fc2_ce0 = 1'b1;
    end else begin
        b_fc2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st19_fsm_18) | (1'b1 == ap_sig_cseq_ST_st28_fsm_27))) begin
        grp_fu_159_p0 = reg_180;
    end else if ((1'b1 == ap_sig_cseq_ST_st11_fsm_10)) begin
        grp_fu_159_p0 = one_out_reg_136;
    end else begin
        grp_fu_159_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st28_fsm_27)) begin
        grp_fu_159_p1 = b_fc2_load_reg_444;
    end else if ((1'b1 == ap_sig_cseq_ST_st19_fsm_18)) begin
        grp_fu_159_p1 = ap_const_lv32_C3800000;
    end else if ((1'b1 == ap_sig_cseq_ST_st11_fsm_10)) begin
        grp_fu_159_p1 = tmp_22_reg_424;
    end else begin
        grp_fu_159_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st24_fsm_23)) begin
        grp_fu_165_p0 = reg_185;
    end else if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        grp_fu_165_p0 = one_out_reg_136;
    end else begin
        grp_fu_165_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st24_fsm_23)) begin
        grp_fu_165_p1 = ap_const_lv32_3DB504F3;
    end else if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        grp_fu_165_p1 = ap_const_lv32_40000000;
    end else begin
        grp_fu_165_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        input_0_ce0 = 1'b1;
    end else begin
        input_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st34_fsm_33)) begin
        output_0_ce0 = 1'b1;
    end else begin
        output_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st34_fsm_33)) begin
        output_0_we0 = 1'b1;
    end else begin
        output_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        w_fc2_ce0 = 1'b1;
    end else begin
        w_fc2_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if (~(1'b0 == exitcond2_fu_195_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : begin
            if (~(exitcond_fu_207_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_st16_fsm_15;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st4_fsm_3 : begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : begin
            ap_NS_fsm = ap_ST_st14_fsm_13;
        end
        ap_ST_st14_fsm_13 : begin
            ap_NS_fsm = ap_ST_st15_fsm_14;
        end
        ap_ST_st15_fsm_14 : begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st16_fsm_15 : begin
            ap_NS_fsm = ap_ST_st17_fsm_16;
        end
        ap_ST_st17_fsm_16 : begin
            ap_NS_fsm = ap_ST_st18_fsm_17;
        end
        ap_ST_st18_fsm_17 : begin
            ap_NS_fsm = ap_ST_st19_fsm_18;
        end
        ap_ST_st19_fsm_18 : begin
            ap_NS_fsm = ap_ST_st20_fsm_19;
        end
        ap_ST_st20_fsm_19 : begin
            ap_NS_fsm = ap_ST_st21_fsm_20;
        end
        ap_ST_st21_fsm_20 : begin
            ap_NS_fsm = ap_ST_st22_fsm_21;
        end
        ap_ST_st22_fsm_21 : begin
            ap_NS_fsm = ap_ST_st23_fsm_22;
        end
        ap_ST_st23_fsm_22 : begin
            ap_NS_fsm = ap_ST_st24_fsm_23;
        end
        ap_ST_st24_fsm_23 : begin
            ap_NS_fsm = ap_ST_st25_fsm_24;
        end
        ap_ST_st25_fsm_24 : begin
            ap_NS_fsm = ap_ST_st26_fsm_25;
        end
        ap_ST_st26_fsm_25 : begin
            ap_NS_fsm = ap_ST_st27_fsm_26;
        end
        ap_ST_st27_fsm_26 : begin
            ap_NS_fsm = ap_ST_st28_fsm_27;
        end
        ap_ST_st28_fsm_27 : begin
            ap_NS_fsm = ap_ST_st29_fsm_28;
        end
        ap_ST_st29_fsm_28 : begin
            ap_NS_fsm = ap_ST_st30_fsm_29;
        end
        ap_ST_st30_fsm_29 : begin
            ap_NS_fsm = ap_ST_st31_fsm_30;
        end
        ap_ST_st31_fsm_30 : begin
            ap_NS_fsm = ap_ST_st32_fsm_31;
        end
        ap_ST_st32_fsm_31 : begin
            ap_NS_fsm = ap_ST_st33_fsm_32;
        end
        ap_ST_st33_fsm_32 : begin
            ap_NS_fsm = ap_ST_st34_fsm_33;
        end
        ap_ST_st34_fsm_33 : begin
            ap_NS_fsm = ap_ST_st2_fsm_1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    ap_sig_107 = (1'b1 == ap_CS_fsm[ap_const_lv32_16]);
end

always @ (*) begin
    ap_sig_114 = (1'b1 == ap_CS_fsm[ap_const_lv32_1F]);
end

always @ (*) begin
    ap_sig_124 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_135 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

always @ (*) begin
    ap_sig_152 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

always @ (*) begin
    ap_sig_161 = (1'b1 == ap_CS_fsm[ap_const_lv32_4]);
end

always @ (*) begin
    ap_sig_170 = (1'b1 == ap_CS_fsm[ap_const_lv32_9]);
end

always @ (*) begin
    ap_sig_178 = (1'b1 == ap_CS_fsm[ap_const_lv32_E]);
end

always @ (*) begin
    ap_sig_187 = (1'b1 == ap_CS_fsm[ap_const_lv32_19]);
end

always @ (*) begin
    ap_sig_199 = (1'b1 == ap_CS_fsm[ap_const_lv32_20]);
end

always @ (*) begin
    ap_sig_208 = (1'b1 == ap_CS_fsm[ap_const_lv32_21]);
end

always @ (*) begin
    ap_sig_240 = (1'b1 == ap_CS_fsm[ap_const_lv32_A]);
end

always @ (*) begin
    ap_sig_247 = (1'b1 == ap_CS_fsm[ap_const_lv32_12]);
end

always @ (*) begin
    ap_sig_254 = (1'b1 == ap_CS_fsm[ap_const_lv32_1B]);
end

always @ (*) begin
    ap_sig_266 = (1'b1 == ap_CS_fsm[ap_const_lv32_17]);
end

always @ (*) begin
    ap_sig_51 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_90 = (1'b1 == ap_CS_fsm[ap_const_lv32_11]);
end

always @ (*) begin
    ap_sig_97 = (1'b1 == ap_CS_fsm[ap_const_lv32_1A]);
end

assign b_fc2_address0 = tmp_16_fu_286_p1;

assign biased_max_fu_375_p3 = ((tmp_27_fu_369_p2[0:0] === 1'b1) ? reg_185 : max_reg_112);

assign biased_to_int_fu_291_p1 = reg_185;

assign exitcond2_fu_195_p2 = ((n_reg_124 == ap_const_lv4_A) ? 1'b1 : 1'b0);

assign exitcond_fu_207_p2 = ((m_reg_148 == ap_const_lv9_100) ? 1'b1 : 1'b0);

assign grp_fu_172_p0 = tmp_20_reg_414;

assign input_0_address0 = newIndex9_fu_260_p1;

assign m_3_fu_213_p2 = (m_reg_148 + ap_const_lv9_1);

assign max_to_int_fu_309_p1 = max_reg_112;

assign n_1_fu_201_p2 = (n_reg_124 + ap_const_lv4_1);

assign n_cast5_fu_191_p1 = n_reg_124;

assign newIndex9_fu_260_p1 = m_reg_148;

assign notlhs6_fu_345_p2 = ((tmp_17_fu_313_p4 != ap_const_lv8_FF) ? 1'b1 : 1'b0);

assign notlhs_fu_327_p2 = ((tmp_fu_295_p4 != ap_const_lv8_FF) ? 1'b1 : 1'b0);

assign notrhs7_fu_351_p2 = ((tmp_30_fu_323_p1 == ap_const_lv23_0) ? 1'b1 : 1'b0);

assign notrhs_fu_333_p2 = ((tmp_24_fu_305_p1 == ap_const_lv23_0) ? 1'b1 : 1'b0);

assign output_0_address0 = tmp_16_reg_434;

assign output_0_d0 = tmp_27_fu_369_p2;

assign p_shl1_cast_fu_241_p1 = tmp_32_fu_235_p2;

assign p_shl_cast_fu_231_p1 = p_shl_fu_223_p3;

assign p_shl_fu_223_p3 = {{tmp_31_fu_219_p1}, {ap_const_lv3_0}};

assign tmp1_cast_fu_250_p1 = tmp1_fu_245_p2;

assign tmp1_fu_245_p2 = (p_shl1_cast_fu_241_p1 + n_cast5_reg_383);

assign tmp2_fu_270_p2 = (input_0_q0 ^ 1'b1);

assign tmp_16_fu_286_p1 = n_reg_124;

assign tmp_17_fu_313_p4 = {{max_to_int_fu_309_p1[ap_const_lv32_1E : ap_const_lv32_17]}};

assign tmp_18_fu_265_p1 = w_index_fu_254_p2;

assign tmp_19_fu_339_p2 = (notrhs_fu_333_p2 | notlhs_fu_327_p2);

assign tmp_20_fu_276_p2 = (w_fc2_q0 ^ tmp2_fu_270_p2);

assign tmp_23_fu_357_p2 = (notrhs7_fu_351_p2 | notlhs6_fu_345_p2);

assign tmp_24_fu_305_p1 = biased_to_int_fu_291_p1[22:0];

assign tmp_25_fu_363_p2 = (tmp_19_fu_339_p2 & tmp_23_fu_357_p2);

assign tmp_27_fu_369_p2 = (tmp_25_fu_363_p2 & tmp_26_reg_449);

assign tmp_30_fu_323_p1 = max_to_int_fu_309_p1[22:0];

assign tmp_31_fu_219_p1 = m_reg_148[7:0];

assign tmp_32_fu_235_p2 = m_reg_148 << ap_const_lv9_1;

assign tmp_fu_295_p4 = {{biased_to_int_fu_291_p1[ap_const_lv32_1E : ap_const_lv32_17]}};

assign w_fc2_address0 = tmp_18_fu_265_p1;

assign w_index_fu_254_p2 = (tmp1_cast_fu_250_p1 + p_shl_cast_fu_231_p1);

always @ (posedge ap_clk) begin
    n_cast5_reg_383[9:4] <= 6'b000000;
    tmp_16_reg_434[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //dut_dense
