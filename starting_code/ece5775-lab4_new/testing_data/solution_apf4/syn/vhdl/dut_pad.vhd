-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_pad is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_0_ce0 : OUT STD_LOGIC;
    input_0_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_1_ce0 : OUT STD_LOGIC;
    input_1_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input_2_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_2_ce0 : OUT STD_LOGIC;
    input_2_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    input_3_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_3_ce0 : OUT STD_LOGIC;
    input_3_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    output_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    output_0_ce0 : OUT STD_LOGIC;
    output_0_we0 : OUT STD_LOGIC;
    output_0_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    output_1_ce0 : OUT STD_LOGIC;
    output_1_we0 : OUT STD_LOGIC;
    output_1_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_2_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    output_2_ce0 : OUT STD_LOGIC;
    output_2_we0 : OUT STD_LOGIC;
    output_2_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_3_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    output_3_ce0 : OUT STD_LOGIC;
    output_3_we0 : OUT STD_LOGIC;
    output_3_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    M : IN STD_LOGIC_VECTOR (6 downto 0);
    I : IN STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of dut_pad is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (22 downto 0) := "00000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (22 downto 0) := "00000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (22 downto 0) := "00000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (22 downto 0) := "00000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (22 downto 0) := "00000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (22 downto 0) := "00000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (22 downto 0) := "00001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (22 downto 0) := "00010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (22 downto 0) := "00100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (22 downto 0) := "01000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (22 downto 0) := "10000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv13_2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv13_1440 : STD_LOGIC_VECTOR (12 downto 0) := "1010001000000";
    constant ap_const_lv27_3292 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000011001010010010";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv13_510 : STD_LOGIC_VECTOR (12 downto 0) := "0010100010000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv12_510 : STD_LOGIC_VECTOR (11 downto 0) := "010100010000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv28_3292 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000011001010010010";
    constant ap_const_lv26_1949 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001100101001001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_40 : BOOLEAN;
    signal tmp_cast5_cast_fu_336_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_cast5_cast_reg_624 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_cast_cast_fu_340_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_cast_cast_reg_629 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_1_fu_350_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_117 : BOOLEAN;
    signal next_mul_fu_356_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal exitcond1_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal idx_urem_fu_392_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_8_fu_400_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_reg_655 : STD_LOGIC_VECTOR (5 downto 0);
    signal I_cast6_fu_403_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal I_cast6_reg_660 : STD_LOGIC_VECTOR (7 downto 0);
    signal I_cast_fu_406_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal I_cast_reg_665 : STD_LOGIC_VECTOR (11 downto 0);
    signal next_mul8_fu_409_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal next_mul8_reg_670 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_142 : BOOLEAN;
    signal m_1_fu_427_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal m_1_reg_678 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_fu_433_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_reg_683 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_2_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_cast2_fu_438_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal x_cast2_reg_688 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_159 : BOOLEAN;
    signal x_1_fu_451_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal x_1_reg_696 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_6_cast_fu_457_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_6_cast_reg_701 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_5_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_1_fu_474_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal y_1_reg_709 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_176 : BOOLEAN;
    signal tmp2_fu_490_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_reg_714 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp9_fu_499_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp9_reg_719 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_index_fu_504_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_192 : BOOLEAN;
    signal o_index_fu_516_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal o_index_reg_729 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_11_reg_735 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_12_reg_740 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_205 : BOOLEAN;
    signal ap_sig_cseq_ST_st21_fsm_20 : STD_LOGIC;
    signal ap_sig_214 : BOOLEAN;
    signal tmp_6_fu_572_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_765 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st22_fsm_21 : STD_LOGIC;
    signal ap_sig_229 : BOOLEAN;
    signal i_reg_248 : STD_LOGIC_VECTOR (12 downto 0);
    signal phi_mul_reg_259 : STD_LOGIC_VECTOR (26 downto 0);
    signal phi_urem_reg_270 : STD_LOGIC_VECTOR (12 downto 0);
    signal m_reg_281 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul7_reg_292 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_reg_304 : STD_LOGIC_VECTOR (4 downto 0);
    signal y_reg_315 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st23_fsm_22 : STD_LOGIC;
    signal ap_sig_257 : BOOLEAN;
    signal newIndex2_fu_372_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal newIndex7_fu_557_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal newIndex4_fu_589_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_362_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal arrayNo2_fu_586_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_3_fu_326_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_330_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal next_urem_fu_380_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_10_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_cast_fu_418_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_fu_433_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_fu_433_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal x_cast_fu_442_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal y_cast_fu_465_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal y_cast1_fu_461_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_480_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp2_fu_490_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp2_fu_490_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_1_cast_fu_495_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_fu_511_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp1_fu_511_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_fu_511_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul5_fu_604_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul2_fu_597_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_552_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_534_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal arrayNo_fu_565_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_6_fu_572_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_552_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul2_fu_597_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul2_fu_597_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul5_fu_604_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul5_fu_604_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_534_ap_start : STD_LOGIC;
    signal grp_fu_534_ap_done : STD_LOGIC;
    signal grp_fu_552_ap_start : STD_LOGIC;
    signal grp_fu_552_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (22 downto 0);
    signal mul2_fu_597_p00 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul5_fu_604_p00 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp1_fu_511_p10 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp2_fu_490_p10 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_4_fu_433_p00 : STD_LOGIC_VECTOR (8 downto 0);

    component dut_urem_12ns_12ns_12_16_seq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component dut_urem_13ns_12ns_13_17_seq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component dut_mux_4to1_sel32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component dut_mul_mul_13ns_15ns_28_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component dut_mul_mul_12ns_14ns_26_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;



begin
    dut_urem_12ns_12ns_12_16_seq_U1 : component dut_urem_12ns_12ns_12_16_seq
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_534_ap_start,
        done => grp_fu_534_ap_done,
        din0 => i_index_fu_504_p2,
        din1 => ap_const_lv12_510,
        ce => ap_const_logic_1,
        dout => grp_fu_534_p2);

    dut_urem_13ns_12ns_13_17_seq_U2 : component dut_urem_13ns_12ns_13_17_seq
    generic map (
        ID => 1,
        NUM_STAGE => 17,
        din0_WIDTH => 13,
        din1_WIDTH => 12,
        dout_WIDTH => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_552_ap_start,
        done => grp_fu_552_ap_done,
        din0 => o_index_reg_729,
        din1 => grp_fu_552_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_552_p2);

    dut_mux_4to1_sel32_1_1_U3 : component dut_mux_4to1_sel32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din1 => input_0_q0,
        din2 => input_1_q0,
        din3 => input_2_q0,
        din4 => input_3_q0,
        din5 => tmp_6_fu_572_p5,
        dout => tmp_6_fu_572_p6);

    dut_mul_mul_13ns_15ns_28_1_U4 : component dut_mul_mul_13ns_15ns_28_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 15,
        dout_WIDTH => 28)
    port map (
        din0 => mul2_fu_597_p0,
        din1 => mul2_fu_597_p1,
        dout => mul2_fu_597_p2);

    dut_mul_mul_12ns_14ns_26_1_U5 : component dut_mul_mul_12ns_14ns_26_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 14,
        dout_WIDTH => 26)
    port map (
        din0 => mul5_fu_604_p0,
        din1 => mul5_fu_604_p1,
        dout => mul5_fu_604_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_344_p2 = ap_const_lv1_0))) then 
                i_reg_248 <= i_1_fu_350_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_248 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    m_reg_281_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond1_fu_344_p2 = ap_const_lv1_0)))) then 
                m_reg_281 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = tmp_5_fu_446_p2))) then 
                m_reg_281 <= m_1_reg_678;
            end if; 
        end if;
    end process;

    phi_mul7_reg_292_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond1_fu_344_p2 = ap_const_lv1_0)))) then 
                phi_mul7_reg_292 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = tmp_5_fu_446_p2))) then 
                phi_mul7_reg_292 <= next_mul8_reg_670;
            end if; 
        end if;
    end process;

    phi_mul_reg_259_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_344_p2 = ap_const_lv1_0))) then 
                phi_mul_reg_259 <= next_mul_fu_356_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                phi_mul_reg_259 <= ap_const_lv27_0;
            end if; 
        end if;
    end process;

    phi_urem_reg_270_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_344_p2 = ap_const_lv1_0))) then 
                phi_urem_reg_270 <= idx_urem_fu_392_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                phi_urem_reg_270 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    x_reg_304_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond_fu_469_p2)))) then 
                x_reg_304 <= x_1_reg_696;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = tmp_2_fu_422_p2)))) then 
                x_reg_304 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    y_reg_315_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
                y_reg_315 <= y_1_reg_709;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = tmp_5_fu_446_p2)))) then 
                y_reg_315 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond1_fu_344_p2 = ap_const_lv1_0)))) then
                    I_cast6_reg_660(5 downto 0) <= I_cast6_fu_403_p1(5 downto 0);
                    I_cast_reg_665(5 downto 0) <= I_cast_fu_406_p1(5 downto 0);
                tmp_8_reg_655 <= tmp_8_fu_400_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                m_1_reg_678 <= m_1_fu_427_p2;
                next_mul8_reg_670 <= next_mul8_fu_409_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                o_index_reg_729 <= o_index_fu_516_p2;
                tmp_11_reg_735 <= mul5_fu_604_p2(25 downto 23);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond_fu_469_p2))) then
                tmp2_reg_714 <= tmp2_fu_490_p2;
                tmp9_reg_719 <= tmp9_fu_499_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then
                tmp_12_reg_740 <= mul2_fu_597_p2(27 downto 24);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = tmp_2_fu_422_p2)))) then
                tmp_4_reg_683 <= tmp_4_fu_433_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = tmp_5_fu_446_p2)))) then
                    tmp_6_cast_reg_701(4 downto 0) <= tmp_6_cast_fu_457_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then
                tmp_6_reg_765 <= tmp_6_fu_572_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                    tmp_cast5_cast_reg_624(4 downto 0) <= tmp_cast5_cast_fu_336_p1(4 downto 0);
                    tmp_cast_cast_reg_629(4 downto 0) <= tmp_cast_cast_fu_340_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                x_1_reg_696 <= x_1_fu_451_p2;
                    x_cast2_reg_688(4 downto 0) <= x_cast2_fu_438_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                y_1_reg_709 <= y_1_fu_474_p2;
            end if;
        end if;
    end process;
    tmp_cast5_cast_reg_624(12 downto 5) <= "00000000";
    tmp_cast_cast_reg_629(8 downto 5) <= "0000";
    I_cast6_reg_660(7 downto 6) <= "00";
    I_cast_reg_665(11 downto 6) <= "000000";
    x_cast2_reg_688(11 downto 5) <= "0000000";
    tmp_6_cast_reg_701(12 downto 5) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond1_fu_344_p2, tmp_2_fu_422_p2, tmp_5_fu_446_p2, exitcond_fu_469_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond1_fu_344_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                if ((ap_const_lv1_0 = tmp_2_fu_422_p2)) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                if ((ap_const_lv1_0 = tmp_5_fu_446_p2)) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st5_fsm_4 => 
                if (not((ap_const_lv1_0 = exitcond_fu_469_p2))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    I_cast6_fu_403_p1 <= std_logic_vector(resize(unsigned(I),8));
    I_cast_fu_406_p1 <= std_logic_vector(resize(unsigned(I),12));

    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st3_fsm_2, tmp_2_fu_422_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_2_fu_422_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, tmp_2_fu_422_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_2_fu_422_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_117_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_117 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_142_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_142 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_159_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_159 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_176_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_176 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_192_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_192 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_205_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_205 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    ap_sig_214_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_214 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    ap_sig_229_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_229 <= (ap_const_lv1_1 = ap_CS_fsm(21 downto 21));
    end process;


    ap_sig_257_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_257 <= (ap_const_lv1_1 = ap_CS_fsm(22 downto 22));
    end process;


    ap_sig_40_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_40 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_40)
    begin
        if (ap_sig_40) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st21_fsm_20_assign_proc : process(ap_sig_214)
    begin
        if (ap_sig_214) then 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st22_fsm_21_assign_proc : process(ap_sig_229)
    begin
        if (ap_sig_229) then 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st23_fsm_22_assign_proc : process(ap_sig_257)
    begin
        if (ap_sig_257) then 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_117)
    begin
        if (ap_sig_117) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_142)
    begin
        if (ap_sig_142) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_159)
    begin
        if (ap_sig_159) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_176)
    begin
        if (ap_sig_176) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_192)
    begin
        if (ap_sig_192) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_205)
    begin
        if (ap_sig_205) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;

        arrayNo2_fu_586_p1 <= std_logic_vector(resize(signed(tmp_12_reg_740),13));

        arrayNo_fu_565_p1 <= std_logic_vector(resize(signed(tmp_11_reg_735),12));

    exitcond1_fu_344_p2 <= "1" when (i_reg_248 = ap_const_lv13_1440) else "0";
    exitcond_fu_469_p2 <= "1" when (y_cast_fu_465_p1 = I) else "0";

    grp_fu_534_ap_start_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            grp_fu_534_ap_start <= ap_const_logic_1;
        else 
            grp_fu_534_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_552_ap_start_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            grp_fu_552_ap_start <= ap_const_logic_1;
        else 
            grp_fu_552_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_552_p1 <= ap_const_lv13_510(12 - 1 downto 0);
    i_1_fu_350_p2 <= std_logic_vector(unsigned(i_reg_248) + unsigned(ap_const_lv13_1));
    i_index_fu_504_p2 <= std_logic_vector(unsigned(x_cast2_reg_688) + unsigned(tmp2_reg_714));
    idx_urem_fu_392_p3 <= 
        next_urem_fu_380_p2 when (tmp_10_fu_386_p2(0) = '1') else 
        ap_const_lv13_0;
    input_0_address0 <= newIndex7_fu_557_p1(11 - 1 downto 0);

    input_0_ce0_assign_proc : process(ap_sig_cseq_ST_st21_fsm_20)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
            input_0_ce0 <= ap_const_logic_1;
        else 
            input_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_1_address0 <= newIndex7_fu_557_p1(11 - 1 downto 0);

    input_1_ce0_assign_proc : process(ap_sig_cseq_ST_st21_fsm_20)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
            input_1_ce0 <= ap_const_logic_1;
        else 
            input_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_2_address0 <= newIndex7_fu_557_p1(11 - 1 downto 0);

    input_2_ce0_assign_proc : process(ap_sig_cseq_ST_st21_fsm_20)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
            input_2_ce0 <= ap_const_logic_1;
        else 
            input_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_3_address0 <= newIndex7_fu_557_p1(11 - 1 downto 0);

    input_3_ce0_assign_proc : process(ap_sig_cseq_ST_st21_fsm_20)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
            input_3_ce0 <= ap_const_logic_1;
        else 
            input_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_1_fu_427_p2 <= std_logic_vector(unsigned(m_reg_281) + unsigned(ap_const_lv5_1));
    m_cast_fu_418_p1 <= std_logic_vector(resize(unsigned(m_reg_281),6));
    mul2_fu_597_p0 <= mul2_fu_597_p00(13 - 1 downto 0);
    mul2_fu_597_p00 <= std_logic_vector(resize(unsigned(o_index_reg_729),28));
    mul2_fu_597_p1 <= ap_const_lv28_3292(15 - 1 downto 0);
    mul5_fu_604_p0 <= mul5_fu_604_p00(12 - 1 downto 0);
    mul5_fu_604_p00 <= std_logic_vector(resize(unsigned(i_index_fu_504_p2),26));
    mul5_fu_604_p1 <= ap_const_lv26_1949(14 - 1 downto 0);
    newIndex2_fu_372_p1 <= std_logic_vector(resize(unsigned(phi_urem_reg_270),64));
    newIndex4_fu_589_p1 <= std_logic_vector(resize(unsigned(grp_fu_552_p2),64));
    newIndex7_fu_557_p1 <= std_logic_vector(resize(unsigned(grp_fu_534_p2),64));
    next_mul8_fu_409_p2 <= std_logic_vector(unsigned(phi_mul7_reg_292) + unsigned(I_cast6_reg_660));
    next_mul_fu_356_p2 <= std_logic_vector(unsigned(phi_mul_reg_259) + unsigned(ap_const_lv27_3292));
    next_urem_fu_380_p2 <= std_logic_vector(unsigned(phi_urem_reg_270) + unsigned(ap_const_lv13_1));
    o_index_fu_516_p2 <= std_logic_vector(unsigned(tmp1_fu_511_p2) + unsigned(tmp_6_cast_reg_701));

    output_0_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st23_fsm_22, newIndex2_fu_372_p1, newIndex4_fu_589_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
            output_0_address0 <= newIndex4_fu_589_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            output_0_address0 <= newIndex2_fu_372_p1(11 - 1 downto 0);
        else 
            output_0_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    output_0_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st23_fsm_22)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22))) then 
            output_0_ce0 <= ap_const_logic_1;
        else 
            output_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_0_d0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, tmp_6_reg_765, ap_sig_cseq_ST_st23_fsm_22)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
            output_0_d0 <= tmp_6_reg_765;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            output_0_d0 <= ap_const_lv1_0;
        else 
            output_0_d0 <= "X";
        end if; 
    end process;


    output_0_we0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond1_fu_344_p2, ap_sig_cseq_ST_st23_fsm_22, tmp_9_fu_362_p4, arrayNo2_fu_586_p1)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_344_p2 = ap_const_lv1_0) and (tmp_9_fu_362_p4 = ap_const_lv3_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) and (ap_const_lv13_0 = arrayNo2_fu_586_p1)))) then 
            output_0_we0 <= ap_const_logic_1;
        else 
            output_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_1_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st23_fsm_22, newIndex2_fu_372_p1, newIndex4_fu_589_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
            output_1_address0 <= newIndex4_fu_589_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            output_1_address0 <= newIndex2_fu_372_p1(11 - 1 downto 0);
        else 
            output_1_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    output_1_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st23_fsm_22)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22))) then 
            output_1_ce0 <= ap_const_logic_1;
        else 
            output_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_1_d0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, tmp_6_reg_765, ap_sig_cseq_ST_st23_fsm_22)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
            output_1_d0 <= tmp_6_reg_765;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            output_1_d0 <= ap_const_lv1_0;
        else 
            output_1_d0 <= "X";
        end if; 
    end process;


    output_1_we0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond1_fu_344_p2, ap_sig_cseq_ST_st23_fsm_22, tmp_9_fu_362_p4, arrayNo2_fu_586_p1)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_344_p2 = ap_const_lv1_0) and (tmp_9_fu_362_p4 = ap_const_lv3_1)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) and (arrayNo2_fu_586_p1 = ap_const_lv13_1)))) then 
            output_1_we0 <= ap_const_logic_1;
        else 
            output_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_2_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st23_fsm_22, newIndex2_fu_372_p1, newIndex4_fu_589_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
            output_2_address0 <= newIndex4_fu_589_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            output_2_address0 <= newIndex2_fu_372_p1(11 - 1 downto 0);
        else 
            output_2_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    output_2_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st23_fsm_22)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22))) then 
            output_2_ce0 <= ap_const_logic_1;
        else 
            output_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_2_d0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, tmp_6_reg_765, ap_sig_cseq_ST_st23_fsm_22)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
            output_2_d0 <= tmp_6_reg_765;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            output_2_d0 <= ap_const_lv1_0;
        else 
            output_2_d0 <= "X";
        end if; 
    end process;


    output_2_we0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond1_fu_344_p2, ap_sig_cseq_ST_st23_fsm_22, tmp_9_fu_362_p4, arrayNo2_fu_586_p1)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_344_p2 = ap_const_lv1_0) and (tmp_9_fu_362_p4 = ap_const_lv3_2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) and (arrayNo2_fu_586_p1 = ap_const_lv13_2)))) then 
            output_2_we0 <= ap_const_logic_1;
        else 
            output_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_3_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st23_fsm_22, newIndex2_fu_372_p1, newIndex4_fu_589_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
            output_3_address0 <= newIndex4_fu_589_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            output_3_address0 <= newIndex2_fu_372_p1(11 - 1 downto 0);
        else 
            output_3_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    output_3_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st23_fsm_22)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22))) then 
            output_3_ce0 <= ap_const_logic_1;
        else 
            output_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_3_d0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, tmp_6_reg_765, ap_sig_cseq_ST_st23_fsm_22)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
            output_3_d0 <= tmp_6_reg_765;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            output_3_d0 <= ap_const_lv1_0;
        else 
            output_3_d0 <= "X";
        end if; 
    end process;


    output_3_we0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond1_fu_344_p2, ap_sig_cseq_ST_st23_fsm_22, tmp_9_fu_362_p4, arrayNo2_fu_586_p1)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_344_p2 = ap_const_lv1_0) and not((tmp_9_fu_362_p4 = ap_const_lv3_0)) and not((tmp_9_fu_362_p4 = ap_const_lv3_1)) and not((tmp_9_fu_362_p4 = ap_const_lv3_2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) and not((ap_const_lv13_0 = arrayNo2_fu_586_p1)) and not((arrayNo2_fu_586_p1 = ap_const_lv13_1)) and not((arrayNo2_fu_586_p1 = ap_const_lv13_2))))) then 
            output_3_we0 <= ap_const_logic_1;
        else 
            output_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_511_p0 <= tmp_cast5_cast_reg_624(5 - 1 downto 0);
    tmp1_fu_511_p1 <= tmp1_fu_511_p10(9 - 1 downto 0);
    tmp1_fu_511_p10 <= std_logic_vector(resize(unsigned(tmp9_reg_719),13));
    tmp1_fu_511_p2 <= std_logic_vector(resize(unsigned(tmp1_fu_511_p0) * unsigned(tmp1_fu_511_p1), 13));
    tmp2_fu_490_p0 <= I_cast_reg_665(6 - 1 downto 0);
    tmp2_fu_490_p1 <= tmp2_fu_490_p10(8 - 1 downto 0);
    tmp2_fu_490_p10 <= std_logic_vector(resize(unsigned(tmp_fu_480_p2),12));
    tmp2_fu_490_p2 <= std_logic_vector(resize(unsigned(tmp2_fu_490_p0) * unsigned(tmp2_fu_490_p1), 12));
    tmp9_fu_499_p2 <= std_logic_vector(unsigned(tmp_4_reg_683) + unsigned(y_1_cast_fu_495_p1));
    tmp_10_fu_386_p2 <= "1" when (unsigned(next_urem_fu_380_p2) < unsigned(ap_const_lv13_510)) else "0";
    tmp_2_fu_422_p2 <= "1" when (signed(m_cast_fu_418_p1) < signed(tmp_8_reg_655)) else "0";
    tmp_3_fu_326_p1 <= I(5 - 1 downto 0);
    tmp_4_fu_433_p0 <= tmp_4_fu_433_p00(5 - 1 downto 0);
    tmp_4_fu_433_p00 <= std_logic_vector(resize(unsigned(m_reg_281),9));
    tmp_4_fu_433_p1 <= tmp_cast_cast_reg_629(5 - 1 downto 0);
    tmp_4_fu_433_p2 <= std_logic_vector(resize(unsigned(tmp_4_fu_433_p0) * unsigned(tmp_4_fu_433_p1), 9));
    tmp_5_fu_446_p2 <= "1" when (signed(x_cast_fu_442_p1) < signed(I)) else "0";
    tmp_6_cast_fu_457_p1 <= std_logic_vector(resize(unsigned(x_1_fu_451_p2),13));
    tmp_6_fu_572_p5 <= std_logic_vector(resize(unsigned(arrayNo_fu_565_p1),32));
    tmp_8_fu_400_p1 <= M(6 - 1 downto 0);
    tmp_9_fu_362_p4 <= phi_mul_reg_259(26 downto 24);
    tmp_cast5_cast_fu_336_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_330_p2),13));
    tmp_cast_cast_fu_340_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_330_p2),9));
    tmp_fu_480_p2 <= std_logic_vector(unsigned(phi_mul7_reg_292) + unsigned(y_cast1_fu_461_p1));
    tmp_s_fu_330_p2 <= std_logic_vector(unsigned(ap_const_lv5_2) + unsigned(tmp_3_fu_326_p1));
    x_1_fu_451_p2 <= std_logic_vector(unsigned(x_reg_304) + unsigned(ap_const_lv5_1));
    x_cast2_fu_438_p1 <= std_logic_vector(resize(unsigned(x_reg_304),12));
    x_cast_fu_442_p1 <= std_logic_vector(resize(unsigned(x_reg_304),6));
    y_1_cast_fu_495_p1 <= std_logic_vector(resize(unsigned(y_1_fu_474_p2),9));
    y_1_fu_474_p2 <= std_logic_vector(unsigned(y_reg_315) + unsigned(ap_const_lv5_1));
    y_cast1_fu_461_p1 <= std_logic_vector(resize(unsigned(y_reg_315),8));
    y_cast_fu_465_p1 <= std_logic_vector(resize(unsigned(y_reg_315),6));
end behav;
