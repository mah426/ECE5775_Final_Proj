// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dut_pad (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0_address0,
        input_0_ce0,
        input_0_q0,
        input_1_address0,
        input_1_ce0,
        input_1_q0,
        input_2_address0,
        input_2_ce0,
        input_2_q0,
        input_3_address0,
        input_3_ce0,
        input_3_q0,
        output_0_address0,
        output_0_ce0,
        output_0_we0,
        output_0_d0,
        output_1_address0,
        output_1_ce0,
        output_1_we0,
        output_1_d0,
        output_2_address0,
        output_2_ce0,
        output_2_we0,
        output_2_d0,
        output_3_address0,
        output_3_ce0,
        output_3_we0,
        output_3_d0,
        M,
        I
);

parameter    ap_ST_st1_fsm_0 = 23'b1;
parameter    ap_ST_st2_fsm_1 = 23'b10;
parameter    ap_ST_st3_fsm_2 = 23'b100;
parameter    ap_ST_st4_fsm_3 = 23'b1000;
parameter    ap_ST_st5_fsm_4 = 23'b10000;
parameter    ap_ST_st6_fsm_5 = 23'b100000;
parameter    ap_ST_st7_fsm_6 = 23'b1000000;
parameter    ap_ST_st8_fsm_7 = 23'b10000000;
parameter    ap_ST_st9_fsm_8 = 23'b100000000;
parameter    ap_ST_st10_fsm_9 = 23'b1000000000;
parameter    ap_ST_st11_fsm_10 = 23'b10000000000;
parameter    ap_ST_st12_fsm_11 = 23'b100000000000;
parameter    ap_ST_st13_fsm_12 = 23'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 23'b10000000000000;
parameter    ap_ST_st15_fsm_14 = 23'b100000000000000;
parameter    ap_ST_st16_fsm_15 = 23'b1000000000000000;
parameter    ap_ST_st17_fsm_16 = 23'b10000000000000000;
parameter    ap_ST_st18_fsm_17 = 23'b100000000000000000;
parameter    ap_ST_st19_fsm_18 = 23'b1000000000000000000;
parameter    ap_ST_st20_fsm_19 = 23'b10000000000000000000;
parameter    ap_ST_st21_fsm_20 = 23'b100000000000000000000;
parameter    ap_ST_st22_fsm_21 = 23'b1000000000000000000000;
parameter    ap_ST_st23_fsm_22 = 23'b10000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_14 = 32'b10100;
parameter    ap_const_lv32_15 = 32'b10101;
parameter    ap_const_lv13_0 = 13'b0000000000000;
parameter    ap_const_lv27_0 = 27'b000000000000000000000000000;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv32_16 = 32'b10110;
parameter    ap_const_lv3_2 = 3'b10;
parameter    ap_const_lv13_2 = 13'b10;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_const_lv13_1 = 13'b1;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv5_2 = 5'b10;
parameter    ap_const_lv13_1440 = 13'b1010001000000;
parameter    ap_const_lv27_3292 = 27'b11001010010010;
parameter    ap_const_lv32_18 = 32'b11000;
parameter    ap_const_lv32_1A = 32'b11010;
parameter    ap_const_lv13_510 = 13'b10100010000;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_19 = 32'b11001;
parameter    ap_const_lv12_510 = 12'b10100010000;
parameter    ap_const_lv32_1B = 32'b11011;
parameter    ap_const_lv28_3292 = 28'b11001010010010;
parameter    ap_const_lv26_1949 = 26'b1100101001001;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] input_0_address0;
output   input_0_ce0;
input  [0:0] input_0_q0;
output  [10:0] input_1_address0;
output   input_1_ce0;
input  [0:0] input_1_q0;
output  [10:0] input_2_address0;
output   input_2_ce0;
input  [0:0] input_2_q0;
output  [10:0] input_3_address0;
output   input_3_ce0;
input  [0:0] input_3_q0;
output  [10:0] output_0_address0;
output   output_0_ce0;
output   output_0_we0;
output  [0:0] output_0_d0;
output  [10:0] output_1_address0;
output   output_1_ce0;
output   output_1_we0;
output  [0:0] output_1_d0;
output  [10:0] output_2_address0;
output   output_2_ce0;
output   output_2_we0;
output  [0:0] output_2_d0;
output  [10:0] output_3_address0;
output   output_3_ce0;
output   output_3_we0;
output  [0:0] output_3_d0;
input  [6:0] M;
input  [5:0] I;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_0_ce0;
reg input_1_ce0;
reg input_2_ce0;
reg input_3_ce0;
reg[10:0] output_0_address0;
reg output_0_ce0;
reg output_0_we0;
reg[0:0] output_0_d0;
reg[10:0] output_1_address0;
reg output_1_ce0;
reg output_1_we0;
reg[0:0] output_1_d0;
reg[10:0] output_2_address0;
reg output_2_ce0;
reg output_2_we0;
reg[0:0] output_2_d0;
reg[10:0] output_3_address0;
reg output_3_ce0;
reg output_3_we0;
reg[0:0] output_3_d0;

(* fsm_encoding = "none" *) reg   [22:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_40;
wire   [12:0] tmp_cast5_cast_fu_336_p1;
reg   [12:0] tmp_cast5_cast_reg_624;
wire   [8:0] tmp_cast_cast_fu_340_p1;
reg   [8:0] tmp_cast_cast_reg_629;
wire   [12:0] i_1_fu_350_p2;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_117;
wire   [26:0] next_mul_fu_356_p2;
wire   [0:0] exitcond1_fu_344_p2;
wire   [12:0] idx_urem_fu_392_p3;
wire   [5:0] tmp_8_fu_400_p1;
reg   [5:0] tmp_8_reg_655;
wire   [7:0] I_cast6_fu_403_p1;
reg   [7:0] I_cast6_reg_660;
wire   [11:0] I_cast_fu_406_p1;
reg   [11:0] I_cast_reg_665;
wire   [7:0] next_mul8_fu_409_p2;
reg   [7:0] next_mul8_reg_670;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_142;
wire   [4:0] m_1_fu_427_p2;
reg   [4:0] m_1_reg_678;
wire   [8:0] tmp_4_fu_433_p2;
reg   [8:0] tmp_4_reg_683;
wire   [0:0] tmp_2_fu_422_p2;
wire   [11:0] x_cast2_fu_438_p1;
reg   [11:0] x_cast2_reg_688;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_159;
wire   [4:0] x_1_fu_451_p2;
reg   [4:0] x_1_reg_696;
wire   [12:0] tmp_6_cast_fu_457_p1;
reg   [12:0] tmp_6_cast_reg_701;
wire   [0:0] tmp_5_fu_446_p2;
wire   [4:0] y_1_fu_474_p2;
reg   [4:0] y_1_reg_709;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_176;
wire   [11:0] tmp2_fu_490_p2;
reg   [11:0] tmp2_reg_714;
wire   [0:0] exitcond_fu_469_p2;
wire   [8:0] tmp9_fu_499_p2;
reg   [8:0] tmp9_reg_719;
wire   [11:0] i_index_fu_504_p2;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_192;
wire   [12:0] o_index_fu_516_p2;
reg   [12:0] o_index_reg_729;
reg   [2:0] tmp_11_reg_735;
reg   [3:0] tmp_12_reg_740;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_205;
reg    ap_sig_cseq_ST_st21_fsm_20;
reg    ap_sig_214;
wire   [0:0] tmp_6_fu_572_p6;
reg   [0:0] tmp_6_reg_765;
reg    ap_sig_cseq_ST_st22_fsm_21;
reg    ap_sig_229;
reg   [12:0] i_reg_248;
reg   [26:0] phi_mul_reg_259;
reg   [12:0] phi_urem_reg_270;
reg   [4:0] m_reg_281;
reg   [7:0] phi_mul7_reg_292;
reg   [4:0] x_reg_304;
reg   [4:0] y_reg_315;
reg    ap_sig_cseq_ST_st23_fsm_22;
reg    ap_sig_257;
wire   [63:0] newIndex2_fu_372_p1;
wire   [63:0] newIndex7_fu_557_p1;
wire   [63:0] newIndex4_fu_589_p1;
wire   [2:0] tmp_9_fu_362_p4;
wire  signed [12:0] arrayNo2_fu_586_p1;
wire   [4:0] tmp_3_fu_326_p1;
wire   [4:0] tmp_s_fu_330_p2;
wire   [12:0] next_urem_fu_380_p2;
wire   [0:0] tmp_10_fu_386_p2;
wire   [5:0] m_cast_fu_418_p1;
wire   [4:0] tmp_4_fu_433_p0;
wire   [4:0] tmp_4_fu_433_p1;
wire   [5:0] x_cast_fu_442_p1;
wire   [5:0] y_cast_fu_465_p1;
wire   [7:0] y_cast1_fu_461_p1;
wire   [7:0] tmp_fu_480_p2;
wire   [5:0] tmp2_fu_490_p0;
wire   [7:0] tmp2_fu_490_p1;
wire   [8:0] y_1_cast_fu_495_p1;
wire   [4:0] tmp1_fu_511_p0;
wire   [8:0] tmp1_fu_511_p1;
wire   [12:0] tmp1_fu_511_p2;
wire   [25:0] mul5_fu_604_p2;
wire   [27:0] mul2_fu_597_p2;
wire   [11:0] grp_fu_552_p1;
wire   [11:0] grp_fu_534_p2;
wire  signed [11:0] arrayNo_fu_565_p1;
wire   [31:0] tmp_6_fu_572_p5;
wire   [12:0] grp_fu_552_p2;
wire   [12:0] mul2_fu_597_p0;
wire   [14:0] mul2_fu_597_p1;
wire   [11:0] mul5_fu_604_p0;
wire   [13:0] mul5_fu_604_p1;
reg    grp_fu_534_ap_start;
wire    grp_fu_534_ap_done;
reg    grp_fu_552_ap_start;
wire    grp_fu_552_ap_done;
reg   [22:0] ap_NS_fsm;
wire   [27:0] mul2_fu_597_p00;
wire   [25:0] mul5_fu_604_p00;
wire   [12:0] tmp1_fu_511_p10;
wire   [11:0] tmp2_fu_490_p10;
wire   [8:0] tmp_4_fu_433_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 23'b1;
end

dut_urem_12ns_12ns_12_16_seq #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
dut_urem_12ns_12ns_12_16_seq_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_534_ap_start),
    .done(grp_fu_534_ap_done),
    .din0(i_index_fu_504_p2),
    .din1(ap_const_lv12_510),
    .ce(1'b1),
    .dout(grp_fu_534_p2)
);

dut_urem_13ns_12ns_13_17_seq #(
    .ID( 1 ),
    .NUM_STAGE( 17 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 13 ))
dut_urem_13ns_12ns_13_17_seq_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_552_ap_start),
    .done(grp_fu_552_ap_done),
    .din0(o_index_reg_729),
    .din1(grp_fu_552_p1),
    .ce(1'b1),
    .dout(grp_fu_552_p2)
);

dut_mux_4to1_sel32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
dut_mux_4to1_sel32_1_1_U3(
    .din1(input_0_q0),
    .din2(input_1_q0),
    .din3(input_2_q0),
    .din4(input_3_q0),
    .din5(tmp_6_fu_572_p5),
    .dout(tmp_6_fu_572_p6)
);

dut_mul_mul_13ns_15ns_28_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 28 ))
dut_mul_mul_13ns_15ns_28_1_U4(
    .din0(mul2_fu_597_p0),
    .din1(mul2_fu_597_p1),
    .dout(mul2_fu_597_p2)
);

dut_mul_mul_12ns_14ns_26_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 26 ))
dut_mul_mul_12ns_14ns_26_1_U5(
    .din0(mul5_fu_604_p0),
    .din1(mul5_fu_604_p1),
    .dout(mul5_fu_604_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_344_p2 == 1'b0))) begin
        i_reg_248 <= i_1_fu_350_p2;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        i_reg_248 <= ap_const_lv13_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond1_fu_344_p2 == 1'b0))) begin
        m_reg_281 <= ap_const_lv5_0;
    end else if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & (1'b0 == tmp_5_fu_446_p2))) begin
        m_reg_281 <= m_1_reg_678;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond1_fu_344_p2 == 1'b0))) begin
        phi_mul7_reg_292 <= ap_const_lv8_0;
    end else if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & (1'b0 == tmp_5_fu_446_p2))) begin
        phi_mul7_reg_292 <= next_mul8_reg_670;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_344_p2 == 1'b0))) begin
        phi_mul_reg_259 <= next_mul_fu_356_p2;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        phi_mul_reg_259 <= ap_const_lv27_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_344_p2 == 1'b0))) begin
        phi_urem_reg_270 <= idx_urem_fu_392_p3;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        phi_urem_reg_270 <= ap_const_lv13_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) & ~(1'b0 == exitcond_fu_469_p2))) begin
        x_reg_304 <= x_1_reg_696;
    end else if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & ~(1'b0 == tmp_2_fu_422_p2))) begin
        x_reg_304 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st23_fsm_22)) begin
        y_reg_315 <= y_1_reg_709;
    end else if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & ~(1'b0 == tmp_5_fu_446_p2))) begin
        y_reg_315 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond1_fu_344_p2 == 1'b0))) begin
        I_cast6_reg_660[5 : 0] <= I_cast6_fu_403_p1[5 : 0];
        I_cast_reg_665[5 : 0] <= I_cast_fu_406_p1[5 : 0];
        tmp_8_reg_655 <= tmp_8_fu_400_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        m_1_reg_678 <= m_1_fu_427_p2;
        next_mul8_reg_670 <= next_mul8_fu_409_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        o_index_reg_729 <= o_index_fu_516_p2;
        tmp_11_reg_735 <= {{mul5_fu_604_p2[ap_const_lv32_19 : ap_const_lv32_17]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) & (1'b0 == exitcond_fu_469_p2))) begin
        tmp2_reg_714 <= tmp2_fu_490_p2;
        tmp9_reg_719 <= tmp9_fu_499_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        tmp_12_reg_740 <= {{mul2_fu_597_p2[ap_const_lv32_1B : ap_const_lv32_18]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & ~(1'b0 == tmp_2_fu_422_p2))) begin
        tmp_4_reg_683 <= tmp_4_fu_433_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & ~(1'b0 == tmp_5_fu_446_p2))) begin
        tmp_6_cast_reg_701[4 : 0] <= tmp_6_cast_fu_457_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st22_fsm_21)) begin
        tmp_6_reg_765 <= tmp_6_fu_572_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        tmp_cast5_cast_reg_624[4 : 0] <= tmp_cast5_cast_fu_336_p1[4 : 0];
        tmp_cast_cast_reg_629[4 : 0] <= tmp_cast_cast_fu_340_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        x_1_reg_696 <= x_1_fu_451_p2;
        x_cast2_reg_688[4 : 0] <= x_cast2_fu_438_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        y_1_reg_709 <= y_1_fu_474_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0)) | ((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & (1'b0 == tmp_2_fu_422_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & (1'b0 == tmp_2_fu_422_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_40) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_214) begin
        ap_sig_cseq_ST_st21_fsm_20 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st21_fsm_20 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_229) begin
        ap_sig_cseq_ST_st22_fsm_21 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st22_fsm_21 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_257) begin
        ap_sig_cseq_ST_st23_fsm_22 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st23_fsm_22 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_117) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_142) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_159) begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_176) begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_192) begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_205) begin
        ap_sig_cseq_ST_st7_fsm_6 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        grp_fu_534_ap_start = 1'b1;
    end else begin
        grp_fu_534_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        grp_fu_552_ap_start = 1'b1;
    end else begin
        grp_fu_552_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st21_fsm_20)) begin
        input_0_ce0 = 1'b1;
    end else begin
        input_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st21_fsm_20)) begin
        input_1_ce0 = 1'b1;
    end else begin
        input_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st21_fsm_20)) begin
        input_2_ce0 = 1'b1;
    end else begin
        input_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st21_fsm_20)) begin
        input_3_ce0 = 1'b1;
    end else begin
        input_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st23_fsm_22)) begin
        output_0_address0 = newIndex4_fu_589_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_0_address0 = newIndex2_fu_372_p1;
    end else begin
        output_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st23_fsm_22))) begin
        output_0_ce0 = 1'b1;
    end else begin
        output_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st23_fsm_22)) begin
        output_0_d0 = tmp_6_reg_765;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_0_d0 = 1'b0;
    end else begin
        output_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_344_p2 == 1'b0) & (tmp_9_fu_362_p4 == ap_const_lv3_0)) | ((1'b1 == ap_sig_cseq_ST_st23_fsm_22) & (ap_const_lv13_0 == arrayNo2_fu_586_p1)))) begin
        output_0_we0 = 1'b1;
    end else begin
        output_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st23_fsm_22)) begin
        output_1_address0 = newIndex4_fu_589_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_1_address0 = newIndex2_fu_372_p1;
    end else begin
        output_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st23_fsm_22))) begin
        output_1_ce0 = 1'b1;
    end else begin
        output_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st23_fsm_22)) begin
        output_1_d0 = tmp_6_reg_765;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_1_d0 = 1'b0;
    end else begin
        output_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_344_p2 == 1'b0) & (tmp_9_fu_362_p4 == ap_const_lv3_1)) | ((1'b1 == ap_sig_cseq_ST_st23_fsm_22) & (arrayNo2_fu_586_p1 == ap_const_lv13_1)))) begin
        output_1_we0 = 1'b1;
    end else begin
        output_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st23_fsm_22)) begin
        output_2_address0 = newIndex4_fu_589_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_2_address0 = newIndex2_fu_372_p1;
    end else begin
        output_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st23_fsm_22))) begin
        output_2_ce0 = 1'b1;
    end else begin
        output_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st23_fsm_22)) begin
        output_2_d0 = tmp_6_reg_765;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_2_d0 = 1'b0;
    end else begin
        output_2_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_344_p2 == 1'b0) & (tmp_9_fu_362_p4 == ap_const_lv3_2)) | ((1'b1 == ap_sig_cseq_ST_st23_fsm_22) & (arrayNo2_fu_586_p1 == ap_const_lv13_2)))) begin
        output_2_we0 = 1'b1;
    end else begin
        output_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st23_fsm_22)) begin
        output_3_address0 = newIndex4_fu_589_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_3_address0 = newIndex2_fu_372_p1;
    end else begin
        output_3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st23_fsm_22))) begin
        output_3_ce0 = 1'b1;
    end else begin
        output_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st23_fsm_22)) begin
        output_3_d0 = tmp_6_reg_765;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_3_d0 = 1'b0;
    end else begin
        output_3_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_344_p2 == 1'b0) & ~(tmp_9_fu_362_p4 == ap_const_lv3_0) & ~(tmp_9_fu_362_p4 == ap_const_lv3_1) & ~(tmp_9_fu_362_p4 == ap_const_lv3_2)) | ((1'b1 == ap_sig_cseq_ST_st23_fsm_22) & ~(ap_const_lv13_0 == arrayNo2_fu_586_p1) & ~(arrayNo2_fu_586_p1 == ap_const_lv13_1) & ~(arrayNo2_fu_586_p1 == ap_const_lv13_2)))) begin
        output_3_we0 = 1'b1;
    end else begin
        output_3_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if (~(exitcond1_fu_344_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        ap_ST_st3_fsm_2 : begin
            if ((1'b0 == tmp_2_fu_422_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st4_fsm_3 : begin
            if ((1'b0 == tmp_5_fu_446_p2)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        end
        ap_ST_st5_fsm_4 : begin
            if (~(1'b0 == exitcond_fu_469_p2)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end
        end
        ap_ST_st6_fsm_5 : begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : begin
            ap_NS_fsm = ap_ST_st14_fsm_13;
        end
        ap_ST_st14_fsm_13 : begin
            ap_NS_fsm = ap_ST_st15_fsm_14;
        end
        ap_ST_st15_fsm_14 : begin
            ap_NS_fsm = ap_ST_st16_fsm_15;
        end
        ap_ST_st16_fsm_15 : begin
            ap_NS_fsm = ap_ST_st17_fsm_16;
        end
        ap_ST_st17_fsm_16 : begin
            ap_NS_fsm = ap_ST_st18_fsm_17;
        end
        ap_ST_st18_fsm_17 : begin
            ap_NS_fsm = ap_ST_st19_fsm_18;
        end
        ap_ST_st19_fsm_18 : begin
            ap_NS_fsm = ap_ST_st20_fsm_19;
        end
        ap_ST_st20_fsm_19 : begin
            ap_NS_fsm = ap_ST_st21_fsm_20;
        end
        ap_ST_st21_fsm_20 : begin
            ap_NS_fsm = ap_ST_st22_fsm_21;
        end
        ap_ST_st22_fsm_21 : begin
            ap_NS_fsm = ap_ST_st23_fsm_22;
        end
        ap_ST_st23_fsm_22 : begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign I_cast6_fu_403_p1 = I;

assign I_cast_fu_406_p1 = I;

always @ (*) begin
    ap_sig_117 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_142 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

always @ (*) begin
    ap_sig_159 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

always @ (*) begin
    ap_sig_176 = (1'b1 == ap_CS_fsm[ap_const_lv32_4]);
end

always @ (*) begin
    ap_sig_192 = (1'b1 == ap_CS_fsm[ap_const_lv32_5]);
end

always @ (*) begin
    ap_sig_205 = (1'b1 == ap_CS_fsm[ap_const_lv32_6]);
end

always @ (*) begin
    ap_sig_214 = (1'b1 == ap_CS_fsm[ap_const_lv32_14]);
end

always @ (*) begin
    ap_sig_229 = (1'b1 == ap_CS_fsm[ap_const_lv32_15]);
end

always @ (*) begin
    ap_sig_257 = (1'b1 == ap_CS_fsm[ap_const_lv32_16]);
end

always @ (*) begin
    ap_sig_40 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

assign arrayNo2_fu_586_p1 = $signed(tmp_12_reg_740);

assign arrayNo_fu_565_p1 = $signed(tmp_11_reg_735);

assign exitcond1_fu_344_p2 = ((i_reg_248 == ap_const_lv13_1440) ? 1'b1 : 1'b0);

assign exitcond_fu_469_p2 = ((y_cast_fu_465_p1 == I) ? 1'b1 : 1'b0);

assign grp_fu_552_p1 = ap_const_lv13_510;

assign i_1_fu_350_p2 = (i_reg_248 + ap_const_lv13_1);

assign i_index_fu_504_p2 = (x_cast2_reg_688 + tmp2_reg_714);

assign idx_urem_fu_392_p3 = ((tmp_10_fu_386_p2[0:0] === 1'b1) ? next_urem_fu_380_p2 : ap_const_lv13_0);

assign input_0_address0 = newIndex7_fu_557_p1;

assign input_1_address0 = newIndex7_fu_557_p1;

assign input_2_address0 = newIndex7_fu_557_p1;

assign input_3_address0 = newIndex7_fu_557_p1;

assign m_1_fu_427_p2 = (m_reg_281 + ap_const_lv5_1);

assign m_cast_fu_418_p1 = m_reg_281;

assign mul2_fu_597_p0 = mul2_fu_597_p00;

assign mul2_fu_597_p00 = o_index_reg_729;

assign mul2_fu_597_p1 = ap_const_lv28_3292;

assign mul5_fu_604_p0 = mul5_fu_604_p00;

assign mul5_fu_604_p00 = i_index_fu_504_p2;

assign mul5_fu_604_p1 = ap_const_lv26_1949;

assign newIndex2_fu_372_p1 = phi_urem_reg_270;

assign newIndex4_fu_589_p1 = grp_fu_552_p2;

assign newIndex7_fu_557_p1 = grp_fu_534_p2;

assign next_mul8_fu_409_p2 = (phi_mul7_reg_292 + I_cast6_reg_660);

assign next_mul_fu_356_p2 = (phi_mul_reg_259 + ap_const_lv27_3292);

assign next_urem_fu_380_p2 = (phi_urem_reg_270 + ap_const_lv13_1);

assign o_index_fu_516_p2 = (tmp1_fu_511_p2 + tmp_6_cast_reg_701);

assign tmp1_fu_511_p0 = tmp_cast5_cast_reg_624;

assign tmp1_fu_511_p1 = tmp1_fu_511_p10;

assign tmp1_fu_511_p10 = tmp9_reg_719;

assign tmp1_fu_511_p2 = (tmp1_fu_511_p0 * tmp1_fu_511_p1);

assign tmp2_fu_490_p0 = I_cast_reg_665;

assign tmp2_fu_490_p1 = tmp2_fu_490_p10;

assign tmp2_fu_490_p10 = tmp_fu_480_p2;

assign tmp2_fu_490_p2 = (tmp2_fu_490_p0 * tmp2_fu_490_p1);

assign tmp9_fu_499_p2 = (tmp_4_reg_683 + y_1_cast_fu_495_p1);

assign tmp_10_fu_386_p2 = ((next_urem_fu_380_p2 < ap_const_lv13_510) ? 1'b1 : 1'b0);

assign tmp_2_fu_422_p2 = (($signed(m_cast_fu_418_p1) < $signed(tmp_8_reg_655)) ? 1'b1 : 1'b0);

assign tmp_3_fu_326_p1 = I[4:0];

assign tmp_4_fu_433_p0 = tmp_4_fu_433_p00;

assign tmp_4_fu_433_p00 = m_reg_281;

assign tmp_4_fu_433_p1 = tmp_cast_cast_reg_629;

assign tmp_4_fu_433_p2 = (tmp_4_fu_433_p0 * tmp_4_fu_433_p1);

assign tmp_5_fu_446_p2 = (($signed(x_cast_fu_442_p1) < $signed(I)) ? 1'b1 : 1'b0);

assign tmp_6_cast_fu_457_p1 = x_1_fu_451_p2;

assign tmp_6_fu_572_p5 = $unsigned(arrayNo_fu_565_p1);

assign tmp_8_fu_400_p1 = M[5:0];

assign tmp_9_fu_362_p4 = {{phi_mul_reg_259[ap_const_lv32_1A : ap_const_lv32_18]}};

assign tmp_cast5_cast_fu_336_p1 = tmp_s_fu_330_p2;

assign tmp_cast_cast_fu_340_p1 = tmp_s_fu_330_p2;

assign tmp_fu_480_p2 = (phi_mul7_reg_292 + y_cast1_fu_461_p1);

assign tmp_s_fu_330_p2 = (ap_const_lv5_2 + tmp_3_fu_326_p1);

assign x_1_fu_451_p2 = (x_reg_304 + ap_const_lv5_1);

assign x_cast2_fu_438_p1 = x_reg_304;

assign x_cast_fu_442_p1 = x_reg_304;

assign y_1_cast_fu_495_p1 = y_1_fu_474_p2;

assign y_1_fu_474_p2 = (y_reg_315 + ap_const_lv5_1);

assign y_cast1_fu_461_p1 = y_reg_315;

assign y_cast_fu_465_p1 = y_reg_315;

always @ (posedge ap_clk) begin
    tmp_cast5_cast_reg_624[12:5] <= 8'b00000000;
    tmp_cast_cast_reg_629[8:5] <= 4'b0000;
    I_cast6_reg_660[7:6] <= 2'b00;
    I_cast_reg_665[11:6] <= 6'b000000;
    x_cast2_reg_688[11:5] <= 7'b0000000;
    tmp_6_cast_reg_701[12:5] <= 8'b00000000;
end

endmodule //dut_pad
