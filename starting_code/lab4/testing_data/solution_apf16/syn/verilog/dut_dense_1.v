// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dut_dense_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        input1_address0,
        input1_ce0,
        input1_q0,
        input2_address0,
        input2_ce0,
        input2_q0,
        input3_address0,
        input3_ce0,
        input3_q0,
        input4_address0,
        input4_ce0,
        input4_q0,
        input5_address0,
        input5_ce0,
        input5_q0,
        input6_address0,
        input6_ce0,
        input6_q0,
        input7_address0,
        input7_ce0,
        input7_q0,
        input8_address0,
        input8_ce0,
        input8_q0,
        input9_address0,
        input9_ce0,
        input9_q0,
        input10_address0,
        input10_ce0,
        input10_q0,
        input11_address0,
        input11_ce0,
        input11_q0,
        input12_address0,
        input12_ce0,
        input12_q0,
        input13_address0,
        input13_ce0,
        input13_q0,
        input14_address0,
        input14_ce0,
        input14_q0,
        input15_address0,
        input15_ce0,
        input15_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_st1_fsm_0 = 34'b1;
parameter    ap_ST_st2_fsm_1 = 34'b10;
parameter    ap_ST_st3_fsm_2 = 34'b100;
parameter    ap_ST_st4_fsm_3 = 34'b1000;
parameter    ap_ST_st5_fsm_4 = 34'b10000;
parameter    ap_ST_st6_fsm_5 = 34'b100000;
parameter    ap_ST_st7_fsm_6 = 34'b1000000;
parameter    ap_ST_st8_fsm_7 = 34'b10000000;
parameter    ap_ST_st9_fsm_8 = 34'b100000000;
parameter    ap_ST_st10_fsm_9 = 34'b1000000000;
parameter    ap_ST_st11_fsm_10 = 34'b10000000000;
parameter    ap_ST_st12_fsm_11 = 34'b100000000000;
parameter    ap_ST_st13_fsm_12 = 34'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 34'b10000000000000;
parameter    ap_ST_st15_fsm_14 = 34'b100000000000000;
parameter    ap_ST_st16_fsm_15 = 34'b1000000000000000;
parameter    ap_ST_st17_fsm_16 = 34'b10000000000000000;
parameter    ap_ST_st18_fsm_17 = 34'b100000000000000000;
parameter    ap_ST_st19_fsm_18 = 34'b1000000000000000000;
parameter    ap_ST_st20_fsm_19 = 34'b10000000000000000000;
parameter    ap_ST_st21_fsm_20 = 34'b100000000000000000000;
parameter    ap_ST_st22_fsm_21 = 34'b1000000000000000000000;
parameter    ap_ST_st23_fsm_22 = 34'b10000000000000000000000;
parameter    ap_ST_st24_fsm_23 = 34'b100000000000000000000000;
parameter    ap_ST_st25_fsm_24 = 34'b1000000000000000000000000;
parameter    ap_ST_st26_fsm_25 = 34'b10000000000000000000000000;
parameter    ap_ST_st27_fsm_26 = 34'b100000000000000000000000000;
parameter    ap_ST_st28_fsm_27 = 34'b1000000000000000000000000000;
parameter    ap_ST_st29_fsm_28 = 34'b10000000000000000000000000000;
parameter    ap_ST_st30_fsm_29 = 34'b100000000000000000000000000000;
parameter    ap_ST_st31_fsm_30 = 34'b1000000000000000000000000000000;
parameter    ap_ST_st32_fsm_31 = 34'b10000000000000000000000000000000;
parameter    ap_ST_st33_fsm_32 = 34'b100000000000000000000000000000000;
parameter    ap_ST_st34_fsm_33 = 34'b1000000000000000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv32_1A = 32'b11010;
parameter    ap_const_lv32_16 = 32'b10110;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_19 = 32'b11001;
parameter    ap_const_lv32_20 = 32'b100000;
parameter    ap_const_lv9_0 = 9'b000000000;
parameter    ap_const_lv32_21 = 32'b100001;
parameter    ap_const_lv10_0 = 10'b0000000000;
parameter    ap_const_lv20_0 = 20'b00000000000000000000;
parameter    ap_const_lv32_C4000000 = 32'b11000100000000000000000000000000;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_12 = 32'b10010;
parameter    ap_const_lv32_1B = 32'b11011;
parameter    ap_const_lv32_40000000 = 32'b1000000000000000000000000000000;
parameter    ap_const_lv32_3D800000 = 32'b111101100000000000000000000000;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv9_100 = 9'b100000000;
parameter    ap_const_lv9_1 = 9'b1;
parameter    ap_const_lv10_200 = 10'b1000000000;
parameter    ap_const_lv10_1 = 10'b1;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv20_653 = 20'b11001010011;
parameter    ap_const_lv32_13 = 32'b10011;
parameter    ap_const_lv10_144 = 10'b101000100;
parameter    ap_const_lv10_2BC = 10'b1010111100;
parameter    ap_const_lv32_1E = 32'b11110;
parameter    ap_const_lv8_FF = 8'b11111111;
parameter    ap_const_lv23_0 = 23'b00000000000000000000000;
parameter    ap_const_lv5_2 = 5'b10;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] input_r_address0;
output   input_r_ce0;
input  [0:0] input_r_q0;
output  [8:0] input1_address0;
output   input1_ce0;
input  [0:0] input1_q0;
output  [8:0] input2_address0;
output   input2_ce0;
input  [0:0] input2_q0;
output  [8:0] input3_address0;
output   input3_ce0;
input  [0:0] input3_q0;
output  [8:0] input4_address0;
output   input4_ce0;
input  [0:0] input4_q0;
output  [8:0] input5_address0;
output   input5_ce0;
input  [0:0] input5_q0;
output  [8:0] input6_address0;
output   input6_ce0;
input  [0:0] input6_q0;
output  [8:0] input7_address0;
output   input7_ce0;
input  [0:0] input7_q0;
output  [8:0] input8_address0;
output   input8_ce0;
input  [0:0] input8_q0;
output  [8:0] input9_address0;
output   input9_ce0;
input  [0:0] input9_q0;
output  [8:0] input10_address0;
output   input10_ce0;
input  [0:0] input10_q0;
output  [8:0] input11_address0;
output   input11_ce0;
input  [0:0] input11_q0;
output  [8:0] input12_address0;
output   input12_ce0;
input  [0:0] input12_q0;
output  [8:0] input13_address0;
output   input13_ce0;
input  [0:0] input13_q0;
output  [8:0] input14_address0;
output   input14_ce0;
input  [0:0] input14_q0;
output  [8:0] input15_address0;
output   input15_ce0;
input  [0:0] input15_q0;
output  [8:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [0:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg input1_ce0;
reg input2_ce0;
reg input3_ce0;
reg input4_ce0;
reg input5_ce0;
reg input6_ce0;
reg input7_ce0;
reg input8_ce0;
reg input9_ce0;
reg input10_ce0;
reg input11_ce0;
reg input12_ce0;
reg input13_ce0;
reg input14_ce0;
reg input15_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [33:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_51;
wire   [16:0] w_fc1_address0;
reg    w_fc1_ce0;
wire   [0:0] w_fc1_q0;
wire   [7:0] b_fc1_address0;
reg    b_fc1_ce0;
wire   [31:0] b_fc1_q0;
wire   [31:0] grp_fu_386_p2;
reg   [31:0] reg_401;
reg    ap_sig_cseq_ST_st18_fsm_17;
reg    ap_sig_180;
reg    ap_sig_cseq_ST_st27_fsm_26;
reg    ap_sig_187;
wire   [31:0] grp_fu_380_p2;
reg   [31:0] reg_406;
reg    ap_sig_cseq_ST_st23_fsm_22;
reg    ap_sig_197;
reg    ap_sig_cseq_ST_st32_fsm_31;
reg    ap_sig_204;
wire   [16:0] n_cast4_fu_412_p1;
reg   [16:0] n_cast4_reg_620;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_214;
wire   [8:0] n_1_fu_422_p2;
reg   [8:0] n_1_reg_628;
wire   [9:0] m_3_fu_434_p2;
reg   [9:0] m_3_reg_636;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_225;
wire   [19:0] next_mul_fu_457_p2;
reg   [19:0] next_mul_reg_641;
wire   [0:0] exitcond_fu_428_p2;
reg   [0:0] tmp_25_reg_646;
wire   [0:0] tmp_11_fu_563_p2;
reg   [0:0] tmp_11_reg_736;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_276;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_285;
wire   [31:0] grp_fu_393_p1;
reg   [31:0] tmp_13_reg_746;
reg    ap_sig_cseq_ST_st10_fsm_9;
reg    ap_sig_294;
reg    ap_sig_cseq_ST_st15_fsm_14;
reg    ap_sig_302;
wire   [63:0] tmp_3_fu_573_p1;
reg   [63:0] tmp_3_reg_756;
reg    ap_sig_cseq_ST_st26_fsm_25;
reg    ap_sig_311;
reg   [31:0] b_fc1_load_reg_766;
wire   [0:0] tmp_6_fu_614_p2;
reg   [0:0] tmp_6_reg_771;
reg    ap_sig_cseq_ST_st33_fsm_32;
reg    ap_sig_323;
reg   [8:0] n_reg_334;
reg    ap_sig_cseq_ST_st34_fsm_33;
reg    ap_sig_336;
reg   [31:0] one_out_reg_346;
wire   [0:0] exitcond1_fu_416_p2;
reg   [9:0] m_reg_358;
reg   [19:0] phi_mul_reg_369;
wire   [63:0] newIndex8_fu_491_p1;
wire   [63:0] tmp_10_fu_511_p1;
reg   [31:0] grp_fu_380_p0;
reg   [31:0] grp_fu_380_p1;
reg    ap_sig_cseq_ST_st11_fsm_10;
reg    ap_sig_361;
reg    ap_sig_cseq_ST_st19_fsm_18;
reg    ap_sig_368;
reg    ap_sig_cseq_ST_st28_fsm_27;
reg    ap_sig_375;
reg   [31:0] grp_fu_386_p0;
reg   [31:0] grp_fu_386_p1;
reg    ap_sig_cseq_ST_st24_fsm_23;
reg    ap_sig_387;
wire   [31:0] grp_fu_393_p0;
wire   [8:0] tmp_24_fu_440_p1;
wire   [16:0] tmp_9_fu_444_p3;
wire   [0:0] tmp_14_fu_471_p2;
wire   [9:0] tmp_15_fu_477_p2;
wire   [9:0] newIndex_fu_483_p3;
wire   [16:0] w_index_fu_452_p2;
wire   [31:0] tmp_16_fu_519_p17;
wire   [0:0] tmp_16_fu_519_p18;
wire   [0:0] tmp1_fu_557_p2;
wire   [31:0] biased_to_int_fu_578_p1;
wire   [7:0] tmp_fu_582_p4;
wire   [22:0] tmp_23_fu_592_p1;
wire   [0:0] notrhs_fu_602_p2;
wire   [0:0] notlhs_fu_596_p2;
wire   [0:0] tmp_4_fu_608_p2;
wire   [0:0] tmp_5_fu_396_p2;
reg   [33:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 34'b1;
end

dut_dense_1_w_fc1 #(
    .DataWidth( 1 ),
    .AddressRange( 131072 ),
    .AddressWidth( 17 ))
w_fc1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w_fc1_address0),
    .ce0(w_fc1_ce0),
    .q0(w_fc1_q0)
);

dut_dense_1_b_fc1 #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
b_fc1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(b_fc1_address0),
    .ce0(b_fc1_ce0),
    .q0(b_fc1_q0)
);

dut_fadd_32ns_32ns_32_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dut_fadd_32ns_32ns_32_5_full_dsp_U176(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_380_p0),
    .din1(grp_fu_380_p1),
    .ce(1'b1),
    .dout(grp_fu_380_p2)
);

dut_fmul_32ns_32ns_32_4_max_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dut_fmul_32ns_32ns_32_4_max_dsp_U177(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_386_p0),
    .din1(grp_fu_386_p1),
    .ce(1'b1),
    .dout(grp_fu_386_p2)
);

dut_sitofp_32ns_32_6 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dut_sitofp_32ns_32_6_U178(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_393_p0),
    .ce(1'b1),
    .dout(grp_fu_393_p1)
);

dut_fcmp_32ns_32ns_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
dut_fcmp_32ns_32ns_1_1_U179(
    .din0(reg_406),
    .din1(ap_const_lv32_0),
    .opcode(ap_const_lv5_2),
    .dout(tmp_5_fu_396_p2)
);

dut_mux_16to1_sel32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 1 ),
    .din6_WIDTH( 1 ),
    .din7_WIDTH( 1 ),
    .din8_WIDTH( 1 ),
    .din9_WIDTH( 1 ),
    .din10_WIDTH( 1 ),
    .din11_WIDTH( 1 ),
    .din12_WIDTH( 1 ),
    .din13_WIDTH( 1 ),
    .din14_WIDTH( 1 ),
    .din15_WIDTH( 1 ),
    .din16_WIDTH( 1 ),
    .din17_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
dut_mux_16to1_sel32_1_1_U180(
    .din1(input_r_q0),
    .din2(input1_q0),
    .din3(input2_q0),
    .din4(input3_q0),
    .din5(input4_q0),
    .din6(input5_q0),
    .din7(input6_q0),
    .din8(input7_q0),
    .din9(input8_q0),
    .din10(input9_q0),
    .din11(input10_q0),
    .din12(input11_q0),
    .din13(input12_q0),
    .din14(input13_q0),
    .din15(input14_q0),
    .din16(input15_q0),
    .din17(tmp_16_fu_519_p17),
    .dout(tmp_16_fu_519_p18)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st15_fsm_14)) begin
        m_reg_358 <= m_3_reg_636;
    end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (1'b0 == exitcond1_fu_416_p2))) begin
        m_reg_358 <= ap_const_lv10_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st34_fsm_33)) begin
        n_reg_334 <= n_1_reg_628;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        n_reg_334 <= ap_const_lv9_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st15_fsm_14)) begin
        one_out_reg_346 <= grp_fu_380_p2;
    end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (1'b0 == exitcond1_fu_416_p2))) begin
        one_out_reg_346 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st15_fsm_14)) begin
        phi_mul_reg_369 <= next_mul_reg_641;
    end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (1'b0 == exitcond1_fu_416_p2))) begin
        phi_mul_reg_369 <= ap_const_lv20_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st27_fsm_26)) begin
        b_fc1_load_reg_766 <= b_fc1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        m_3_reg_636 <= m_3_fu_434_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        n_1_reg_628 <= n_1_fu_422_p2;
        n_cast4_reg_620[8 : 0] <= n_cast4_fu_412_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & (exitcond_fu_428_p2 == 1'b0))) begin
        next_mul_reg_641 <= next_mul_fu_457_p2;
        tmp_25_reg_646 <= phi_mul_reg_369[ap_const_lv32_13];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st18_fsm_17) | (1'b1 == ap_sig_cseq_ST_st27_fsm_26))) begin
        reg_401 <= grp_fu_386_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st23_fsm_22) | (1'b1 == ap_sig_cseq_ST_st32_fsm_31))) begin
        reg_406 <= grp_fu_380_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        tmp_11_reg_736 <= tmp_11_fu_563_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        tmp_13_reg_746 <= grp_fu_393_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st26_fsm_25)) begin
        tmp_3_reg_756[8 : 0] <= tmp_3_fu_573_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st33_fsm_32)) begin
        tmp_6_reg_771 <= tmp_6_fu_614_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0)) | ((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(1'b0 == exitcond1_fu_416_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(1'b0 == exitcond1_fu_416_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_294) begin
        ap_sig_cseq_ST_st10_fsm_9 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_9 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_361) begin
        ap_sig_cseq_ST_st11_fsm_10 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st11_fsm_10 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_302) begin
        ap_sig_cseq_ST_st15_fsm_14 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st15_fsm_14 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_180) begin
        ap_sig_cseq_ST_st18_fsm_17 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st18_fsm_17 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_368) begin
        ap_sig_cseq_ST_st19_fsm_18 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st19_fsm_18 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_51) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_197) begin
        ap_sig_cseq_ST_st23_fsm_22 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st23_fsm_22 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_387) begin
        ap_sig_cseq_ST_st24_fsm_23 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st24_fsm_23 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_311) begin
        ap_sig_cseq_ST_st26_fsm_25 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st26_fsm_25 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_187) begin
        ap_sig_cseq_ST_st27_fsm_26 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st27_fsm_26 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_375) begin
        ap_sig_cseq_ST_st28_fsm_27 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st28_fsm_27 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_214) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_204) begin
        ap_sig_cseq_ST_st32_fsm_31 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st32_fsm_31 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_323) begin
        ap_sig_cseq_ST_st33_fsm_32 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st33_fsm_32 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_336) begin
        ap_sig_cseq_ST_st34_fsm_33 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st34_fsm_33 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_225) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_276) begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_285) begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st26_fsm_25)) begin
        b_fc1_ce0 = 1'b1;
    end else begin
        b_fc1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st19_fsm_18) | (1'b1 == ap_sig_cseq_ST_st28_fsm_27))) begin
        grp_fu_380_p0 = reg_401;
    end else if ((1'b1 == ap_sig_cseq_ST_st11_fsm_10)) begin
        grp_fu_380_p0 = one_out_reg_346;
    end else begin
        grp_fu_380_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st28_fsm_27)) begin
        grp_fu_380_p1 = b_fc1_load_reg_766;
    end else if ((1'b1 == ap_sig_cseq_ST_st19_fsm_18)) begin
        grp_fu_380_p1 = ap_const_lv32_C4000000;
    end else if ((1'b1 == ap_sig_cseq_ST_st11_fsm_10)) begin
        grp_fu_380_p1 = tmp_13_reg_746;
    end else begin
        grp_fu_380_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st24_fsm_23)) begin
        grp_fu_386_p0 = reg_406;
    end else if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        grp_fu_386_p0 = one_out_reg_346;
    end else begin
        grp_fu_386_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st24_fsm_23)) begin
        grp_fu_386_p1 = ap_const_lv32_3D800000;
    end else if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        grp_fu_386_p1 = ap_const_lv32_40000000;
    end else begin
        grp_fu_386_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        input10_ce0 = 1'b1;
    end else begin
        input10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        input11_ce0 = 1'b1;
    end else begin
        input11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        input12_ce0 = 1'b1;
    end else begin
        input12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        input13_ce0 = 1'b1;
    end else begin
        input13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        input14_ce0 = 1'b1;
    end else begin
        input14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        input15_ce0 = 1'b1;
    end else begin
        input15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        input1_ce0 = 1'b1;
    end else begin
        input1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        input2_ce0 = 1'b1;
    end else begin
        input2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        input3_ce0 = 1'b1;
    end else begin
        input3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        input4_ce0 = 1'b1;
    end else begin
        input4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        input5_ce0 = 1'b1;
    end else begin
        input5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        input6_ce0 = 1'b1;
    end else begin
        input6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        input7_ce0 = 1'b1;
    end else begin
        input7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        input8_ce0 = 1'b1;
    end else begin
        input8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        input9_ce0 = 1'b1;
    end else begin
        input9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st34_fsm_33)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st34_fsm_33)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        w_fc1_ce0 = 1'b1;
    end else begin
        w_fc1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if (~(1'b0 == exitcond1_fu_416_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : begin
            if (~(exitcond_fu_428_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_st16_fsm_15;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st4_fsm_3 : begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : begin
            ap_NS_fsm = ap_ST_st14_fsm_13;
        end
        ap_ST_st14_fsm_13 : begin
            ap_NS_fsm = ap_ST_st15_fsm_14;
        end
        ap_ST_st15_fsm_14 : begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st16_fsm_15 : begin
            ap_NS_fsm = ap_ST_st17_fsm_16;
        end
        ap_ST_st17_fsm_16 : begin
            ap_NS_fsm = ap_ST_st18_fsm_17;
        end
        ap_ST_st18_fsm_17 : begin
            ap_NS_fsm = ap_ST_st19_fsm_18;
        end
        ap_ST_st19_fsm_18 : begin
            ap_NS_fsm = ap_ST_st20_fsm_19;
        end
        ap_ST_st20_fsm_19 : begin
            ap_NS_fsm = ap_ST_st21_fsm_20;
        end
        ap_ST_st21_fsm_20 : begin
            ap_NS_fsm = ap_ST_st22_fsm_21;
        end
        ap_ST_st22_fsm_21 : begin
            ap_NS_fsm = ap_ST_st23_fsm_22;
        end
        ap_ST_st23_fsm_22 : begin
            ap_NS_fsm = ap_ST_st24_fsm_23;
        end
        ap_ST_st24_fsm_23 : begin
            ap_NS_fsm = ap_ST_st25_fsm_24;
        end
        ap_ST_st25_fsm_24 : begin
            ap_NS_fsm = ap_ST_st26_fsm_25;
        end
        ap_ST_st26_fsm_25 : begin
            ap_NS_fsm = ap_ST_st27_fsm_26;
        end
        ap_ST_st27_fsm_26 : begin
            ap_NS_fsm = ap_ST_st28_fsm_27;
        end
        ap_ST_st28_fsm_27 : begin
            ap_NS_fsm = ap_ST_st29_fsm_28;
        end
        ap_ST_st29_fsm_28 : begin
            ap_NS_fsm = ap_ST_st30_fsm_29;
        end
        ap_ST_st30_fsm_29 : begin
            ap_NS_fsm = ap_ST_st31_fsm_30;
        end
        ap_ST_st31_fsm_30 : begin
            ap_NS_fsm = ap_ST_st32_fsm_31;
        end
        ap_ST_st32_fsm_31 : begin
            ap_NS_fsm = ap_ST_st33_fsm_32;
        end
        ap_ST_st33_fsm_32 : begin
            ap_NS_fsm = ap_ST_st34_fsm_33;
        end
        ap_ST_st34_fsm_33 : begin
            ap_NS_fsm = ap_ST_st2_fsm_1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    ap_sig_180 = (1'b1 == ap_CS_fsm[ap_const_lv32_11]);
end

always @ (*) begin
    ap_sig_187 = (1'b1 == ap_CS_fsm[ap_const_lv32_1A]);
end

always @ (*) begin
    ap_sig_197 = (1'b1 == ap_CS_fsm[ap_const_lv32_16]);
end

always @ (*) begin
    ap_sig_204 = (1'b1 == ap_CS_fsm[ap_const_lv32_1F]);
end

always @ (*) begin
    ap_sig_214 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_225 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

always @ (*) begin
    ap_sig_276 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

always @ (*) begin
    ap_sig_285 = (1'b1 == ap_CS_fsm[ap_const_lv32_4]);
end

always @ (*) begin
    ap_sig_294 = (1'b1 == ap_CS_fsm[ap_const_lv32_9]);
end

always @ (*) begin
    ap_sig_302 = (1'b1 == ap_CS_fsm[ap_const_lv32_E]);
end

always @ (*) begin
    ap_sig_311 = (1'b1 == ap_CS_fsm[ap_const_lv32_19]);
end

always @ (*) begin
    ap_sig_323 = (1'b1 == ap_CS_fsm[ap_const_lv32_20]);
end

always @ (*) begin
    ap_sig_336 = (1'b1 == ap_CS_fsm[ap_const_lv32_21]);
end

always @ (*) begin
    ap_sig_361 = (1'b1 == ap_CS_fsm[ap_const_lv32_A]);
end

always @ (*) begin
    ap_sig_368 = (1'b1 == ap_CS_fsm[ap_const_lv32_12]);
end

always @ (*) begin
    ap_sig_375 = (1'b1 == ap_CS_fsm[ap_const_lv32_1B]);
end

always @ (*) begin
    ap_sig_387 = (1'b1 == ap_CS_fsm[ap_const_lv32_17]);
end

always @ (*) begin
    ap_sig_51 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

assign b_fc1_address0 = tmp_3_fu_573_p1;

assign biased_to_int_fu_578_p1 = reg_406;

assign exitcond1_fu_416_p2 = ((n_reg_334 == ap_const_lv9_100) ? 1'b1 : 1'b0);

assign exitcond_fu_428_p2 = ((m_reg_358 == ap_const_lv10_200) ? 1'b1 : 1'b0);

assign grp_fu_393_p0 = tmp_11_reg_736;

assign input10_address0 = newIndex8_fu_491_p1;

assign input11_address0 = newIndex8_fu_491_p1;

assign input12_address0 = newIndex8_fu_491_p1;

assign input13_address0 = newIndex8_fu_491_p1;

assign input14_address0 = newIndex8_fu_491_p1;

assign input15_address0 = newIndex8_fu_491_p1;

assign input1_address0 = newIndex8_fu_491_p1;

assign input2_address0 = newIndex8_fu_491_p1;

assign input3_address0 = newIndex8_fu_491_p1;

assign input4_address0 = newIndex8_fu_491_p1;

assign input5_address0 = newIndex8_fu_491_p1;

assign input6_address0 = newIndex8_fu_491_p1;

assign input7_address0 = newIndex8_fu_491_p1;

assign input8_address0 = newIndex8_fu_491_p1;

assign input9_address0 = newIndex8_fu_491_p1;

assign input_r_address0 = newIndex8_fu_491_p1;

assign m_3_fu_434_p2 = (m_reg_358 + ap_const_lv10_1);

assign n_1_fu_422_p2 = (n_reg_334 + ap_const_lv9_1);

assign n_cast4_fu_412_p1 = n_reg_334;

assign newIndex8_fu_491_p1 = newIndex_fu_483_p3;

assign newIndex_fu_483_p3 = ((tmp_14_fu_471_p2[0:0] === 1'b1) ? m_reg_358 : tmp_15_fu_477_p2);

assign next_mul_fu_457_p2 = (ap_const_lv20_653 + phi_mul_reg_369);

assign notlhs_fu_596_p2 = ((tmp_fu_582_p4 != ap_const_lv8_FF) ? 1'b1 : 1'b0);

assign notrhs_fu_602_p2 = ((tmp_23_fu_592_p1 == ap_const_lv23_0) ? 1'b1 : 1'b0);

assign output_r_address0 = tmp_3_reg_756;

assign output_r_d0 = tmp_6_reg_771;

assign tmp1_fu_557_p2 = (tmp_16_fu_519_p18 ^ 1'b1);

assign tmp_10_fu_511_p1 = w_index_fu_452_p2;

assign tmp_11_fu_563_p2 = (w_fc1_q0 ^ tmp1_fu_557_p2);

assign tmp_14_fu_471_p2 = ((m_reg_358 < ap_const_lv10_144) ? 1'b1 : 1'b0);

assign tmp_15_fu_477_p2 = ($signed(ap_const_lv10_2BC) + $signed(m_reg_358));

assign tmp_16_fu_519_p17 = tmp_25_reg_646;

assign tmp_23_fu_592_p1 = biased_to_int_fu_578_p1[22:0];

assign tmp_24_fu_440_p1 = m_reg_358[8:0];

assign tmp_3_fu_573_p1 = n_reg_334;

assign tmp_4_fu_608_p2 = (notrhs_fu_602_p2 | notlhs_fu_596_p2);

assign tmp_6_fu_614_p2 = (tmp_4_fu_608_p2 & tmp_5_fu_396_p2);

assign tmp_9_fu_444_p3 = {{tmp_24_fu_440_p1}, {ap_const_lv8_0}};

assign tmp_fu_582_p4 = {{biased_to_int_fu_578_p1[ap_const_lv32_1E : ap_const_lv32_17]}};

assign w_fc1_address0 = tmp_10_fu_511_p1;

assign w_index_fu_452_p2 = (tmp_9_fu_444_p3 + n_cast4_reg_620);

always @ (posedge ap_clk) begin
    n_cast4_reg_620[16:9] <= 8'b00000000;
    tmp_3_reg_756[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
end

endmodule //dut_dense_1
