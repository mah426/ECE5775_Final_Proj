-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity dut_mlp_xcel_fc1_bias_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of dut_mlp_xcel_fc1_bias_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001101110111010110010000", 
    1 => "10111011000110000100100010011110", 
    2 => "10111010111100111110001010011001", 
    3 => "00111100111111101001111111100010", 
    4 => "10111100001011010011100000011000", 
    5 => "00111101100011100001011110111001", 
    6 => "00111100001010011111100011100000", 
    7 => "00111110000001000100000000110010", 
    8 => "10111101010100111010011101100000", 
    9 => "10111100100110001011000000110110", 
    10 => "00111100001111110101011010010110", 
    11 => "10111100001111101000001101100010", 
    12 => "00111101000001001011100001111101", 
    13 => "10111101011000111111101010101100", 
    14 => "00111101001111010110101111111000", 
    15 => "10111101000001011101111111100011", 
    16 => "10111101011000101110100100010110", 
    17 => "10111100100101011010100101010100", 
    18 => "00111011010110111010010110100000", 
    19 => "00111101011110111100011010111010", 
    20 => "00111100100101011101011000100100", 
    21 => "00111100101110101101101000111010", 
    22 => "10111100001111101100110010001100", 
    23 => "00111110000000011011000101110010", 
    24 => "00111100111010110101101000101101", 
    25 => "00111101100000000000010110110000", 
    26 => "00111100011101000000010111100100", 
    27 => "00111101110110011011000111011011", 
    28 => "10111101010111110100011110001110", 
    29 => "10111101100000000110101011000101", 
    30 => "00111110000111011101011110010101", 
    31 => "10111100010000010001100110001100", 
    32 => "10111011110011111100110101000011", 
    33 => "10111100110001010001010001000100", 
    34 => "10111100110000001101101100000111", 
    35 => "00111101110110000001100111100000", 
    36 => "10111100101110101100101010100001", 
    37 => "10111100101000101001001101000001", 
    38 => "00111101011011110011110001111100", 
    39 => "00111010100001000010010000011001", 
    40 => "00111100101101100100110100001101", 
    41 => "10111100101100001001100111101111", 
    42 => "00111011110011110011000110101001", 
    43 => "00111100101101010100001111101100", 
    44 => "10111100001010101110000001111111", 
    45 => "10111011101100000000001110100111", 
    46 => "10111101001100010011001101001101", 
    47 => "00111101001111010111110111000000", 
    48 => "10111100100000001101001110010011", 
    49 => "00111100001011100011010101001110", 
    50 => "10111010000111000110101000100001", 
    51 => "00111100101111011000010110101000", 
    52 => "00111101100001001010110101001101", 
    53 => "00111101010011011000110110110011", 
    54 => "00111100100001100000100110000000", 
    55 => "00111101011011011100110000001110", 
    56 => "00111100111011011000011101001001", 
    57 => "00111101101000011001111010101011", 
    58 => "10111100111111010110111101010110", 
    59 => "00111101101100110000101101011001", 
    60 => "10111100111000111110010001010101", 
    61 => "00111100100100111110001001100010", 
    62 => "00111100000000111010010110110011", 
    63 => "00111100110111100011000111011011", 
    64 => "00111101001011010000011111011111", 
    65 => "00111100010100011001011010111011", 
    66 => "10111100110010101001101110100000", 
    67 => "10111100001011111110010001010110", 
    68 => "00111100100001011010101100011010", 
    69 => "00111101000000011110010010101011", 
    70 => "10111101010111111011010010011011", 
    71 => "00111011111110010101111001100010", 
    72 => "10111100000010110001111000010010", 
    73 => "10111101100010001011000101110011", 
    74 => "10111101000100110011010111001110", 
    75 => "00111101010111010111110101010100", 
    76 => "10111011111101101100110000010001", 
    77 => "10111101000100000010011000011110", 
    78 => "00111101001110101001001111001010", 
    79 => "10111011010011010110001110111001", 
    80 => "10111100101001001111000111001101", 
    81 => "00111101001110010010110110000101", 
    82 => "00111011011001110101011000111010", 
    83 => "00111100011000000100001010101010", 
    84 => "10111101000100100110010100101101", 
    85 => "10111100010111100011010111100001", 
    86 => "10111101000101011100100000110000", 
    87 => "10111101000110011110001110111110", 
    88 => "10111100100010010000001011010000", 
    89 => "00111100110001010001000000100000", 
    90 => "00111011111101111111001010100000", 
    91 => "10111100111111010100101110110011", 
    92 => "00111101001011001001010111100110", 
    93 => "00111011000100101111101001001010", 
    94 => "10111101101110011010011100001000", 
    95 => "00111101110010010110110010001110", 
    96 => "00111101011110010010110100011000", 
    97 => "00111101100001111000111101111010", 
    98 => "10111100101101010000000101011000", 
    99 => "00111101011000010111100000010001", 
    100 => "10111101010100011011110100110011", 
    101 => "00111101101100000100111100001111", 
    102 => "10111101001001000000101000100111", 
    103 => "10111100000100001101011110100000", 
    104 => "00111100100010101101001010000000", 
    105 => "00111101001111101000001101001010", 
    106 => "10111100101010101111100010010111", 
    107 => "00111100100001111111101001110011", 
    108 => "10111011011100011101001001111101", 
    109 => "00111100110100010000110001010100", 
    110 => "00111100110111111110111000001100", 
    111 => "10111101011010110000001101100101", 
    112 => "00111101001100111100011010110000", 
    113 => "10111100111100101111111000101111", 
    114 => "10111100100011110110001110011100", 
    115 => "10111101000111011011000000011001", 
    116 => "10111011101001110101010001111111", 
    117 => "00111100100101100101111001101000", 
    118 => "00111100010100100011101001001001", 
    119 => "10111100011010111011000010100111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity dut_mlp_xcel_fc1_bias is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of dut_mlp_xcel_fc1_bias is
    component dut_mlp_xcel_fc1_bias_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    dut_mlp_xcel_fc1_bias_rom_U :  component dut_mlp_xcel_fc1_bias_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


