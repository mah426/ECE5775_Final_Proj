// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __dut_dense_mlp_1_fc2_bias_H__
#define __dut_dense_mlp_1_fc2_bias_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct dut_dense_mlp_1_fc2_bias_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(dut_dense_mlp_1_fc2_bias_ram) {
        ram[0] = "0b00111100101001011011110110101110";
        ram[1] = "0b10111101110100000010101110111011";
        ram[2] = "0b10111100010100001010110011001111";
        ram[3] = "0b00111001100000110111011101000111";
        ram[4] = "0b10111101011000011001001101000001";
        ram[5] = "0b10111100001100000001010001101010";
        ram[6] = "0b00111101110010000001010010000110";
        ram[7] = "0b10111101011000000111100100101001";
        ram[8] = "0b00111101011101110101011111001100";
        ram[9] = "0b00111101010111110011010110010111";
        ram[10] = "0b10111101101010110111101001100011";
        ram[11] = "0b10111101000001001011001101011011";
        ram[12] = "0b00111101101111000100101001110110";
        ram[13] = "0b00111101101010101010010001001010";
        ram[14] = "0b00111110010001011010010000111011";
        ram[15] = "0b10111101101000010001001010100101";
        ram[16] = "0b10111011101011100111000111011100";
        ram[17] = "0b00111110001100110010010001111101";
        ram[18] = "0b00111101101111011011011011011111";
        ram[19] = "0b10111101001101001010111000011100";
        ram[20] = "0b10111101100110010111111010000110";
        ram[21] = "0b00111101100001010000111110000010";
        ram[22] = "0b00111101000110101110100010111111";
        ram[23] = "0b10111101100001001000111010100000";
        ram[24] = "0b00111110000110000001010110011110";
        ram[25] = "0b00111101000101001000001000111010";
        ram[26] = "0b00111100101110100011101110000111";
        ram[27] = "0b00111101011100001011000110110001";
        ram[28] = "0b10111101000111001000100100110100";
        ram[29] = "0b10111101010100001011100100011111";
        ram[30] = "0b00111110000011000010100101011001";
        ram[31] = "0b00111101111110111100000010100000";
        ram[32] = "0b00111110001011011110101101010110";
        ram[33] = "0b00111110010000110111110010011000";
        ram[34] = "0b00111100001110101110000110011111";
        ram[35] = "0b10111101010001001101110100010000";
        ram[36] = "0b10111101101010010111011110110100";
        ram[37] = "0b00111101111111100111000101101000";
        ram[38] = "0b10111101110111000110110101001110";
        ram[39] = "0b00111101111000110110110111000010";
        ram[40] = "0b00111101011101110111110111000001";
        ram[41] = "0b00111101110110000000001100001101";
        ram[42] = "0b10111101100101101010001001001010";
        ram[43] = "0b00111101000111001111000100011000";
        ram[44] = "0b10111010000010000100111011010000";
        ram[45] = "0b00111101100111000000111110101111";
        ram[46] = "0b00111101011000000110111011001111";
        ram[47] = "0b00111101110111011011100101110111";
        ram[48] = "0b00111100101101111001001110011000";
        ram[49] = "0b10111100000111001110010101110010";
        ram[50] = "0b00111101110010010111010111010000";
        ram[51] = "0b10111101110001111000010101101011";
        ram[52] = "0b00111101001010001001111110010110";
        ram[53] = "0b00111101110100101011011100110000";
        ram[54] = "0b00111110001010101111101011010111";
        ram[55] = "0b00111101100000000101011110111110";
        ram[56] = "0b00111110000100000100101010001101";
        ram[57] = "0b10111101001100100001001001101111";
        ram[58] = "0b10111100111001111001110111011100";
        ram[59] = "0b00111101011101011100010110000000";
        ram[60] = "0b10111101111000110001110000111101";
        ram[61] = "0b00111101000110111110001110100101";
        ram[62] = "0b00111101011111011011101000010010";
        ram[63] = "0b00111100101000110111010101100001";
        ram[64] = "0b10111101000100111111010010001100";
        ram[65] = "0b10111101101101101011110110110111";
        ram[66] = "0b00111101101000001010011101010001";
        ram[67] = "0b00111101000000110001010001000100";
        ram[68] = "0b00111101111111100000000110011000";
        ram[69] = "0b00111101110001101010111100101101";
        ram[70] = "0b00111100110101010001100010010011";
        ram[71] = "0b00111100001011111101100110000110";
        ram[72] = "0b00111101011010100010000001110001";
        ram[73] = "0b00111101101001110111100000001100";
        ram[74] = "0b10111100001100000011110010010111";
        ram[75] = "0b10111101101001001010001111000101";
        ram[76] = "0b10111100010001111000110011101000";
        ram[77] = "0b10111101000000010101110100010100";
        ram[78] = "0b10111101010110000111101001010000";
        ram[79] = "0b10111100111010100110100110010110";
        ram[80] = "0b00111110010100101011110001111010";
        ram[81] = "0b00111100100111011011110001011010";
        ram[82] = "0b10111101010100000010001111010110";
        ram[83] = "0b10111100110100011101110111001101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(dut_dense_mlp_1_fc2_bias) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


dut_dense_mlp_1_fc2_bias_ram* meminst;


SC_CTOR(dut_dense_mlp_1_fc2_bias) {
meminst = new dut_dense_mlp_1_fc2_bias_ram("dut_dense_mlp_1_fc2_bias_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~dut_dense_mlp_1_fc2_bias() {
    delete meminst;
}


};//endmodule
#endif
