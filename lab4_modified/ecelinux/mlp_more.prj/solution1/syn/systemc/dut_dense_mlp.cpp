// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "dut_dense_mlp.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic dut_dense_mlp::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic dut_dense_mlp::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<17> dut_dense_mlp::ap_ST_st1_fsm_0 = "1";
const sc_lv<17> dut_dense_mlp::ap_ST_st2_fsm_1 = "10";
const sc_lv<17> dut_dense_mlp::ap_ST_st3_fsm_2 = "100";
const sc_lv<17> dut_dense_mlp::ap_ST_st4_fsm_3 = "1000";
const sc_lv<17> dut_dense_mlp::ap_ST_st5_fsm_4 = "10000";
const sc_lv<17> dut_dense_mlp::ap_ST_st6_fsm_5 = "100000";
const sc_lv<17> dut_dense_mlp::ap_ST_st7_fsm_6 = "1000000";
const sc_lv<17> dut_dense_mlp::ap_ST_st8_fsm_7 = "10000000";
const sc_lv<17> dut_dense_mlp::ap_ST_st9_fsm_8 = "100000000";
const sc_lv<17> dut_dense_mlp::ap_ST_st10_fsm_9 = "1000000000";
const sc_lv<17> dut_dense_mlp::ap_ST_st11_fsm_10 = "10000000000";
const sc_lv<17> dut_dense_mlp::ap_ST_st12_fsm_11 = "100000000000";
const sc_lv<17> dut_dense_mlp::ap_ST_st13_fsm_12 = "1000000000000";
const sc_lv<17> dut_dense_mlp::ap_ST_st14_fsm_13 = "10000000000000";
const sc_lv<17> dut_dense_mlp::ap_ST_st15_fsm_14 = "100000000000000";
const sc_lv<17> dut_dense_mlp::ap_ST_st16_fsm_15 = "1000000000000000";
const sc_lv<17> dut_dense_mlp::ap_ST_st17_fsm_16 = "10000000000000000";
const sc_lv<32> dut_dense_mlp::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> dut_dense_mlp::ap_const_lv1_1 = "1";
const sc_lv<32> dut_dense_mlp::ap_const_lv32_1 = "1";
const sc_lv<32> dut_dense_mlp::ap_const_lv32_2 = "10";
const sc_lv<1> dut_dense_mlp::ap_const_lv1_0 = "0";
const sc_lv<32> dut_dense_mlp::ap_const_lv32_3 = "11";
const sc_lv<32> dut_dense_mlp::ap_const_lv32_6 = "110";
const sc_lv<32> dut_dense_mlp::ap_const_lv32_B = "1011";
const sc_lv<32> dut_dense_mlp::ap_const_lv32_F = "1111";
const sc_lv<2> dut_dense_mlp::ap_const_lv2_0 = "00";
const sc_lv<32> dut_dense_mlp::ap_const_lv32_10 = "10000";
const sc_lv<8> dut_dense_mlp::ap_const_lv8_0 = "00000000";
const sc_lv<7> dut_dense_mlp::ap_const_lv7_0 = "0000000";
const sc_lv<32> dut_dense_mlp::ap_const_lv32_7 = "111";
const sc_lv<8> dut_dense_mlp::ap_const_lv8_54 = "1010100";
const sc_lv<2> dut_dense_mlp::ap_const_lv2_2 = "10";
const sc_lv<2> dut_dense_mlp::ap_const_lv2_1 = "1";
const sc_lv<7> dut_dense_mlp::ap_const_lv7_54 = "1010100";
const sc_lv<7> dut_dense_mlp::ap_const_lv7_1 = "1";
const sc_lv<32> dut_dense_mlp::ap_const_lv32_3E759240 = "111110011101011001001001000000";
const sc_lv<32> dut_dense_mlp::ap_const_lv32_BE833E74 = "10111110100000110011111001110100";
const sc_lv<9> dut_dense_mlp::ap_const_lv9_0 = "000000000";
const sc_lv<9> dut_dense_mlp::ap_const_lv9_1F = "11111";

dut_dense_mlp::dut_dense_mlp(sc_module_name name) : sc_module(name), mVcdFile(0) {
    fc3_weight_U = new dut_dense_mlp_fc3_weight("fc3_weight_U");
    fc3_weight_U->clk(ap_clk);
    fc3_weight_U->reset(ap_rst);
    fc3_weight_U->address0(fc3_weight_address0);
    fc3_weight_U->ce0(fc3_weight_ce0);
    fc3_weight_U->q0(fc3_weight_q0);
    dut_fadd_32ns_32ns_32_5_full_dsp_U98 = new dut_fadd_32ns_32ns_32_5_full_dsp<1,5,32,32,32>("dut_fadd_32ns_32ns_32_5_full_dsp_U98");
    dut_fadd_32ns_32ns_32_5_full_dsp_U98->clk(ap_clk);
    dut_fadd_32ns_32ns_32_5_full_dsp_U98->reset(ap_rst);
    dut_fadd_32ns_32ns_32_5_full_dsp_U98->din0(grp_fu_135_p0);
    dut_fadd_32ns_32ns_32_5_full_dsp_U98->din1(grp_fu_135_p1);
    dut_fadd_32ns_32ns_32_5_full_dsp_U98->ce(ap_var_for_const0);
    dut_fadd_32ns_32ns_32_5_full_dsp_U98->dout(grp_fu_135_p2);
    dut_fmul_32ns_32ns_32_4_max_dsp_U99 = new dut_fmul_32ns_32ns_32_4_max_dsp<1,4,32,32,32>("dut_fmul_32ns_32ns_32_4_max_dsp_U99");
    dut_fmul_32ns_32ns_32_4_max_dsp_U99->clk(ap_clk);
    dut_fmul_32ns_32ns_32_4_max_dsp_U99->reset(ap_rst);
    dut_fmul_32ns_32ns_32_4_max_dsp_U99->din0(grp_fu_141_p0);
    dut_fmul_32ns_32ns_32_4_max_dsp_U99->din1(fc3_weight_q0);
    dut_fmul_32ns_32ns_32_4_max_dsp_U99->ce(ap_var_for_const0);
    dut_fmul_32ns_32ns_32_4_max_dsp_U99->dout(grp_fu_141_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond1_fu_152_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond1_fu_152_p2 );

    SC_METHOD(thread_ap_sig_109);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_118);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_126);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_141);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_167);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_34);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_67);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_78);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_99);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_st12_fsm_11);
    sensitive << ( ap_sig_118 );

    SC_METHOD(thread_ap_sig_cseq_ST_st16_fsm_15);
    sensitive << ( ap_sig_126 );

    SC_METHOD(thread_ap_sig_cseq_ST_st17_fsm_16);
    sensitive << ( ap_sig_141 );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_34 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_67 );

    SC_METHOD(thread_ap_sig_cseq_ST_st3_fsm_2);
    sensitive << ( ap_sig_78 );

    SC_METHOD(thread_ap_sig_cseq_ST_st4_fsm_3);
    sensitive << ( ap_sig_99 );

    SC_METHOD(thread_ap_sig_cseq_ST_st7_fsm_6);
    sensitive << ( ap_sig_109 );

    SC_METHOD(thread_ap_sig_cseq_ST_st8_fsm_7);
    sensitive << ( ap_sig_167 );

    SC_METHOD(thread_bias_load_phi_fu_200_p3);
    sensitive << ( tmp_fu_196_p1 );

    SC_METHOD(thread_exitcond1_fu_152_p2);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( n_reg_88 );

    SC_METHOD(thread_exitcond_fu_168_p2);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( m_reg_124 );

    SC_METHOD(thread_fc3_weight_address0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( tmp_13_fu_191_p1 );

    SC_METHOD(thread_fc3_weight_ce0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_grp_fu_135_p0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( sum_phi_fu_116_p4 );
    sensitive << ( sum_reg_112 );
    sensitive << ( ap_sig_cseq_ST_st8_fsm_7 );

    SC_METHOD(thread_grp_fu_135_p1);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( bias_load_phi_fu_200_p3 );
    sensitive << ( tmp_14_reg_285 );
    sensitive << ( ap_sig_cseq_ST_st8_fsm_7 );

    SC_METHOD(thread_grp_fu_141_p0);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( tmp_104_fu_209_p1 );

    SC_METHOD(thread_input_0_address0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( newIndex3_fu_186_p1 );

    SC_METHOD(thread_input_0_ce0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_m_2_fu_174_p2);
    sensitive << ( m_reg_124 );

    SC_METHOD(thread_m_cast_fu_164_p1);
    sensitive << ( m_reg_124 );

    SC_METHOD(thread_n_1_fu_158_p2);
    sensitive << ( n_reg_88 );

    SC_METHOD(thread_newIndex2_fu_218_p1);
    sensitive << ( n_reg_88 );

    SC_METHOD(thread_newIndex3_fu_186_p1);
    sensitive << ( m_reg_124 );

    SC_METHOD(thread_next_mul_fu_146_p2);
    sensitive << ( phi_mul_reg_100 );

    SC_METHOD(thread_output_0_address0);
    sensitive << ( ap_sig_cseq_ST_st16_fsm_15 );
    sensitive << ( output_0_addr_reg_300 );
    sensitive << ( ap_sig_cseq_ST_st17_fsm_16 );
    sensitive << ( newIndex2_fu_218_p1 );

    SC_METHOD(thread_output_0_ce0);
    sensitive << ( ap_sig_cseq_ST_st16_fsm_15 );
    sensitive << ( ap_sig_cseq_ST_st17_fsm_16 );

    SC_METHOD(thread_output_0_d0);
    sensitive << ( output_0_q0 );
    sensitive << ( ap_sig_cseq_ST_st17_fsm_16 );
    sensitive << ( tmp_s_fu_223_p1 );

    SC_METHOD(thread_output_0_we0);
    sensitive << ( ap_sig_cseq_ST_st17_fsm_16 );

    SC_METHOD(thread_sum_phi_fu_116_p4);
    sensitive << ( sum_reg_112 );

    SC_METHOD(thread_tmp_104_fu_209_p1);
    sensitive << ( input_0_q0 );

    SC_METHOD(thread_tmp_13_fu_191_p1);
    sensitive << ( w_index_fu_180_p2 );

    SC_METHOD(thread_tmp_fu_196_p1);
    sensitive << ( n_reg_88 );

    SC_METHOD(thread_tmp_s_fu_223_p1);
    sensitive << ( biased_reg_295 );

    SC_METHOD(thread_w_index_fu_180_p2);
    sensitive << ( phi_mul_reg_100 );
    sensitive << ( m_cast_fu_164_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_fu_168_p2 );
    sensitive << ( exitcond1_fu_152_p2 );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "00000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "dut_dense_mlp_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, input_0_address0, "(port)input_0_address0");
    sc_trace(mVcdFile, input_0_ce0, "(port)input_0_ce0");
    sc_trace(mVcdFile, input_0_q0, "(port)input_0_q0");
    sc_trace(mVcdFile, output_0_address0, "(port)output_0_address0");
    sc_trace(mVcdFile, output_0_ce0, "(port)output_0_ce0");
    sc_trace(mVcdFile, output_0_we0, "(port)output_0_we0");
    sc_trace(mVcdFile, output_0_d0, "(port)output_0_d0");
    sc_trace(mVcdFile, output_0_q0, "(port)output_0_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_34, "ap_sig_34");
    sc_trace(mVcdFile, fc3_weight_address0, "fc3_weight_address0");
    sc_trace(mVcdFile, fc3_weight_ce0, "fc3_weight_ce0");
    sc_trace(mVcdFile, fc3_weight_q0, "fc3_weight_q0");
    sc_trace(mVcdFile, next_mul_fu_146_p2, "next_mul_fu_146_p2");
    sc_trace(mVcdFile, next_mul_reg_239, "next_mul_reg_239");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_67, "ap_sig_67");
    sc_trace(mVcdFile, n_1_fu_158_p2, "n_1_fu_158_p2");
    sc_trace(mVcdFile, n_1_reg_247, "n_1_reg_247");
    sc_trace(mVcdFile, m_2_fu_174_p2, "m_2_fu_174_p2");
    sc_trace(mVcdFile, m_2_reg_255, "m_2_reg_255");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st3_fsm_2, "ap_sig_cseq_ST_st3_fsm_2");
    sc_trace(mVcdFile, ap_sig_78, "ap_sig_78");
    sc_trace(mVcdFile, exitcond_fu_168_p2, "exitcond_fu_168_p2");
    sc_trace(mVcdFile, bias_load_phi_fu_200_p3, "bias_load_phi_fu_200_p3");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st4_fsm_3, "ap_sig_cseq_ST_st4_fsm_3");
    sc_trace(mVcdFile, ap_sig_99, "ap_sig_99");
    sc_trace(mVcdFile, grp_fu_141_p2, "grp_fu_141_p2");
    sc_trace(mVcdFile, tmp_14_reg_285, "tmp_14_reg_285");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st7_fsm_6, "ap_sig_cseq_ST_st7_fsm_6");
    sc_trace(mVcdFile, ap_sig_109, "ap_sig_109");
    sc_trace(mVcdFile, grp_fu_135_p2, "grp_fu_135_p2");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st12_fsm_11, "ap_sig_cseq_ST_st12_fsm_11");
    sc_trace(mVcdFile, ap_sig_118, "ap_sig_118");
    sc_trace(mVcdFile, biased_reg_295, "biased_reg_295");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st16_fsm_15, "ap_sig_cseq_ST_st16_fsm_15");
    sc_trace(mVcdFile, ap_sig_126, "ap_sig_126");
    sc_trace(mVcdFile, output_0_addr_reg_300, "output_0_addr_reg_300");
    sc_trace(mVcdFile, n_reg_88, "n_reg_88");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st17_fsm_16, "ap_sig_cseq_ST_st17_fsm_16");
    sc_trace(mVcdFile, ap_sig_141, "ap_sig_141");
    sc_trace(mVcdFile, phi_mul_reg_100, "phi_mul_reg_100");
    sc_trace(mVcdFile, sum_phi_fu_116_p4, "sum_phi_fu_116_p4");
    sc_trace(mVcdFile, sum_reg_112, "sum_reg_112");
    sc_trace(mVcdFile, exitcond1_fu_152_p2, "exitcond1_fu_152_p2");
    sc_trace(mVcdFile, m_reg_124, "m_reg_124");
    sc_trace(mVcdFile, newIndex3_fu_186_p1, "newIndex3_fu_186_p1");
    sc_trace(mVcdFile, tmp_13_fu_191_p1, "tmp_13_fu_191_p1");
    sc_trace(mVcdFile, newIndex2_fu_218_p1, "newIndex2_fu_218_p1");
    sc_trace(mVcdFile, grp_fu_135_p0, "grp_fu_135_p0");
    sc_trace(mVcdFile, grp_fu_135_p1, "grp_fu_135_p1");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st8_fsm_7, "ap_sig_cseq_ST_st8_fsm_7");
    sc_trace(mVcdFile, ap_sig_167, "ap_sig_167");
    sc_trace(mVcdFile, grp_fu_141_p0, "grp_fu_141_p0");
    sc_trace(mVcdFile, m_cast_fu_164_p1, "m_cast_fu_164_p1");
    sc_trace(mVcdFile, w_index_fu_180_p2, "w_index_fu_180_p2");
    sc_trace(mVcdFile, tmp_fu_196_p1, "tmp_fu_196_p1");
    sc_trace(mVcdFile, tmp_104_fu_209_p1, "tmp_104_fu_209_p1");
    sc_trace(mVcdFile, tmp_s_fu_223_p1, "tmp_s_fu_223_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

dut_dense_mlp::~dut_dense_mlp() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete fc3_weight_U;
    delete dut_fadd_32ns_32ns_32_5_full_dsp_U98;
    delete dut_fmul_32ns_32ns_32_4_max_dsp_U99;
}

void dut_dense_mlp::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void dut_dense_mlp::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st12_fsm_11.read())) {
        m_reg_124 = m_2_reg_255.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_152_p2.read()))) {
        m_reg_124 = ap_const_lv7_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st17_fsm_16.read())) {
        n_reg_88 = n_1_reg_247.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        n_reg_88 = ap_const_lv2_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st17_fsm_16.read())) {
        phi_mul_reg_100 = next_mul_reg_239.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        phi_mul_reg_100 = ap_const_lv8_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st12_fsm_11.read())) {
        sum_reg_112 = grp_fu_135_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_152_p2.read()))) {
        sum_reg_112 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st16_fsm_15.read())) {
        biased_reg_295 = grp_fu_135_p2.read();
        output_0_addr_reg_300 =  (sc_lv<8>) (newIndex2_fu_218_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        m_2_reg_255 = m_2_fu_174_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        n_1_reg_247 = n_1_fu_158_p2.read();
        next_mul_reg_239 = next_mul_fu_146_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read())) {
        tmp_14_reg_285 = grp_fu_141_p2.read();
    }
}

void dut_dense_mlp::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_152_p2.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void dut_dense_mlp::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void dut_dense_mlp::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_152_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void dut_dense_mlp::thread_ap_sig_109() {
    ap_sig_109 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(6, 6));
}

void dut_dense_mlp::thread_ap_sig_118() {
    ap_sig_118 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(11, 11));
}

void dut_dense_mlp::thread_ap_sig_126() {
    ap_sig_126 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(15, 15));
}

void dut_dense_mlp::thread_ap_sig_141() {
    ap_sig_141 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(16, 16));
}

void dut_dense_mlp::thread_ap_sig_167() {
    ap_sig_167 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(7, 7));
}

void dut_dense_mlp::thread_ap_sig_34() {
    ap_sig_34 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void dut_dense_mlp::thread_ap_sig_67() {
    ap_sig_67 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void dut_dense_mlp::thread_ap_sig_78() {
    ap_sig_78 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(2, 2));
}

void dut_dense_mlp::thread_ap_sig_99() {
    ap_sig_99 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(3, 3));
}

void dut_dense_mlp::thread_ap_sig_cseq_ST_st12_fsm_11() {
    if (ap_sig_118.read()) {
        ap_sig_cseq_ST_st12_fsm_11 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st12_fsm_11 = ap_const_logic_0;
    }
}

void dut_dense_mlp::thread_ap_sig_cseq_ST_st16_fsm_15() {
    if (ap_sig_126.read()) {
        ap_sig_cseq_ST_st16_fsm_15 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st16_fsm_15 = ap_const_logic_0;
    }
}

void dut_dense_mlp::thread_ap_sig_cseq_ST_st17_fsm_16() {
    if (ap_sig_141.read()) {
        ap_sig_cseq_ST_st17_fsm_16 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st17_fsm_16 = ap_const_logic_0;
    }
}

void dut_dense_mlp::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_34.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void dut_dense_mlp::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_67.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void dut_dense_mlp::thread_ap_sig_cseq_ST_st3_fsm_2() {
    if (ap_sig_78.read()) {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    }
}

void dut_dense_mlp::thread_ap_sig_cseq_ST_st4_fsm_3() {
    if (ap_sig_99.read()) {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    }
}

void dut_dense_mlp::thread_ap_sig_cseq_ST_st7_fsm_6() {
    if (ap_sig_109.read()) {
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    }
}

void dut_dense_mlp::thread_ap_sig_cseq_ST_st8_fsm_7() {
    if (ap_sig_167.read()) {
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    }
}

void dut_dense_mlp::thread_bias_load_phi_fu_200_p3() {
    bias_load_phi_fu_200_p3 = (!tmp_fu_196_p1.read()[0].is_01())? sc_lv<32>(): ((tmp_fu_196_p1.read()[0].to_bool())? ap_const_lv32_3E759240: ap_const_lv32_BE833E74);
}

void dut_dense_mlp::thread_exitcond1_fu_152_p2() {
    exitcond1_fu_152_p2 = (!n_reg_88.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(n_reg_88.read() == ap_const_lv2_2);
}

void dut_dense_mlp::thread_exitcond_fu_168_p2() {
    exitcond_fu_168_p2 = (!m_reg_124.read().is_01() || !ap_const_lv7_54.is_01())? sc_lv<1>(): sc_lv<1>(m_reg_124.read() == ap_const_lv7_54);
}

void dut_dense_mlp::thread_fc3_weight_address0() {
    fc3_weight_address0 =  (sc_lv<8>) (tmp_13_fu_191_p1.read());
}

void dut_dense_mlp::thread_fc3_weight_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        fc3_weight_ce0 = ap_const_logic_1;
    } else {
        fc3_weight_ce0 = ap_const_logic_0;
    }
}

void dut_dense_mlp::thread_grp_fu_135_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st8_fsm_7.read())) {
        grp_fu_135_p0 = sum_reg_112.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        grp_fu_135_p0 = sum_phi_fu_116_p4.read();
    } else {
        grp_fu_135_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void dut_dense_mlp::thread_grp_fu_135_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st8_fsm_7.read())) {
        grp_fu_135_p1 = tmp_14_reg_285.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        grp_fu_135_p1 = bias_load_phi_fu_200_p3.read();
    } else {
        grp_fu_135_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void dut_dense_mlp::thread_grp_fu_141_p0() {
    grp_fu_141_p0 = tmp_104_fu_209_p1.read();
}

void dut_dense_mlp::thread_input_0_address0() {
    input_0_address0 =  (sc_lv<8>) (newIndex3_fu_186_p1.read());
}

void dut_dense_mlp::thread_input_0_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        input_0_ce0 = ap_const_logic_1;
    } else {
        input_0_ce0 = ap_const_logic_0;
    }
}

void dut_dense_mlp::thread_m_2_fu_174_p2() {
    m_2_fu_174_p2 = (!m_reg_124.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(m_reg_124.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void dut_dense_mlp::thread_m_cast_fu_164_p1() {
    m_cast_fu_164_p1 = esl_zext<8,7>(m_reg_124.read());
}

void dut_dense_mlp::thread_n_1_fu_158_p2() {
    n_1_fu_158_p2 = (!n_reg_88.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(n_reg_88.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void dut_dense_mlp::thread_newIndex2_fu_218_p1() {
    newIndex2_fu_218_p1 = esl_zext<64,2>(n_reg_88.read());
}

void dut_dense_mlp::thread_newIndex3_fu_186_p1() {
    newIndex3_fu_186_p1 = esl_zext<64,7>(m_reg_124.read());
}

void dut_dense_mlp::thread_next_mul_fu_146_p2() {
    next_mul_fu_146_p2 = (!phi_mul_reg_100.read().is_01() || !ap_const_lv8_54.is_01())? sc_lv<8>(): (sc_biguint<8>(phi_mul_reg_100.read()) + sc_biguint<8>(ap_const_lv8_54));
}

void dut_dense_mlp::thread_output_0_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st17_fsm_16.read())) {
        output_0_address0 = output_0_addr_reg_300.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st16_fsm_15.read())) {
        output_0_address0 =  (sc_lv<8>) (newIndex2_fu_218_p1.read());
    } else {
        output_0_address0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void dut_dense_mlp::thread_output_0_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st16_fsm_15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st17_fsm_16.read()))) {
        output_0_ce0 = ap_const_logic_1;
    } else {
        output_0_ce0 = ap_const_logic_0;
    }
}

void dut_dense_mlp::thread_output_0_d0() {
    output_0_d0 = esl_partset<128,128,32,9,9>(output_0_q0.read(), tmp_s_fu_223_p1.read(), ap_const_lv9_0, ap_const_lv9_1F);
}

void dut_dense_mlp::thread_output_0_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st17_fsm_16.read()))) {
        output_0_we0 = ap_const_logic_1;
    } else {
        output_0_we0 = ap_const_logic_0;
    }
}

void dut_dense_mlp::thread_sum_phi_fu_116_p4() {
    sum_phi_fu_116_p4 = sum_reg_112.read();
}

void dut_dense_mlp::thread_tmp_104_fu_209_p1() {
    tmp_104_fu_209_p1 = input_0_q0.read().range(32-1, 0);
}

void dut_dense_mlp::thread_tmp_13_fu_191_p1() {
    tmp_13_fu_191_p1 = esl_zext<64,8>(w_index_fu_180_p2.read());
}

void dut_dense_mlp::thread_tmp_fu_196_p1() {
    tmp_fu_196_p1 = n_reg_88.read().range(1-1, 0);
}

void dut_dense_mlp::thread_tmp_s_fu_223_p1() {
    tmp_s_fu_223_p1 = biased_reg_295.read();
}

void dut_dense_mlp::thread_w_index_fu_180_p2() {
    w_index_fu_180_p2 = (!phi_mul_reg_100.read().is_01() || !m_cast_fu_164_p1.read().is_01())? sc_lv<8>(): (sc_biguint<8>(phi_mul_reg_100.read()) + sc_biguint<8>(m_cast_fu_164_p1.read()));
}

void dut_dense_mlp::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_152_p2.read())) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        case 4 : 
            if (!esl_seteq<1,1,1>(exitcond_fu_168_p2.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_st13_fsm_12;
            } else {
                ap_NS_fsm = ap_ST_st4_fsm_3;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_st5_fsm_4;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_st6_fsm_5;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_st7_fsm_6;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_st8_fsm_7;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_st9_fsm_8;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_st10_fsm_9;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_st11_fsm_10;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_st12_fsm_11;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_st3_fsm_2;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_st14_fsm_13;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_st15_fsm_14;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_st16_fsm_15;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_st17_fsm_16;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_st2_fsm_1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<17>) ("XXXXXXXXXXXXXXXXX");
            break;
    }
}

}

