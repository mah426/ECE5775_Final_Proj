// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dut_dense_mlp_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        input1_address0,
        input1_ce0,
        input1_q0,
        input2_address0,
        input2_ce0,
        input2_q0,
        input3_address0,
        input3_ce0,
        input3_q0,
        input4_address0,
        input4_ce0,
        input4_q0,
        input5_address0,
        input5_ce0,
        input5_q0,
        input6_address0,
        input6_ce0,
        input6_q0,
        input7_address0,
        input7_ce0,
        input7_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        output_r_q0
);

parameter    ap_ST_st1_fsm_0 = 21'b1;
parameter    ap_ST_st2_fsm_1 = 21'b10;
parameter    ap_ST_st3_fsm_2 = 21'b100;
parameter    ap_ST_st4_fsm_3 = 21'b1000;
parameter    ap_ST_st5_fsm_4 = 21'b10000;
parameter    ap_ST_st6_fsm_5 = 21'b100000;
parameter    ap_ST_st7_fsm_6 = 21'b1000000;
parameter    ap_ST_st8_fsm_7 = 21'b10000000;
parameter    ap_ST_st9_fsm_8 = 21'b100000000;
parameter    ap_ST_st10_fsm_9 = 21'b1000000000;
parameter    ap_ST_st11_fsm_10 = 21'b10000000000;
parameter    ap_ST_st12_fsm_11 = 21'b100000000000;
parameter    ap_ST_st13_fsm_12 = 21'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 21'b10000000000000;
parameter    ap_ST_st15_fsm_14 = 21'b100000000000000;
parameter    ap_ST_st16_fsm_15 = 21'b1000000000000000;
parameter    ap_ST_st17_fsm_16 = 21'b10000000000000000;
parameter    ap_ST_st18_fsm_17 = 21'b100000000000000000;
parameter    ap_ST_st19_fsm_18 = 21'b1000000000000000000;
parameter    ap_ST_st20_fsm_19 = 21'b10000000000000000000;
parameter    ap_ST_st21_fsm_20 = 21'b100000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_12 = 32'b10010;
parameter    ap_const_lv32_13 = 32'b10011;
parameter    ap_const_lv7_0 = 7'b0000000;
parameter    ap_const_lv32_14 = 32'b10100;
parameter    ap_const_lv16_0 = 16'b0000000000000000;
parameter    ap_const_lv9_0 = 9'b000000000;
parameter    ap_const_lv19_0 = 19'b0000000000000000000;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv16_190 = 16'b110010000;
parameter    ap_const_lv7_78 = 7'b1111000;
parameter    ap_const_lv7_1 = 7'b1;
parameter    ap_const_lv9_190 = 9'b110010000;
parameter    ap_const_lv9_1 = 9'b1;
parameter    ap_const_lv9_93 = 9'b10010011;
parameter    ap_const_lv19_37C = 19'b1101111100;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_1E = 32'b11110;
parameter    ap_const_lv8_FF = 8'b11111111;
parameter    ap_const_lv23_0 = 23'b00000000000000000000000;
parameter    ap_const_lv9_1F = 9'b11111;
parameter    ap_const_lv5_2 = 5'b10;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] input_r_address0;
output   input_r_ce0;
input  [127:0] input_r_q0;
output  [7:0] input1_address0;
output   input1_ce0;
input  [127:0] input1_q0;
output  [7:0] input2_address0;
output   input2_ce0;
input  [127:0] input2_q0;
output  [7:0] input3_address0;
output   input3_ce0;
input  [127:0] input3_q0;
output  [7:0] input4_address0;
output   input4_ce0;
input  [127:0] input4_q0;
output  [7:0] input5_address0;
output   input5_ce0;
input  [127:0] input5_q0;
output  [7:0] input6_address0;
output   input6_ce0;
input  [127:0] input6_q0;
output  [7:0] input7_address0;
output   input7_ce0;
input  [127:0] input7_q0;
output  [7:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [127:0] output_r_d0;
input  [127:0] output_r_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg input1_ce0;
reg input2_ce0;
reg input3_ce0;
reg input4_ce0;
reg input5_ce0;
reg input6_ce0;
reg input7_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [20:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_38;
wire   [15:0] fc1_weight_address0;
reg    fc1_weight_ce0;
wire   [31:0] fc1_weight_q0;
wire   [6:0] fc1_bias_address0;
reg    fc1_bias_ce0;
wire   [31:0] fc1_bias_q0;
wire   [15:0] next_mul2_fu_303_p2;
reg   [15:0] next_mul2_reg_495;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_120;
wire   [6:0] n_1_fu_315_p2;
reg   [6:0] n_1_reg_503;
wire   [8:0] m_2_fu_331_p2;
reg   [8:0] m_2_reg_511;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_131;
wire   [8:0] idx_urem_fu_349_p3;
reg   [8:0] idx_urem_reg_516;
wire   [0:0] exitcond_fu_325_p2;
wire   [15:0] w_index_fu_357_p2;
reg   [15:0] w_index_reg_521;
wire   [18:0] next_mul_fu_363_p2;
reg   [18:0] next_mul_reg_526;
reg   [1:0] tmp_100_reg_531;
reg   [7:0] output_addr_reg_581;
wire   [31:0] tmp_101_fu_422_p1;
reg   [31:0] tmp_101_reg_586;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_174;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_185;
wire   [31:0] grp_fu_293_p2;
reg   [31:0] tmp_13_reg_606;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_195;
wire   [31:0] grp_fu_288_p2;
reg    ap_sig_cseq_ST_st13_fsm_12;
reg    ap_sig_204;
reg   [31:0] fc1_bias_load_reg_616;
reg    ap_sig_cseq_ST_st14_fsm_13;
reg    ap_sig_212;
reg   [31:0] biased_reg_621;
reg    ap_sig_cseq_ST_st19_fsm_18;
reg    ap_sig_220;
wire   [31:0] tmp_33_fu_475_p3;
reg   [31:0] tmp_33_reg_627;
reg    ap_sig_cseq_ST_st20_fsm_19;
reg    ap_sig_229;
reg   [6:0] n_reg_219;
reg    ap_sig_cseq_ST_st21_fsm_20;
reg    ap_sig_242;
reg   [15:0] phi_mul1_reg_231;
reg   [31:0] sum_reg_243;
wire   [0:0] exitcond1_fu_309_p2;
reg   [8:0] m_reg_255;
reg   [18:0] phi_mul_reg_266;
reg   [8:0] phi_urem_reg_277;
wire   [63:0] newIndex4_fu_379_p1;
wire   [63:0] tmp_14_fu_391_p1;
wire   [63:0] tmp_12_fu_426_p1;
reg   [31:0] grp_fu_288_p1;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_273;
reg    ap_sig_cseq_ST_st15_fsm_14;
reg    ap_sig_280;
wire   [31:0] grp_fu_293_p0;
wire   [8:0] next_urem_fu_337_p2;
wire   [0:0] tmp_99_fu_343_p2;
wire   [15:0] m_cast5_fu_321_p1;
wire   [13:0] tmp_40_fu_400_p9;
wire   [127:0] tmp_40_fu_400_p10;
wire   [31:0] biased_to_int_fu_434_p1;
wire   [7:0] tmp_fu_437_p4;
wire   [22:0] tmp_98_fu_447_p1;
wire   [0:0] notrhs_fu_457_p2;
wire   [0:0] notlhs_fu_451_p2;
wire   [0:0] tmp_s_fu_463_p2;
wire   [0:0] tmp_38_fu_298_p2;
wire   [0:0] tmp_39_fu_469_p2;
reg   [20:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 21'b1;
end

dut_dense_mlp_2_fc1_weight #(
    .DataWidth( 32 ),
    .AddressRange( 48000 ),
    .AddressWidth( 16 ))
fc1_weight_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fc1_weight_address0),
    .ce0(fc1_weight_ce0),
    .q0(fc1_weight_q0)
);

dut_dense_mlp_2_fc1_bias #(
    .DataWidth( 32 ),
    .AddressRange( 120 ),
    .AddressWidth( 7 ))
fc1_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fc1_bias_address0),
    .ce0(fc1_bias_ce0),
    .q0(fc1_bias_q0)
);

dut_fadd_32ns_32ns_32_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dut_fadd_32ns_32ns_32_5_full_dsp_U76(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_reg_243),
    .din1(grp_fu_288_p1),
    .ce(1'b1),
    .dout(grp_fu_288_p2)
);

dut_fmul_32ns_32ns_32_4_max_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dut_fmul_32ns_32ns_32_4_max_dsp_U77(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_293_p0),
    .din1(fc1_weight_q0),
    .ce(1'b1),
    .dout(grp_fu_293_p2)
);

dut_fcmp_32ns_32ns_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
dut_fcmp_32ns_32ns_1_1_U78(
    .din0(biased_reg_621),
    .din1(ap_const_lv32_0),
    .opcode(ap_const_lv5_2),
    .dout(tmp_38_fu_298_p2)
);

dut_mux_8to1_sel14_128_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 128 ),
    .din2_WIDTH( 128 ),
    .din3_WIDTH( 128 ),
    .din4_WIDTH( 128 ),
    .din5_WIDTH( 128 ),
    .din6_WIDTH( 128 ),
    .din7_WIDTH( 128 ),
    .din8_WIDTH( 128 ),
    .din9_WIDTH( 14 ),
    .dout_WIDTH( 128 ))
dut_mux_8to1_sel14_128_1_U79(
    .din1(input_r_q0),
    .din2(input1_q0),
    .din3(input2_q0),
    .din4(input3_q0),
    .din5(input4_q0),
    .din6(input5_q0),
    .din7(input6_q0),
    .din8(input7_q0),
    .din9(tmp_40_fu_400_p9),
    .dout(tmp_40_fu_400_p10)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st13_fsm_12)) begin
        m_reg_255 <= m_2_reg_511;
    end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (1'b0 == exitcond1_fu_309_p2))) begin
        m_reg_255 <= ap_const_lv9_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st21_fsm_20)) begin
        n_reg_219 <= n_1_reg_503;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        n_reg_219 <= ap_const_lv7_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st21_fsm_20)) begin
        phi_mul1_reg_231 <= next_mul2_reg_495;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        phi_mul1_reg_231 <= ap_const_lv16_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st13_fsm_12)) begin
        phi_mul_reg_266 <= next_mul_reg_526;
    end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (1'b0 == exitcond1_fu_309_p2))) begin
        phi_mul_reg_266 <= ap_const_lv19_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st13_fsm_12)) begin
        phi_urem_reg_277 <= idx_urem_reg_516;
    end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (1'b0 == exitcond1_fu_309_p2))) begin
        phi_urem_reg_277 <= ap_const_lv9_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st13_fsm_12)) begin
        sum_reg_243 <= grp_fu_288_p2;
    end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (1'b0 == exitcond1_fu_309_p2))) begin
        sum_reg_243 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st19_fsm_18)) begin
        biased_reg_621 <= grp_fu_288_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st14_fsm_13)) begin
        fc1_bias_load_reg_616 <= fc1_bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & (exitcond_fu_325_p2 == 1'b0))) begin
        idx_urem_reg_516 <= idx_urem_fu_349_p3;
        next_mul_reg_526 <= next_mul_fu_363_p2;
        tmp_100_reg_531 <= {{phi_mul_reg_266[ap_const_lv32_12 : ap_const_lv32_11]}};
        w_index_reg_521 <= w_index_fu_357_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        m_2_reg_511 <= m_2_fu_331_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        n_1_reg_503 <= n_1_fu_315_p2;
        next_mul2_reg_495 <= next_mul2_fu_303_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & ~(exitcond_fu_325_p2 == 1'b0))) begin
        output_addr_reg_581[6 : 0] <= tmp_14_fu_391_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        tmp_101_reg_586 <= tmp_101_fu_422_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        tmp_13_reg_606 <= grp_fu_293_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st20_fsm_19)) begin
        tmp_33_reg_627 <= tmp_33_fu_475_p3;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0)) | ((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(1'b0 == exitcond1_fu_309_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(1'b0 == exitcond1_fu_309_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_204) begin
        ap_sig_cseq_ST_st13_fsm_12 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st13_fsm_12 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_212) begin
        ap_sig_cseq_ST_st14_fsm_13 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st14_fsm_13 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_280) begin
        ap_sig_cseq_ST_st15_fsm_14 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st15_fsm_14 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_220) begin
        ap_sig_cseq_ST_st19_fsm_18 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st19_fsm_18 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_38) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_229) begin
        ap_sig_cseq_ST_st20_fsm_19 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st20_fsm_19 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_242) begin
        ap_sig_cseq_ST_st21_fsm_20 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st21_fsm_20 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_120) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_131) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_174) begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_185) begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_195) begin
        ap_sig_cseq_ST_st8_fsm_7 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_273) begin
        ap_sig_cseq_ST_st9_fsm_8 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        fc1_bias_ce0 = 1'b1;
    end else begin
        fc1_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        fc1_weight_ce0 = 1'b1;
    end else begin
        fc1_weight_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st15_fsm_14)) begin
        grp_fu_288_p1 = fc1_bias_load_reg_616;
    end else if ((1'b1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        grp_fu_288_p1 = tmp_13_reg_606;
    end else begin
        grp_fu_288_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        input1_ce0 = 1'b1;
    end else begin
        input1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        input2_ce0 = 1'b1;
    end else begin
        input2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        input3_ce0 = 1'b1;
    end else begin
        input3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        input4_ce0 = 1'b1;
    end else begin
        input4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        input5_ce0 = 1'b1;
    end else begin
        input5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        input6_ce0 = 1'b1;
    end else begin
        input6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        input7_ce0 = 1'b1;
    end else begin
        input7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st20_fsm_19) | (1'b1 == ap_sig_cseq_ST_st21_fsm_20))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st21_fsm_20)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if (~(1'b0 == exitcond1_fu_309_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : begin
            if (~(exitcond_fu_325_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_st14_fsm_13;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st4_fsm_3 : begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st14_fsm_13 : begin
            ap_NS_fsm = ap_ST_st15_fsm_14;
        end
        ap_ST_st15_fsm_14 : begin
            ap_NS_fsm = ap_ST_st16_fsm_15;
        end
        ap_ST_st16_fsm_15 : begin
            ap_NS_fsm = ap_ST_st17_fsm_16;
        end
        ap_ST_st17_fsm_16 : begin
            ap_NS_fsm = ap_ST_st18_fsm_17;
        end
        ap_ST_st18_fsm_17 : begin
            ap_NS_fsm = ap_ST_st19_fsm_18;
        end
        ap_ST_st19_fsm_18 : begin
            ap_NS_fsm = ap_ST_st20_fsm_19;
        end
        ap_ST_st20_fsm_19 : begin
            ap_NS_fsm = ap_ST_st21_fsm_20;
        end
        ap_ST_st21_fsm_20 : begin
            ap_NS_fsm = ap_ST_st2_fsm_1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    ap_sig_120 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_131 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

always @ (*) begin
    ap_sig_174 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

always @ (*) begin
    ap_sig_185 = (1'b1 == ap_CS_fsm[ap_const_lv32_4]);
end

always @ (*) begin
    ap_sig_195 = (1'b1 == ap_CS_fsm[ap_const_lv32_7]);
end

always @ (*) begin
    ap_sig_204 = (1'b1 == ap_CS_fsm[ap_const_lv32_C]);
end

always @ (*) begin
    ap_sig_212 = (1'b1 == ap_CS_fsm[ap_const_lv32_D]);
end

always @ (*) begin
    ap_sig_220 = (1'b1 == ap_CS_fsm[ap_const_lv32_12]);
end

always @ (*) begin
    ap_sig_229 = (1'b1 == ap_CS_fsm[ap_const_lv32_13]);
end

always @ (*) begin
    ap_sig_242 = (1'b1 == ap_CS_fsm[ap_const_lv32_14]);
end

always @ (*) begin
    ap_sig_273 = (1'b1 == ap_CS_fsm[ap_const_lv32_8]);
end

always @ (*) begin
    ap_sig_280 = (1'b1 == ap_CS_fsm[ap_const_lv32_E]);
end

always @ (*) begin
    ap_sig_38 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

assign biased_to_int_fu_434_p1 = biased_reg_621;

assign exitcond1_fu_309_p2 = ((n_reg_219 == ap_const_lv7_78) ? 1'b1 : 1'b0);

assign exitcond_fu_325_p2 = ((m_reg_255 == ap_const_lv9_190) ? 1'b1 : 1'b0);

assign fc1_bias_address0 = tmp_14_fu_391_p1;

assign fc1_weight_address0 = tmp_12_fu_426_p1;

assign grp_fu_293_p0 = tmp_101_reg_586;

assign idx_urem_fu_349_p3 = ((tmp_99_fu_343_p2[0:0] === 1'b1) ? next_urem_fu_337_p2 : ap_const_lv9_0);

assign input1_address0 = newIndex4_fu_379_p1;

assign input2_address0 = newIndex4_fu_379_p1;

assign input3_address0 = newIndex4_fu_379_p1;

assign input4_address0 = newIndex4_fu_379_p1;

assign input5_address0 = newIndex4_fu_379_p1;

assign input6_address0 = newIndex4_fu_379_p1;

assign input7_address0 = newIndex4_fu_379_p1;

assign input_r_address0 = newIndex4_fu_379_p1;

assign m_2_fu_331_p2 = (m_reg_255 + ap_const_lv9_1);

assign m_cast5_fu_321_p1 = m_reg_255;

assign n_1_fu_315_p2 = (n_reg_219 + ap_const_lv7_1);

assign newIndex4_fu_379_p1 = phi_urem_reg_277;

assign next_mul2_fu_303_p2 = (phi_mul1_reg_231 + ap_const_lv16_190);

assign next_mul_fu_363_p2 = (ap_const_lv19_37C + phi_mul_reg_266);

assign next_urem_fu_337_p2 = (ap_const_lv9_1 + phi_urem_reg_277);

assign notlhs_fu_451_p2 = ((tmp_fu_437_p4 != ap_const_lv8_FF) ? 1'b1 : 1'b0);

assign notrhs_fu_457_p2 = ((tmp_98_fu_447_p1 == ap_const_lv23_0) ? 1'b1 : 1'b0);

assign output_r_address0 = output_addr_reg_581;

assign output_r_d0 = {{output_r_q0[32'd127 : 32'd32]}, {tmp_33_reg_627}};

assign tmp_101_fu_422_p1 = tmp_40_fu_400_p10[31:0];

assign tmp_12_fu_426_p1 = w_index_reg_521;

assign tmp_14_fu_391_p1 = n_reg_219;

assign tmp_33_fu_475_p3 = ((tmp_39_fu_469_p2[0:0] === 1'b1) ? biased_to_int_fu_434_p1 : ap_const_lv32_0);

assign tmp_39_fu_469_p2 = (tmp_s_fu_463_p2 & tmp_38_fu_298_p2);

assign tmp_40_fu_400_p9 = tmp_100_reg_531;

assign tmp_98_fu_447_p1 = biased_to_int_fu_434_p1[22:0];

assign tmp_99_fu_343_p2 = ((next_urem_fu_337_p2 < ap_const_lv9_93) ? 1'b1 : 1'b0);

assign tmp_fu_437_p4 = {{biased_to_int_fu_434_p1[ap_const_lv32_1E : ap_const_lv32_17]}};

assign tmp_s_fu_463_p2 = (notrhs_fu_457_p2 | notlhs_fu_451_p2);

assign w_index_fu_357_p2 = (m_cast5_fu_321_p1 + phi_mul1_reg_231);

always @ (posedge ap_clk) begin
    output_addr_reg_581[7] <= 1'b0;
end

endmodule //dut_dense_mlp_2
