// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dut_max_pool (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0_address0,
        input_0_ce0,
        input_0_q0,
        input_1_address0,
        input_1_ce0,
        input_1_q0,
        input_2_address0,
        input_2_ce0,
        input_2_q0,
        input_3_address0,
        input_3_ce0,
        input_3_q0,
        input_4_address0,
        input_4_ce0,
        input_4_q0,
        input_5_address0,
        input_5_ce0,
        input_5_q0,
        input_6_address0,
        input_6_ce0,
        input_6_q0,
        input_7_address0,
        input_7_ce0,
        input_7_q0,
        output_0_address0,
        output_0_ce0,
        output_0_we0,
        output_0_d0,
        output_0_q0,
        output_1_address0,
        output_1_ce0,
        output_1_we0,
        output_1_d0,
        output_1_q0,
        output_2_address0,
        output_2_ce0,
        output_2_we0,
        output_2_d0,
        output_2_q0,
        output_3_address0,
        output_3_ce0,
        output_3_we0,
        output_3_d0,
        output_3_q0,
        output_4_address0,
        output_4_ce0,
        output_4_we0,
        output_4_d0,
        output_4_q0,
        output_5_address0,
        output_5_ce0,
        output_5_we0,
        output_5_d0,
        output_5_q0,
        output_6_address0,
        output_6_ce0,
        output_6_we0,
        output_6_d0,
        output_6_q0,
        output_7_address0,
        output_7_ce0,
        output_7_we0,
        output_7_d0,
        output_7_q0,
        M,
        I
);

parameter    ap_ST_st1_fsm_0 = 75'b1;
parameter    ap_ST_st2_fsm_1 = 75'b10;
parameter    ap_ST_st3_fsm_2 = 75'b100;
parameter    ap_ST_st4_fsm_3 = 75'b1000;
parameter    ap_ST_st5_fsm_4 = 75'b10000;
parameter    ap_ST_st6_fsm_5 = 75'b100000;
parameter    ap_ST_st7_fsm_6 = 75'b1000000;
parameter    ap_ST_st8_fsm_7 = 75'b10000000;
parameter    ap_ST_st9_fsm_8 = 75'b100000000;
parameter    ap_ST_st10_fsm_9 = 75'b1000000000;
parameter    ap_ST_st11_fsm_10 = 75'b10000000000;
parameter    ap_ST_st12_fsm_11 = 75'b100000000000;
parameter    ap_ST_st13_fsm_12 = 75'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 75'b10000000000000;
parameter    ap_ST_st15_fsm_14 = 75'b100000000000000;
parameter    ap_ST_st16_fsm_15 = 75'b1000000000000000;
parameter    ap_ST_st17_fsm_16 = 75'b10000000000000000;
parameter    ap_ST_st18_fsm_17 = 75'b100000000000000000;
parameter    ap_ST_st19_fsm_18 = 75'b1000000000000000000;
parameter    ap_ST_st20_fsm_19 = 75'b10000000000000000000;
parameter    ap_ST_st21_fsm_20 = 75'b100000000000000000000;
parameter    ap_ST_st22_fsm_21 = 75'b1000000000000000000000;
parameter    ap_ST_st23_fsm_22 = 75'b10000000000000000000000;
parameter    ap_ST_st24_fsm_23 = 75'b100000000000000000000000;
parameter    ap_ST_st25_fsm_24 = 75'b1000000000000000000000000;
parameter    ap_ST_st26_fsm_25 = 75'b10000000000000000000000000;
parameter    ap_ST_st27_fsm_26 = 75'b100000000000000000000000000;
parameter    ap_ST_st28_fsm_27 = 75'b1000000000000000000000000000;
parameter    ap_ST_st29_fsm_28 = 75'b10000000000000000000000000000;
parameter    ap_ST_st30_fsm_29 = 75'b100000000000000000000000000000;
parameter    ap_ST_st31_fsm_30 = 75'b1000000000000000000000000000000;
parameter    ap_ST_st32_fsm_31 = 75'b10000000000000000000000000000000;
parameter    ap_ST_st33_fsm_32 = 75'b100000000000000000000000000000000;
parameter    ap_ST_st34_fsm_33 = 75'b1000000000000000000000000000000000;
parameter    ap_ST_st35_fsm_34 = 75'b10000000000000000000000000000000000;
parameter    ap_ST_st36_fsm_35 = 75'b100000000000000000000000000000000000;
parameter    ap_ST_st37_fsm_36 = 75'b1000000000000000000000000000000000000;
parameter    ap_ST_st38_fsm_37 = 75'b10000000000000000000000000000000000000;
parameter    ap_ST_st39_fsm_38 = 75'b100000000000000000000000000000000000000;
parameter    ap_ST_st40_fsm_39 = 75'b1000000000000000000000000000000000000000;
parameter    ap_ST_st41_fsm_40 = 75'b10000000000000000000000000000000000000000;
parameter    ap_ST_st42_fsm_41 = 75'b100000000000000000000000000000000000000000;
parameter    ap_ST_st43_fsm_42 = 75'b1000000000000000000000000000000000000000000;
parameter    ap_ST_st44_fsm_43 = 75'b10000000000000000000000000000000000000000000;
parameter    ap_ST_st45_fsm_44 = 75'b100000000000000000000000000000000000000000000;
parameter    ap_ST_st46_fsm_45 = 75'b1000000000000000000000000000000000000000000000;
parameter    ap_ST_st47_fsm_46 = 75'b10000000000000000000000000000000000000000000000;
parameter    ap_ST_st48_fsm_47 = 75'b100000000000000000000000000000000000000000000000;
parameter    ap_ST_st49_fsm_48 = 75'b1000000000000000000000000000000000000000000000000;
parameter    ap_ST_st50_fsm_49 = 75'b10000000000000000000000000000000000000000000000000;
parameter    ap_ST_st51_fsm_50 = 75'b100000000000000000000000000000000000000000000000000;
parameter    ap_ST_st52_fsm_51 = 75'b1000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st53_fsm_52 = 75'b10000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st54_fsm_53 = 75'b100000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st55_fsm_54 = 75'b1000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st56_fsm_55 = 75'b10000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st57_fsm_56 = 75'b100000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st58_fsm_57 = 75'b1000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st59_fsm_58 = 75'b10000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st60_fsm_59 = 75'b100000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st61_fsm_60 = 75'b1000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st62_fsm_61 = 75'b10000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st63_fsm_62 = 75'b100000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st64_fsm_63 = 75'b1000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st65_fsm_64 = 75'b10000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st66_fsm_65 = 75'b100000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st67_fsm_66 = 75'b1000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st68_fsm_67 = 75'b10000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st69_fsm_68 = 75'b100000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st70_fsm_69 = 75'b1000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st71_fsm_70 = 75'b10000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st72_fsm_71 = 75'b100000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st73_fsm_72 = 75'b1000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st74_fsm_73 = 75'b10000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st75_fsm_74 = 75'b100000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_19 = 32'b11001;
parameter    ap_const_lv32_1A = 32'b11010;
parameter    ap_const_lv32_28 = 32'b101000;
parameter    ap_const_lv32_29 = 32'b101001;
parameter    ap_const_lv32_2A = 32'b101010;
parameter    ap_const_lv32_2B = 32'b101011;
parameter    ap_const_lv32_3A = 32'b111010;
parameter    ap_const_lv32_3B = 32'b111011;
parameter    ap_const_lv32_48 = 32'b1001000;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv9_0 = 9'b000000000;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv32_4A = 32'b1001010;
parameter    ap_const_lv32_800000 = 32'b100000000000000000000000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv32_49 = 32'b1001001;
parameter    ap_const_lv11_0 = 11'b00000000000;
parameter    ap_const_lv11_1 = 11'b1;
parameter    ap_const_lv11_2 = 11'b10;
parameter    ap_const_lv11_3 = 11'b11;
parameter    ap_const_lv11_4 = 11'b100;
parameter    ap_const_lv11_5 = 11'b101;
parameter    ap_const_lv11_6 = 11'b110;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv12_498 = 12'b10010011000;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_18 = 32'b11000;
parameter    ap_const_lv14_498 = 14'b10010011000;
parameter    ap_const_lv32_1C = 32'b11100;
parameter    ap_const_lv32_1B = 32'b11011;
parameter    ap_const_lv32_13 = 32'b10011;
parameter    ap_const_lv11_93 = 11'b10010011;
parameter    ap_const_lv9_1F = 9'b11111;
parameter    ap_const_lv32_7F = 32'b1111111;
parameter    ap_const_lv8_7F = 8'b1111111;
parameter    ap_const_lv128_lc_1 = 128'b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111;
parameter    ap_const_lv32_1E = 32'b11110;
parameter    ap_const_lv8_FF = 8'b11111111;
parameter    ap_const_lv23_0 = 23'b00000000000000000000000;
parameter    ap_const_lv7_1F = 7'b11111;
parameter    ap_const_lv24_DEF = 24'b110111101111;
parameter    ap_const_lv26_1BDE = 26'b1101111011110;
parameter    ap_const_lv30_6F75 = 30'b110111101110101;
parameter    ap_const_lv5_2 = 5'b10;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] input_0_address0;
output   input_0_ce0;
input  [127:0] input_0_q0;
output  [7:0] input_1_address0;
output   input_1_ce0;
input  [127:0] input_1_q0;
output  [7:0] input_2_address0;
output   input_2_ce0;
input  [127:0] input_2_q0;
output  [7:0] input_3_address0;
output   input_3_ce0;
input  [127:0] input_3_q0;
output  [7:0] input_4_address0;
output   input_4_ce0;
input  [127:0] input_4_q0;
output  [7:0] input_5_address0;
output   input_5_ce0;
input  [127:0] input_5_q0;
output  [7:0] input_6_address0;
output   input_6_ce0;
input  [127:0] input_6_q0;
output  [7:0] input_7_address0;
output   input_7_ce0;
input  [127:0] input_7_q0;
output  [7:0] output_0_address0;
output   output_0_ce0;
output   output_0_we0;
output  [127:0] output_0_d0;
input  [127:0] output_0_q0;
output  [7:0] output_1_address0;
output   output_1_ce0;
output   output_1_we0;
output  [127:0] output_1_d0;
input  [127:0] output_1_q0;
output  [7:0] output_2_address0;
output   output_2_ce0;
output   output_2_we0;
output  [127:0] output_2_d0;
input  [127:0] output_2_q0;
output  [7:0] output_3_address0;
output   output_3_ce0;
output   output_3_we0;
output  [127:0] output_3_d0;
input  [127:0] output_3_q0;
output  [7:0] output_4_address0;
output   output_4_ce0;
output   output_4_we0;
output  [127:0] output_4_d0;
input  [127:0] output_4_q0;
output  [7:0] output_5_address0;
output   output_5_ce0;
output   output_5_we0;
output  [127:0] output_5_d0;
input  [127:0] output_5_q0;
output  [7:0] output_6_address0;
output   output_6_ce0;
output   output_6_we0;
output  [127:0] output_6_d0;
input  [127:0] output_6_q0;
output  [7:0] output_7_address0;
output   output_7_ce0;
output   output_7_we0;
output  [127:0] output_7_d0;
input  [127:0] output_7_q0;
input  [5:0] M;
input  [5:0] I;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_0_ce0;
reg input_1_ce0;
reg input_2_ce0;
reg input_3_ce0;
reg input_4_ce0;
reg input_5_ce0;
reg input_6_ce0;
reg input_7_ce0;
reg[7:0] output_0_address0;
reg output_0_ce0;
reg output_0_we0;
reg[7:0] output_1_address0;
reg output_1_ce0;
reg output_1_we0;
reg[7:0] output_2_address0;
reg output_2_ce0;
reg output_2_we0;
reg[7:0] output_3_address0;
reg output_3_ce0;
reg output_3_we0;
reg[7:0] output_4_address0;
reg output_4_ce0;
reg output_4_we0;
reg[7:0] output_5_address0;
reg output_5_ce0;
reg output_5_we0;
reg[7:0] output_6_address0;
reg output_6_ce0;
reg output_6_we0;
reg[7:0] output_7_address0;
reg output_7_ce0;
reg output_7_we0;

(* fsm_encoding = "none" *) reg   [74:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_92;
wire   [3:0] O_fu_475_p4;
reg   [3:0] O_reg_1222;
wire   [11:0] O_cast10_cast1_fu_485_p1;
reg   [11:0] O_cast10_cast1_reg_1228;
wire   [7:0] O_cast10_cast_fu_489_p1;
reg   [7:0] O_cast10_cast_reg_1233;
wire   [8:0] I_cast2_fu_493_p1;
reg   [8:0] I_cast2_reg_1238;
wire   [13:0] I_cast_fu_497_p1;
reg   [13:0] I_cast_reg_1243;
wire   [8:0] next_mul_fu_501_p2;
reg   [8:0] next_mul_reg_1248;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_233;
wire   [4:0] m_1_fu_519_p2;
reg   [4:0] m_1_reg_1256;
wire   [7:0] tmp_2_fu_525_p2;
reg   [7:0] tmp_2_reg_1261;
wire   [0:0] tmp_1_fu_514_p2;
wire   [11:0] x_cast7_fu_530_p1;
reg   [11:0] x_cast7_reg_1266;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_251;
wire   [3:0] x_1_fu_539_p2;
reg   [3:0] x_1_reg_1274;
wire   [13:0] tmp_5_cast_fu_553_p1;
reg   [13:0] tmp_5_cast_reg_1279;
wire   [0:0] exitcond3_fu_534_p2;
wire   [3:0] y_1_fu_566_p2;
reg   [3:0] y_1_reg_1287;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_267;
wire   [11:0] tmp3_fu_581_p2;
reg   [11:0] tmp3_reg_1292;
wire   [0:0] exitcond2_fu_561_p2;
wire   [11:0] o_index_fu_586_p2;
reg   [11:0] o_index_reg_1297;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_281;
wire   [8:0] tmp_8_cast_fu_598_p1;
reg   [8:0] tmp_8_cast_reg_1303;
wire   [13:0] c_cast5_fu_602_p1;
reg   [13:0] c_cast5_reg_1308;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_292;
wire   [1:0] c_1_fu_612_p2;
reg   [1:0] c_1_reg_1316;
reg   [1:0] tmp_11_reg_1321;
wire   [0:0] exitcond1_fu_606_p2;
wire   [1:0] r_1_fu_645_p2;
reg   [1:0] r_1_reg_1329;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_309;
wire   [8:0] tmp4_fu_657_p2;
reg   [8:0] tmp4_reg_1334;
wire   [0:0] exitcond_fu_639_p2;
wire   [13:0] tmp5_fu_665_p2;
reg   [13:0] tmp5_reg_1339;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_323;
wire   [13:0] i_index_fu_674_p2;
reg   [13:0] i_index_reg_1344;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_332;
reg   [3:0] tmp_18_reg_1350;
reg    ap_sig_cseq_ST_st10_fsm_9;
reg    ap_sig_341;
reg   [2:0] tmp_52_reg_1355;
wire   [10:0] grp_fu_679_p2;
reg   [10:0] tmp_16_reg_1360;
reg    ap_sig_cseq_ST_st26_fsm_25;
reg    ap_sig_352;
wire   [10:0] tmp_50_fu_706_p1;
reg    ap_sig_cseq_ST_st27_fsm_26;
reg    ap_sig_361;
reg   [4:0] tmp_51_reg_1370;
reg    ap_sig_cseq_ST_st41_fsm_40;
reg    ap_sig_372;
wire   [7:0] tmp_63_fu_851_p2;
reg   [7:0] tmp_63_reg_1415;
reg    ap_sig_cseq_ST_st42_fsm_41;
reg    ap_sig_395;
wire   [127:0] tmp_66_fu_861_p2;
reg   [127:0] tmp_66_reg_1420;
wire   [31:0] tmp_22_fu_885_p1;
reg   [31:0] tmp_22_reg_1425;
reg    ap_sig_cseq_ST_st43_fsm_42;
reg    ap_sig_406;
wire   [0:0] notlhs_fu_904_p2;
reg   [0:0] notlhs_reg_1430;
wire   [0:0] notrhs_fu_910_p2;
reg   [0:0] notrhs_reg_1435;
wire   [0:0] tmp_30_fu_470_p2;
reg   [0:0] tmp_30_reg_1440;
wire   [31:0] max_2_fu_967_p3;
reg    ap_sig_cseq_ST_st44_fsm_43;
reg    ap_sig_421;
wire   [10:0] tmp_3_fu_974_p1;
reg   [10:0] tmp_3_reg_1450;
reg    ap_sig_cseq_ST_st59_fsm_58;
reg    ap_sig_430;
reg   [4:0] tmp_14_reg_1456;
reg    ap_sig_cseq_ST_st60_fsm_59;
reg    ap_sig_439;
reg   [7:0] output_0_addr_reg_1461;
reg    ap_sig_cseq_ST_st73_fsm_72;
reg    ap_sig_448;
reg   [7:0] output_1_addr_reg_1466;
reg   [7:0] output_2_addr_reg_1471;
reg   [7:0] output_3_addr_reg_1476;
reg   [7:0] output_4_addr_reg_1481;
reg   [7:0] output_5_addr_reg_1486;
reg   [7:0] output_6_addr_reg_1491;
reg   [7:0] output_7_addr_reg_1496;
wire   [6:0] tmp_12_fu_1008_p3;
reg   [6:0] tmp_12_reg_1501;
wire   [6:0] tmp_13_fu_1015_p2;
reg   [6:0] tmp_13_reg_1506;
wire   [0:0] tmp_21_fu_1021_p2;
reg   [0:0] tmp_21_reg_1511;
reg   [4:0] m_reg_378;
reg   [8:0] phi_mul_reg_389;
reg   [3:0] x_reg_401;
reg   [3:0] y_reg_412;
reg    ap_sig_cseq_ST_st75_fsm_74;
reg    ap_sig_490;
reg   [31:0] max_reg_424;
reg   [1:0] c_reg_436;
reg   [31:0] max_1_reg_447;
reg   [1:0] r_reg_459;
wire   [63:0] newIndex3_fu_728_p1;
wire   [63:0] newIndex2_fu_996_p1;
reg    ap_sig_cseq_ST_st74_fsm_73;
reg    ap_sig_513;
wire  signed [10:0] arrayNo1_fu_1027_p1;
wire   [127:0] tmp_49_fu_1174_p2;
wire   [31:0] tmp_30_fu_470_p0;
wire   [5:0] m_cast_fu_510_p1;
wire   [3:0] tmp_2_fu_525_p0;
wire   [4:0] tmp_2_fu_525_p1;
wire   [4:0] tmp_5_fu_545_p3;
wire   [7:0] y_cast6_fu_557_p1;
wire   [7:0] tmp_fu_572_p2;
wire   [3:0] tmp3_fu_581_p0;
wire   [7:0] tmp3_fu_581_p1;
wire   [4:0] tmp_8_fu_590_p3;
wire   [25:0] mul1_fu_1195_p2;
wire   [8:0] r_cast4_fu_635_p1;
wire   [8:0] tmp1_fu_651_p2;
wire   [5:0] tmp5_fu_665_p0;
wire   [8:0] tmp5_fu_665_p1;
wire   [13:0] tmp2_fu_670_p2;
wire   [13:0] grp_fu_679_p0;
wire   [11:0] grp_fu_679_p1;
wire   [29:0] mul5_fu_1209_p2;
wire   [23:0] mul_fu_1202_p2;
wire   [8:0] grp_fu_722_p1;
wire   [10:0] grp_fu_722_p2;
wire  signed [10:0] arrayNo_fu_740_p1;
wire   [13:0] tmp_17_fu_747_p9;
wire   [8:0] tmp_19_fu_769_p3;
wire   [8:0] tmp_20_fu_776_p2;
wire   [127:0] tmp_17_fu_747_p10;
wire   [7:0] tmp_54_fu_788_p3;
wire   [7:0] tmp_55_fu_795_p1;
wire   [0:0] tmp_53_fu_782_p2;
wire   [7:0] tmp_57_fu_809_p2;
wire   [7:0] tmp_59_fu_821_p2;
reg   [127:0] tmp_56_fu_799_p4;
wire   [7:0] tmp_58_fu_815_p2;
wire   [7:0] tmp_60_fu_827_p3;
wire   [7:0] tmp_62_fu_843_p3;
wire   [127:0] tmp_61_fu_835_p3;
wire   [127:0] tmp_64_fu_857_p1;
wire   [127:0] tmp_65_fu_867_p1;
wire   [127:0] tmp_67_fu_870_p2;
wire   [127:0] tmp_68_fu_876_p2;
wire   [31:0] tmp_69_fu_881_p1;
wire   [7:0] tmp_23_fu_890_p4;
wire   [22:0] tmp_70_fu_900_p1;
wire   [31:0] max_1_to_int_fu_916_p1;
wire   [7:0] tmp_25_fu_920_p4;
wire   [22:0] tmp_71_fu_930_p1;
wire   [0:0] notrhs5_fu_944_p2;
wire   [0:0] notlhs4_fu_938_p2;
wire   [0:0] tmp_27_fu_934_p2;
wire   [0:0] tmp_28_fu_950_p2;
wire   [0:0] tmp_29_fu_956_p2;
wire   [0:0] tmp_31_fu_962_p2;
wire   [10:0] grp_fu_618_p2;
wire   [10:0] grp_fu_978_p0;
wire   [8:0] grp_fu_978_p1;
wire   [23:0] mul8_fu_1188_p2;
wire   [10:0] grp_fu_978_p2;
wire   [13:0] tmp_10_fu_1038_p9;
wire   [31:0] tmp_4_fu_1034_p1;
wire   [7:0] tmp_24_fu_1060_p1;
wire   [7:0] tmp_26_fu_1063_p1;
wire   [7:0] tmp_33_fu_1070_p2;
wire   [7:0] tmp_34_fu_1076_p3;
wire   [7:0] tmp_36_fu_1090_p3;
wire   [7:0] tmp_35_fu_1083_p3;
wire   [7:0] tmp_37_fu_1097_p2;
wire   [127:0] tmp_32_fu_1066_p1;
wire   [127:0] tmp_38_fu_1103_p1;
wire   [127:0] tmp_41_fu_1115_p2;
reg   [127:0] tmp_42_fu_1121_p4;
wire   [127:0] tmp_39_fu_1107_p1;
wire   [127:0] tmp_40_fu_1111_p1;
wire   [127:0] tmp_44_fu_1138_p2;
wire   [127:0] tmp_45_fu_1144_p2;
wire   [127:0] p_demorgan_fu_1150_p2;
wire   [127:0] tmp_10_fu_1038_p10;
wire   [127:0] tmp_46_fu_1156_p2;
wire   [127:0] tmp_43_fu_1131_p3;
wire   [127:0] tmp_47_fu_1162_p2;
wire   [127:0] tmp_48_fu_1168_p2;
wire   [12:0] mul8_fu_1188_p0;
wire   [10:0] mul8_fu_1188_p1;
wire   [13:0] mul1_fu_1195_p0;
wire   [11:0] mul1_fu_1195_p1;
wire   [10:0] mul_fu_1202_p0;
wire   [12:0] mul_fu_1202_p1;
wire   [13:0] mul5_fu_1209_p0;
wire   [15:0] mul5_fu_1209_p1;
reg    grp_fu_618_ap_start;
wire    grp_fu_618_ap_done;
reg    grp_fu_679_ap_start;
wire    grp_fu_679_ap_done;
reg    grp_fu_722_ap_start;
wire    grp_fu_722_ap_done;
reg    grp_fu_978_ap_start;
wire    grp_fu_978_ap_done;
reg   [74:0] ap_NS_fsm;
wire   [25:0] mul1_fu_1195_p10;
wire   [29:0] mul5_fu_1209_p00;
wire   [23:0] mul8_fu_1188_p10;
wire   [23:0] mul_fu_1202_p00;
wire   [11:0] tmp3_fu_581_p10;
wire   [13:0] tmp5_fu_665_p10;
wire   [7:0] tmp_2_fu_525_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 75'b1;
end

dut_fcmp_32ns_32ns_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
dut_fcmp_32ns_32ns_1_1_U20(
    .din0(tmp_30_fu_470_p0),
    .din1(max_1_reg_447),
    .opcode(ap_const_lv5_2),
    .dout(tmp_30_fu_470_p2)
);

dut_urem_12ns_12ns_11_16_seq #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 11 ))
dut_urem_12ns_12ns_11_16_seq_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_618_ap_start),
    .done(grp_fu_618_ap_done),
    .din0(o_index_reg_1297),
    .din1(ap_const_lv12_498),
    .ce(1'b1),
    .dout(grp_fu_618_p2)
);

dut_urem_14ns_12ns_11_18_seq #(
    .ID( 1 ),
    .NUM_STAGE( 18 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 11 ))
dut_urem_14ns_12ns_11_18_seq_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_679_ap_start),
    .done(grp_fu_679_ap_done),
    .din0(grp_fu_679_p0),
    .din1(grp_fu_679_p1),
    .ce(1'b1),
    .dout(grp_fu_679_p2)
);

dut_urem_11ns_9ns_11_15_seq #(
    .ID( 1 ),
    .NUM_STAGE( 15 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 11 ))
dut_urem_11ns_9ns_11_15_seq_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_722_ap_start),
    .done(grp_fu_722_ap_done),
    .din0(tmp_50_fu_706_p1),
    .din1(grp_fu_722_p1),
    .ce(1'b1),
    .dout(grp_fu_722_p2)
);

dut_mux_8to1_sel14_128_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 128 ),
    .din2_WIDTH( 128 ),
    .din3_WIDTH( 128 ),
    .din4_WIDTH( 128 ),
    .din5_WIDTH( 128 ),
    .din6_WIDTH( 128 ),
    .din7_WIDTH( 128 ),
    .din8_WIDTH( 128 ),
    .din9_WIDTH( 14 ),
    .dout_WIDTH( 128 ))
dut_mux_8to1_sel14_128_1_U24(
    .din1(input_0_q0),
    .din2(input_1_q0),
    .din3(input_2_q0),
    .din4(input_3_q0),
    .din5(input_4_q0),
    .din6(input_5_q0),
    .din7(input_6_q0),
    .din8(input_7_q0),
    .din9(tmp_17_fu_747_p9),
    .dout(tmp_17_fu_747_p10)
);

dut_urem_11ns_9ns_11_15_seq #(
    .ID( 1 ),
    .NUM_STAGE( 15 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 11 ))
dut_urem_11ns_9ns_11_15_seq_U25(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_978_ap_start),
    .done(grp_fu_978_ap_done),
    .din0(grp_fu_978_p0),
    .din1(grp_fu_978_p1),
    .ce(1'b1),
    .dout(grp_fu_978_p2)
);

dut_mux_8to1_sel14_128_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 128 ),
    .din2_WIDTH( 128 ),
    .din3_WIDTH( 128 ),
    .din4_WIDTH( 128 ),
    .din5_WIDTH( 128 ),
    .din6_WIDTH( 128 ),
    .din7_WIDTH( 128 ),
    .din8_WIDTH( 128 ),
    .din9_WIDTH( 14 ),
    .dout_WIDTH( 128 ))
dut_mux_8to1_sel14_128_1_U26(
    .din1(output_0_q0),
    .din2(output_1_q0),
    .din3(output_2_q0),
    .din4(output_3_q0),
    .din5(output_4_q0),
    .din6(output_5_q0),
    .din7(output_6_q0),
    .din8(output_7_q0),
    .din9(tmp_10_fu_1038_p9),
    .dout(tmp_10_fu_1038_p10)
);

dut_mul_mul_13ns_11ns_24_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 24 ))
dut_mul_mul_13ns_11ns_24_1_U27(
    .din0(mul8_fu_1188_p0),
    .din1(mul8_fu_1188_p1),
    .dout(mul8_fu_1188_p2)
);

dut_mul_mul_14ns_12ns_26_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 26 ))
dut_mul_mul_14ns_12ns_26_1_U28(
    .din0(mul1_fu_1195_p0),
    .din1(mul1_fu_1195_p1),
    .dout(mul1_fu_1195_p2)
);

dut_mul_mul_11ns_13ns_24_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 24 ))
dut_mul_mul_11ns_13ns_24_1_U29(
    .din0(mul_fu_1202_p0),
    .din1(mul_fu_1202_p1),
    .dout(mul_fu_1202_p2)
);

dut_mul_mul_14ns_16ns_30_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
dut_mul_mul_14ns_16ns_30_1_U30(
    .din0(mul5_fu_1209_p0),
    .din1(mul5_fu_1209_p1),
    .dout(mul5_fu_1209_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st7_fsm_6) & ~(1'b0 == exitcond_fu_639_p2))) begin
        c_reg_436 <= c_1_reg_1316;
    end else if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        c_reg_436 <= ap_const_lv2_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & ~(1'b0 == exitcond3_fu_534_p2))) begin
        m_reg_378 <= m_1_reg_1256;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        m_reg_378 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st44_fsm_43)) begin
        max_1_reg_447 <= max_2_fu_967_p3;
    end else if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & (1'b0 == exitcond1_fu_606_p2))) begin
        max_1_reg_447 <= max_reg_424;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st7_fsm_6) & ~(1'b0 == exitcond_fu_639_p2))) begin
        max_reg_424 <= max_1_reg_447;
    end else if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        max_reg_424 <= ap_const_lv32_800000;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & ~(1'b0 == exitcond3_fu_534_p2))) begin
        phi_mul_reg_389 <= next_mul_reg_1248;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        phi_mul_reg_389 <= ap_const_lv9_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st44_fsm_43)) begin
        r_reg_459 <= r_1_reg_1329;
    end else if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & (1'b0 == exitcond1_fu_606_p2))) begin
        r_reg_459 <= ap_const_lv2_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & ~(1'b0 == exitcond2_fu_561_p2))) begin
        x_reg_401 <= x_1_reg_1274;
    end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(tmp_1_fu_514_p2 == 1'b0))) begin
        x_reg_401 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st75_fsm_74)) begin
        y_reg_412 <= y_1_reg_1287;
    end else if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & (1'b0 == exitcond3_fu_534_p2))) begin
        y_reg_412 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        I_cast2_reg_1238[5 : 0] <= I_cast2_fu_493_p1[5 : 0];
        I_cast_reg_1243[5 : 0] <= I_cast_fu_497_p1[5 : 0];
        O_cast10_cast1_reg_1228[3 : 0] <= O_cast10_cast1_fu_485_p1[3 : 0];
        O_cast10_cast_reg_1233[3 : 0] <= O_cast10_cast_fu_489_p1[3 : 0];
        O_reg_1222 <= {{I[ap_const_lv32_4 : ap_const_lv32_1]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        c_1_reg_1316 <= c_1_fu_612_p2;
        c_cast5_reg_1308[1 : 0] <= c_cast5_fu_602_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        i_index_reg_1344 <= i_index_fu_674_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        m_1_reg_1256 <= m_1_fu_519_p2;
        next_mul_reg_1248 <= next_mul_fu_501_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st43_fsm_42)) begin
        notlhs_reg_1430 <= notlhs_fu_904_p2;
        notrhs_reg_1435 <= notrhs_fu_910_p2;
        tmp_22_reg_1425 <= tmp_22_fu_885_p1;
        tmp_30_reg_1440 <= tmp_30_fu_470_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        o_index_reg_1297 <= o_index_fu_586_p2;
        tmp_8_cast_reg_1303[4 : 1] <= tmp_8_cast_fu_598_p1[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st73_fsm_72)) begin
        output_0_addr_reg_1461 <= newIndex2_fu_996_p1;
        output_1_addr_reg_1466 <= newIndex2_fu_996_p1;
        output_2_addr_reg_1471 <= newIndex2_fu_996_p1;
        output_3_addr_reg_1476 <= newIndex2_fu_996_p1;
        output_4_addr_reg_1481 <= newIndex2_fu_996_p1;
        output_5_addr_reg_1486 <= newIndex2_fu_996_p1;
        output_6_addr_reg_1491 <= newIndex2_fu_996_p1;
        output_7_addr_reg_1496 <= newIndex2_fu_996_p1;
        tmp_12_reg_1501[6 : 5] <= tmp_12_fu_1008_p3[6 : 5];
        tmp_13_reg_1506[6 : 5] <= tmp_13_fu_1015_p2[6 : 5];
        tmp_21_reg_1511 <= tmp_21_fu_1021_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        r_1_reg_1329 <= r_1_fu_645_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & (1'b0 == exitcond2_fu_561_p2))) begin
        tmp3_reg_1292 <= tmp3_fu_581_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st7_fsm_6) & (1'b0 == exitcond_fu_639_p2))) begin
        tmp4_reg_1334 <= tmp4_fu_657_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        tmp5_reg_1339 <= tmp5_fu_665_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & ~(1'b0 == exitcond1_fu_606_p2))) begin
        tmp_11_reg_1321 <= {{mul1_fu_1195_p2[ap_const_lv32_18 : ap_const_lv32_17]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st60_fsm_59)) begin
        tmp_14_reg_1456 <= {{mul8_fu_1188_p2[ap_const_lv32_17 : ap_const_lv32_13]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st26_fsm_25)) begin
        tmp_16_reg_1360 <= grp_fu_679_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        tmp_18_reg_1350 <= {{mul5_fu_1209_p2[ap_const_lv32_1C : ap_const_lv32_19]}};
        tmp_52_reg_1355 <= {{mul5_fu_1209_p2[ap_const_lv32_1B : ap_const_lv32_19]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(tmp_1_fu_514_p2 == 1'b0))) begin
        tmp_2_reg_1261 <= tmp_2_fu_525_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st59_fsm_58)) begin
        tmp_3_reg_1450 <= tmp_3_fu_974_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st27_fsm_26)) begin
        tmp_51_reg_1370 <= {{mul_fu_1202_p2[ap_const_lv32_17 : ap_const_lv32_13]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & (1'b0 == exitcond3_fu_534_p2))) begin
        tmp_5_cast_reg_1279[4 : 1] <= tmp_5_cast_fu_553_p1[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st42_fsm_41)) begin
        tmp_63_reg_1415[7 : 1] <= tmp_63_fu_851_p2[7 : 1];
        tmp_66_reg_1420 <= tmp_66_fu_861_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        x_1_reg_1274 <= x_1_fu_539_p2;
        x_cast7_reg_1266[3 : 0] <= x_cast7_fu_530_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        y_1_reg_1287 <= y_1_fu_566_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0)) | ((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (tmp_1_fu_514_p2 == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (tmp_1_fu_514_p2 == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_341) begin
        ap_sig_cseq_ST_st10_fsm_9 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_9 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_92) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_352) begin
        ap_sig_cseq_ST_st26_fsm_25 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st26_fsm_25 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_361) begin
        ap_sig_cseq_ST_st27_fsm_26 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st27_fsm_26 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_233) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_251) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_372) begin
        ap_sig_cseq_ST_st41_fsm_40 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st41_fsm_40 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_395) begin
        ap_sig_cseq_ST_st42_fsm_41 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st42_fsm_41 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_406) begin
        ap_sig_cseq_ST_st43_fsm_42 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st43_fsm_42 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_421) begin
        ap_sig_cseq_ST_st44_fsm_43 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st44_fsm_43 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_267) begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_430) begin
        ap_sig_cseq_ST_st59_fsm_58 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st59_fsm_58 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_281) begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_439) begin
        ap_sig_cseq_ST_st60_fsm_59 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st60_fsm_59 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_292) begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_448) begin
        ap_sig_cseq_ST_st73_fsm_72 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st73_fsm_72 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_513) begin
        ap_sig_cseq_ST_st74_fsm_73 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st74_fsm_73 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_490) begin
        ap_sig_cseq_ST_st75_fsm_74 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st75_fsm_74 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_309) begin
        ap_sig_cseq_ST_st7_fsm_6 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_323) begin
        ap_sig_cseq_ST_st8_fsm_7 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_332) begin
        ap_sig_cseq_ST_st9_fsm_8 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & ~(1'b0 == exitcond1_fu_606_p2))) begin
        grp_fu_618_ap_start = 1'b1;
    end else begin
        grp_fu_618_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        grp_fu_679_ap_start = 1'b1;
    end else begin
        grp_fu_679_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st27_fsm_26)) begin
        grp_fu_722_ap_start = 1'b1;
    end else begin
        grp_fu_722_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st59_fsm_58)) begin
        grp_fu_978_ap_start = 1'b1;
    end else begin
        grp_fu_978_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st41_fsm_40)) begin
        input_0_ce0 = 1'b1;
    end else begin
        input_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st41_fsm_40)) begin
        input_1_ce0 = 1'b1;
    end else begin
        input_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st41_fsm_40)) begin
        input_2_ce0 = 1'b1;
    end else begin
        input_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st41_fsm_40)) begin
        input_3_ce0 = 1'b1;
    end else begin
        input_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st41_fsm_40)) begin
        input_4_ce0 = 1'b1;
    end else begin
        input_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st41_fsm_40)) begin
        input_5_ce0 = 1'b1;
    end else begin
        input_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st41_fsm_40)) begin
        input_6_ce0 = 1'b1;
    end else begin
        input_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st41_fsm_40)) begin
        input_7_ce0 = 1'b1;
    end else begin
        input_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st74_fsm_73)) begin
        output_0_address0 = output_0_addr_reg_1461;
    end else if ((1'b1 == ap_sig_cseq_ST_st73_fsm_72)) begin
        output_0_address0 = newIndex2_fu_996_p1;
    end else begin
        output_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st73_fsm_72) | (1'b1 == ap_sig_cseq_ST_st74_fsm_73))) begin
        output_0_ce0 = 1'b1;
    end else begin
        output_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st74_fsm_73) & (arrayNo1_fu_1027_p1 == ap_const_lv11_0))) begin
        output_0_we0 = 1'b1;
    end else begin
        output_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st74_fsm_73)) begin
        output_1_address0 = output_1_addr_reg_1466;
    end else if ((1'b1 == ap_sig_cseq_ST_st73_fsm_72)) begin
        output_1_address0 = newIndex2_fu_996_p1;
    end else begin
        output_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st73_fsm_72) | (1'b1 == ap_sig_cseq_ST_st74_fsm_73))) begin
        output_1_ce0 = 1'b1;
    end else begin
        output_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st74_fsm_73) & (arrayNo1_fu_1027_p1 == ap_const_lv11_1))) begin
        output_1_we0 = 1'b1;
    end else begin
        output_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st74_fsm_73)) begin
        output_2_address0 = output_2_addr_reg_1471;
    end else if ((1'b1 == ap_sig_cseq_ST_st73_fsm_72)) begin
        output_2_address0 = newIndex2_fu_996_p1;
    end else begin
        output_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st73_fsm_72) | (1'b1 == ap_sig_cseq_ST_st74_fsm_73))) begin
        output_2_ce0 = 1'b1;
    end else begin
        output_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st74_fsm_73) & (arrayNo1_fu_1027_p1 == ap_const_lv11_2))) begin
        output_2_we0 = 1'b1;
    end else begin
        output_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st74_fsm_73)) begin
        output_3_address0 = output_3_addr_reg_1476;
    end else if ((1'b1 == ap_sig_cseq_ST_st73_fsm_72)) begin
        output_3_address0 = newIndex2_fu_996_p1;
    end else begin
        output_3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st73_fsm_72) | (1'b1 == ap_sig_cseq_ST_st74_fsm_73))) begin
        output_3_ce0 = 1'b1;
    end else begin
        output_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st74_fsm_73) & (arrayNo1_fu_1027_p1 == ap_const_lv11_3))) begin
        output_3_we0 = 1'b1;
    end else begin
        output_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st74_fsm_73)) begin
        output_4_address0 = output_4_addr_reg_1481;
    end else if ((1'b1 == ap_sig_cseq_ST_st73_fsm_72)) begin
        output_4_address0 = newIndex2_fu_996_p1;
    end else begin
        output_4_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st73_fsm_72) | (1'b1 == ap_sig_cseq_ST_st74_fsm_73))) begin
        output_4_ce0 = 1'b1;
    end else begin
        output_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st74_fsm_73) & (arrayNo1_fu_1027_p1 == ap_const_lv11_4))) begin
        output_4_we0 = 1'b1;
    end else begin
        output_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st74_fsm_73)) begin
        output_5_address0 = output_5_addr_reg_1486;
    end else if ((1'b1 == ap_sig_cseq_ST_st73_fsm_72)) begin
        output_5_address0 = newIndex2_fu_996_p1;
    end else begin
        output_5_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st73_fsm_72) | (1'b1 == ap_sig_cseq_ST_st74_fsm_73))) begin
        output_5_ce0 = 1'b1;
    end else begin
        output_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st74_fsm_73) & (arrayNo1_fu_1027_p1 == ap_const_lv11_5))) begin
        output_5_we0 = 1'b1;
    end else begin
        output_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st74_fsm_73)) begin
        output_6_address0 = output_6_addr_reg_1491;
    end else if ((1'b1 == ap_sig_cseq_ST_st73_fsm_72)) begin
        output_6_address0 = newIndex2_fu_996_p1;
    end else begin
        output_6_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st73_fsm_72) | (1'b1 == ap_sig_cseq_ST_st74_fsm_73))) begin
        output_6_ce0 = 1'b1;
    end else begin
        output_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st74_fsm_73) & (arrayNo1_fu_1027_p1 == ap_const_lv11_6))) begin
        output_6_we0 = 1'b1;
    end else begin
        output_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st74_fsm_73)) begin
        output_7_address0 = output_7_addr_reg_1496;
    end else if ((1'b1 == ap_sig_cseq_ST_st73_fsm_72)) begin
        output_7_address0 = newIndex2_fu_996_p1;
    end else begin
        output_7_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st73_fsm_72) | (1'b1 == ap_sig_cseq_ST_st74_fsm_73))) begin
        output_7_ce0 = 1'b1;
    end else begin
        output_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st74_fsm_73) & ~(arrayNo1_fu_1027_p1 == ap_const_lv11_0) & ~(arrayNo1_fu_1027_p1 == ap_const_lv11_1) & ~(arrayNo1_fu_1027_p1 == ap_const_lv11_2) & ~(arrayNo1_fu_1027_p1 == ap_const_lv11_3) & ~(arrayNo1_fu_1027_p1 == ap_const_lv11_4) & ~(arrayNo1_fu_1027_p1 == ap_const_lv11_5) & ~(arrayNo1_fu_1027_p1 == ap_const_lv11_6))) begin
        output_7_we0 = 1'b1;
    end else begin
        output_7_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if ((tmp_1_fu_514_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : begin
            if (~(1'b0 == exitcond3_fu_534_p2)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st4_fsm_3 : begin
            if (~(1'b0 == exitcond2_fu_561_p2)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        end
        ap_ST_st5_fsm_4 : begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : begin
            if ((1'b0 == exitcond1_fu_606_p2)) begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end else begin
                ap_NS_fsm = ap_ST_st45_fsm_44;
            end
        end
        ap_ST_st7_fsm_6 : begin
            if (~(1'b0 == exitcond_fu_639_p2)) begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end else begin
                ap_NS_fsm = ap_ST_st8_fsm_7;
            end
        end
        ap_ST_st8_fsm_7 : begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : begin
            ap_NS_fsm = ap_ST_st14_fsm_13;
        end
        ap_ST_st14_fsm_13 : begin
            ap_NS_fsm = ap_ST_st15_fsm_14;
        end
        ap_ST_st15_fsm_14 : begin
            ap_NS_fsm = ap_ST_st16_fsm_15;
        end
        ap_ST_st16_fsm_15 : begin
            ap_NS_fsm = ap_ST_st17_fsm_16;
        end
        ap_ST_st17_fsm_16 : begin
            ap_NS_fsm = ap_ST_st18_fsm_17;
        end
        ap_ST_st18_fsm_17 : begin
            ap_NS_fsm = ap_ST_st19_fsm_18;
        end
        ap_ST_st19_fsm_18 : begin
            ap_NS_fsm = ap_ST_st20_fsm_19;
        end
        ap_ST_st20_fsm_19 : begin
            ap_NS_fsm = ap_ST_st21_fsm_20;
        end
        ap_ST_st21_fsm_20 : begin
            ap_NS_fsm = ap_ST_st22_fsm_21;
        end
        ap_ST_st22_fsm_21 : begin
            ap_NS_fsm = ap_ST_st23_fsm_22;
        end
        ap_ST_st23_fsm_22 : begin
            ap_NS_fsm = ap_ST_st24_fsm_23;
        end
        ap_ST_st24_fsm_23 : begin
            ap_NS_fsm = ap_ST_st25_fsm_24;
        end
        ap_ST_st25_fsm_24 : begin
            ap_NS_fsm = ap_ST_st26_fsm_25;
        end
        ap_ST_st26_fsm_25 : begin
            ap_NS_fsm = ap_ST_st27_fsm_26;
        end
        ap_ST_st27_fsm_26 : begin
            ap_NS_fsm = ap_ST_st28_fsm_27;
        end
        ap_ST_st28_fsm_27 : begin
            ap_NS_fsm = ap_ST_st29_fsm_28;
        end
        ap_ST_st29_fsm_28 : begin
            ap_NS_fsm = ap_ST_st30_fsm_29;
        end
        ap_ST_st30_fsm_29 : begin
            ap_NS_fsm = ap_ST_st31_fsm_30;
        end
        ap_ST_st31_fsm_30 : begin
            ap_NS_fsm = ap_ST_st32_fsm_31;
        end
        ap_ST_st32_fsm_31 : begin
            ap_NS_fsm = ap_ST_st33_fsm_32;
        end
        ap_ST_st33_fsm_32 : begin
            ap_NS_fsm = ap_ST_st34_fsm_33;
        end
        ap_ST_st34_fsm_33 : begin
            ap_NS_fsm = ap_ST_st35_fsm_34;
        end
        ap_ST_st35_fsm_34 : begin
            ap_NS_fsm = ap_ST_st36_fsm_35;
        end
        ap_ST_st36_fsm_35 : begin
            ap_NS_fsm = ap_ST_st37_fsm_36;
        end
        ap_ST_st37_fsm_36 : begin
            ap_NS_fsm = ap_ST_st38_fsm_37;
        end
        ap_ST_st38_fsm_37 : begin
            ap_NS_fsm = ap_ST_st39_fsm_38;
        end
        ap_ST_st39_fsm_38 : begin
            ap_NS_fsm = ap_ST_st40_fsm_39;
        end
        ap_ST_st40_fsm_39 : begin
            ap_NS_fsm = ap_ST_st41_fsm_40;
        end
        ap_ST_st41_fsm_40 : begin
            ap_NS_fsm = ap_ST_st42_fsm_41;
        end
        ap_ST_st42_fsm_41 : begin
            ap_NS_fsm = ap_ST_st43_fsm_42;
        end
        ap_ST_st43_fsm_42 : begin
            ap_NS_fsm = ap_ST_st44_fsm_43;
        end
        ap_ST_st44_fsm_43 : begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st45_fsm_44 : begin
            ap_NS_fsm = ap_ST_st46_fsm_45;
        end
        ap_ST_st46_fsm_45 : begin
            ap_NS_fsm = ap_ST_st47_fsm_46;
        end
        ap_ST_st47_fsm_46 : begin
            ap_NS_fsm = ap_ST_st48_fsm_47;
        end
        ap_ST_st48_fsm_47 : begin
            ap_NS_fsm = ap_ST_st49_fsm_48;
        end
        ap_ST_st49_fsm_48 : begin
            ap_NS_fsm = ap_ST_st50_fsm_49;
        end
        ap_ST_st50_fsm_49 : begin
            ap_NS_fsm = ap_ST_st51_fsm_50;
        end
        ap_ST_st51_fsm_50 : begin
            ap_NS_fsm = ap_ST_st52_fsm_51;
        end
        ap_ST_st52_fsm_51 : begin
            ap_NS_fsm = ap_ST_st53_fsm_52;
        end
        ap_ST_st53_fsm_52 : begin
            ap_NS_fsm = ap_ST_st54_fsm_53;
        end
        ap_ST_st54_fsm_53 : begin
            ap_NS_fsm = ap_ST_st55_fsm_54;
        end
        ap_ST_st55_fsm_54 : begin
            ap_NS_fsm = ap_ST_st56_fsm_55;
        end
        ap_ST_st56_fsm_55 : begin
            ap_NS_fsm = ap_ST_st57_fsm_56;
        end
        ap_ST_st57_fsm_56 : begin
            ap_NS_fsm = ap_ST_st58_fsm_57;
        end
        ap_ST_st58_fsm_57 : begin
            ap_NS_fsm = ap_ST_st59_fsm_58;
        end
        ap_ST_st59_fsm_58 : begin
            ap_NS_fsm = ap_ST_st60_fsm_59;
        end
        ap_ST_st60_fsm_59 : begin
            ap_NS_fsm = ap_ST_st61_fsm_60;
        end
        ap_ST_st61_fsm_60 : begin
            ap_NS_fsm = ap_ST_st62_fsm_61;
        end
        ap_ST_st62_fsm_61 : begin
            ap_NS_fsm = ap_ST_st63_fsm_62;
        end
        ap_ST_st63_fsm_62 : begin
            ap_NS_fsm = ap_ST_st64_fsm_63;
        end
        ap_ST_st64_fsm_63 : begin
            ap_NS_fsm = ap_ST_st65_fsm_64;
        end
        ap_ST_st65_fsm_64 : begin
            ap_NS_fsm = ap_ST_st66_fsm_65;
        end
        ap_ST_st66_fsm_65 : begin
            ap_NS_fsm = ap_ST_st67_fsm_66;
        end
        ap_ST_st67_fsm_66 : begin
            ap_NS_fsm = ap_ST_st68_fsm_67;
        end
        ap_ST_st68_fsm_67 : begin
            ap_NS_fsm = ap_ST_st69_fsm_68;
        end
        ap_ST_st69_fsm_68 : begin
            ap_NS_fsm = ap_ST_st70_fsm_69;
        end
        ap_ST_st70_fsm_69 : begin
            ap_NS_fsm = ap_ST_st71_fsm_70;
        end
        ap_ST_st71_fsm_70 : begin
            ap_NS_fsm = ap_ST_st72_fsm_71;
        end
        ap_ST_st72_fsm_71 : begin
            ap_NS_fsm = ap_ST_st73_fsm_72;
        end
        ap_ST_st73_fsm_72 : begin
            ap_NS_fsm = ap_ST_st74_fsm_73;
        end
        ap_ST_st74_fsm_73 : begin
            ap_NS_fsm = ap_ST_st75_fsm_74;
        end
        ap_ST_st75_fsm_74 : begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign I_cast2_fu_493_p1 = I;

assign I_cast_fu_497_p1 = I;

assign O_cast10_cast1_fu_485_p1 = O_fu_475_p4;

assign O_cast10_cast_fu_489_p1 = O_fu_475_p4;

assign O_fu_475_p4 = {{I[ap_const_lv32_4 : ap_const_lv32_1]}};

always @ (*) begin
    ap_sig_233 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_251 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

always @ (*) begin
    ap_sig_267 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

always @ (*) begin
    ap_sig_281 = (1'b1 == ap_CS_fsm[ap_const_lv32_4]);
end

always @ (*) begin
    ap_sig_292 = (1'b1 == ap_CS_fsm[ap_const_lv32_5]);
end

always @ (*) begin
    ap_sig_309 = (1'b1 == ap_CS_fsm[ap_const_lv32_6]);
end

always @ (*) begin
    ap_sig_323 = (1'b1 == ap_CS_fsm[ap_const_lv32_7]);
end

always @ (*) begin
    ap_sig_332 = (1'b1 == ap_CS_fsm[ap_const_lv32_8]);
end

always @ (*) begin
    ap_sig_341 = (1'b1 == ap_CS_fsm[ap_const_lv32_9]);
end

always @ (*) begin
    ap_sig_352 = (1'b1 == ap_CS_fsm[ap_const_lv32_19]);
end

always @ (*) begin
    ap_sig_361 = (1'b1 == ap_CS_fsm[ap_const_lv32_1A]);
end

always @ (*) begin
    ap_sig_372 = (1'b1 == ap_CS_fsm[ap_const_lv32_28]);
end

always @ (*) begin
    ap_sig_395 = (1'b1 == ap_CS_fsm[ap_const_lv32_29]);
end

always @ (*) begin
    ap_sig_406 = (1'b1 == ap_CS_fsm[ap_const_lv32_2A]);
end

always @ (*) begin
    ap_sig_421 = (1'b1 == ap_CS_fsm[ap_const_lv32_2B]);
end

always @ (*) begin
    ap_sig_430 = (1'b1 == ap_CS_fsm[ap_const_lv32_3A]);
end

always @ (*) begin
    ap_sig_439 = (1'b1 == ap_CS_fsm[ap_const_lv32_3B]);
end

always @ (*) begin
    ap_sig_448 = (1'b1 == ap_CS_fsm[ap_const_lv32_48]);
end

always @ (*) begin
    ap_sig_490 = (1'b1 == ap_CS_fsm[ap_const_lv32_4A]);
end

always @ (*) begin
    ap_sig_513 = (1'b1 == ap_CS_fsm[ap_const_lv32_49]);
end

always @ (*) begin
    ap_sig_92 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

assign arrayNo1_fu_1027_p1 = $signed(tmp_14_reg_1456);

assign arrayNo_fu_740_p1 = $signed(tmp_51_reg_1370);

assign c_1_fu_612_p2 = (c_reg_436 + ap_const_lv2_1);

assign c_cast5_fu_602_p1 = c_reg_436;

assign exitcond1_fu_606_p2 = ((c_reg_436 == ap_const_lv2_2) ? 1'b1 : 1'b0);

assign exitcond2_fu_561_p2 = ((y_reg_412 == O_reg_1222) ? 1'b1 : 1'b0);

assign exitcond3_fu_534_p2 = ((x_reg_401 == O_reg_1222) ? 1'b1 : 1'b0);

assign exitcond_fu_639_p2 = ((r_reg_459 == ap_const_lv2_2) ? 1'b1 : 1'b0);

assign grp_fu_679_p0 = (c_cast5_reg_1308 + tmp2_fu_670_p2);

assign grp_fu_679_p1 = ap_const_lv14_498;

assign grp_fu_722_p1 = ap_const_lv11_93;

assign grp_fu_978_p0 = grp_fu_618_p2[10:0];

assign grp_fu_978_p1 = ap_const_lv11_93;

assign i_index_fu_674_p2 = (c_cast5_reg_1308 + tmp2_fu_670_p2);

assign input_0_address0 = newIndex3_fu_728_p1;

assign input_1_address0 = newIndex3_fu_728_p1;

assign input_2_address0 = newIndex3_fu_728_p1;

assign input_3_address0 = newIndex3_fu_728_p1;

assign input_4_address0 = newIndex3_fu_728_p1;

assign input_5_address0 = newIndex3_fu_728_p1;

assign input_6_address0 = newIndex3_fu_728_p1;

assign input_7_address0 = newIndex3_fu_728_p1;

assign m_1_fu_519_p2 = (m_reg_378 + ap_const_lv5_1);

assign m_cast_fu_510_p1 = m_reg_378;

assign max_1_to_int_fu_916_p1 = max_1_reg_447;

assign max_2_fu_967_p3 = ((tmp_31_fu_962_p2[0:0] === 1'b1) ? tmp_22_reg_1425 : max_1_reg_447);

assign mul1_fu_1195_p0 = ap_const_lv26_1BDE;

assign mul1_fu_1195_p1 = mul1_fu_1195_p10;

assign mul1_fu_1195_p10 = o_index_reg_1297;

assign mul5_fu_1209_p0 = mul5_fu_1209_p00;

assign mul5_fu_1209_p00 = i_index_reg_1344;

assign mul5_fu_1209_p1 = ap_const_lv30_6F75;

assign mul8_fu_1188_p0 = ap_const_lv24_DEF;

assign mul8_fu_1188_p1 = mul8_fu_1188_p10;

assign mul8_fu_1188_p10 = tmp_3_reg_1450;

assign mul_fu_1202_p0 = mul_fu_1202_p00;

assign mul_fu_1202_p00 = tmp_50_fu_706_p1;

assign mul_fu_1202_p1 = ap_const_lv24_DEF;

assign newIndex2_fu_996_p1 = grp_fu_978_p2;

assign newIndex3_fu_728_p1 = grp_fu_722_p2;

assign next_mul_fu_501_p2 = (phi_mul_reg_389 + I_cast2_reg_1238);

assign notlhs4_fu_938_p2 = ((tmp_25_fu_920_p4 != ap_const_lv8_FF) ? 1'b1 : 1'b0);

assign notlhs_fu_904_p2 = ((tmp_23_fu_890_p4 != ap_const_lv8_FF) ? 1'b1 : 1'b0);

assign notrhs5_fu_944_p2 = ((tmp_71_fu_930_p1 == ap_const_lv23_0) ? 1'b1 : 1'b0);

assign notrhs_fu_910_p2 = ((tmp_70_fu_900_p1 == ap_const_lv23_0) ? 1'b1 : 1'b0);

assign o_index_fu_586_p2 = (x_cast7_reg_1266 + tmp3_reg_1292);

assign output_0_d0 = tmp_49_fu_1174_p2;

assign output_1_d0 = tmp_49_fu_1174_p2;

assign output_2_d0 = tmp_49_fu_1174_p2;

assign output_3_d0 = tmp_49_fu_1174_p2;

assign output_4_d0 = tmp_49_fu_1174_p2;

assign output_5_d0 = tmp_49_fu_1174_p2;

assign output_6_d0 = tmp_49_fu_1174_p2;

assign output_7_d0 = tmp_49_fu_1174_p2;

assign p_demorgan_fu_1150_p2 = (tmp_44_fu_1138_p2 & tmp_45_fu_1144_p2);

assign r_1_fu_645_p2 = (r_reg_459 + ap_const_lv2_1);

assign r_cast4_fu_635_p1 = r_reg_459;

assign tmp1_fu_651_p2 = (r_cast4_fu_635_p1 + phi_mul_reg_389);

assign tmp2_fu_670_p2 = (tmp5_reg_1339 + tmp_5_cast_reg_1279);

assign tmp3_fu_581_p0 = O_cast10_cast1_reg_1228;

assign tmp3_fu_581_p1 = tmp3_fu_581_p10;

assign tmp3_fu_581_p10 = tmp_fu_572_p2;

assign tmp3_fu_581_p2 = (tmp3_fu_581_p0 * tmp3_fu_581_p1);

assign tmp4_fu_657_p2 = (tmp_8_cast_reg_1303 + tmp1_fu_651_p2);

assign tmp5_fu_665_p0 = I_cast_reg_1243;

assign tmp5_fu_665_p1 = tmp5_fu_665_p10;

assign tmp5_fu_665_p10 = tmp4_reg_1334;

assign tmp5_fu_665_p2 = (tmp5_fu_665_p0 * tmp5_fu_665_p1);

assign tmp_10_fu_1038_p9 = $unsigned(arrayNo1_fu_1027_p1);

assign tmp_12_fu_1008_p3 = {{tmp_11_reg_1321}, {ap_const_lv5_0}};

assign tmp_13_fu_1015_p2 = (tmp_12_fu_1008_p3 | ap_const_lv7_1F);

assign tmp_17_fu_747_p9 = $unsigned(arrayNo_fu_740_p1);

assign tmp_19_fu_769_p3 = {{tmp_18_reg_1350}, {ap_const_lv5_0}};

assign tmp_1_fu_514_p2 = (($signed(m_cast_fu_510_p1) < $signed(M)) ? 1'b1 : 1'b0);

assign tmp_20_fu_776_p2 = (tmp_19_fu_769_p3 | ap_const_lv9_1F);

assign tmp_21_fu_1021_p2 = ((tmp_12_fu_1008_p3 > tmp_13_fu_1015_p2) ? 1'b1 : 1'b0);

assign tmp_22_fu_885_p1 = tmp_69_fu_881_p1;

assign tmp_23_fu_890_p4 = {{tmp_68_fu_876_p2[ap_const_lv32_1E : ap_const_lv32_17]}};

assign tmp_24_fu_1060_p1 = tmp_12_reg_1501;

assign tmp_25_fu_920_p4 = {{max_1_to_int_fu_916_p1[ap_const_lv32_1E : ap_const_lv32_17]}};

assign tmp_26_fu_1063_p1 = tmp_13_reg_1506;

assign tmp_27_fu_934_p2 = (notrhs_reg_1435 | notlhs_reg_1430);

assign tmp_28_fu_950_p2 = (notrhs5_fu_944_p2 | notlhs4_fu_938_p2);

assign tmp_29_fu_956_p2 = (tmp_27_fu_934_p2 & tmp_28_fu_950_p2);

assign tmp_2_fu_525_p0 = O_cast10_cast_reg_1233;

assign tmp_2_fu_525_p1 = tmp_2_fu_525_p10;

assign tmp_2_fu_525_p10 = m_reg_378;

assign tmp_2_fu_525_p2 = (tmp_2_fu_525_p0 * tmp_2_fu_525_p1);

assign tmp_30_fu_470_p0 = tmp_69_fu_881_p1;

assign tmp_31_fu_962_p2 = (tmp_29_fu_956_p2 & tmp_30_reg_1440);

assign tmp_32_fu_1066_p1 = tmp_4_fu_1034_p1;

assign tmp_33_fu_1070_p2 = (tmp_24_fu_1060_p1 ^ ap_const_lv8_7F);

assign tmp_34_fu_1076_p3 = ((tmp_21_reg_1511[0:0] === 1'b1) ? tmp_24_fu_1060_p1 : tmp_26_fu_1063_p1);

assign tmp_35_fu_1083_p3 = ((tmp_21_reg_1511[0:0] === 1'b1) ? tmp_26_fu_1063_p1 : tmp_24_fu_1060_p1);

assign tmp_36_fu_1090_p3 = ((tmp_21_reg_1511[0:0] === 1'b1) ? tmp_33_fu_1070_p2 : tmp_24_fu_1060_p1);

assign tmp_37_fu_1097_p2 = (tmp_34_fu_1076_p3 ^ ap_const_lv8_7F);

assign tmp_38_fu_1103_p1 = tmp_36_fu_1090_p3;

assign tmp_39_fu_1107_p1 = tmp_35_fu_1083_p3;

assign tmp_3_fu_974_p1 = grp_fu_618_p2[10:0];

assign tmp_40_fu_1111_p1 = tmp_37_fu_1097_p2;

assign tmp_41_fu_1115_p2 = tmp_32_fu_1066_p1 << tmp_38_fu_1103_p1;

integer ap_tvar_int_0;

always @ (tmp_41_fu_1115_p2) begin
    for (ap_tvar_int_0 = 128 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > ap_const_lv32_7F - ap_const_lv32_0) begin
            tmp_42_fu_1121_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_42_fu_1121_p4[ap_tvar_int_0] = tmp_41_fu_1115_p2[ap_const_lv32_7F - ap_tvar_int_0];
        end
    end
end

assign tmp_43_fu_1131_p3 = ((tmp_21_reg_1511[0:0] === 1'b1) ? tmp_42_fu_1121_p4 : tmp_41_fu_1115_p2);

assign tmp_44_fu_1138_p2 = ap_const_lv128_lc_1 << tmp_39_fu_1107_p1;

assign tmp_45_fu_1144_p2 = ap_const_lv128_lc_1 >> tmp_40_fu_1111_p1;

assign tmp_46_fu_1156_p2 = (p_demorgan_fu_1150_p2 ^ ap_const_lv128_lc_1);

assign tmp_47_fu_1162_p2 = (tmp_10_fu_1038_p10 & tmp_46_fu_1156_p2);

assign tmp_48_fu_1168_p2 = (tmp_43_fu_1131_p3 & p_demorgan_fu_1150_p2);

assign tmp_49_fu_1174_p2 = (tmp_47_fu_1162_p2 | tmp_48_fu_1168_p2);

assign tmp_4_fu_1034_p1 = max_reg_424;

assign tmp_50_fu_706_p1 = tmp_16_reg_1360[10:0];

assign tmp_53_fu_782_p2 = ((tmp_19_fu_769_p3 > tmp_20_fu_776_p2) ? 1'b1 : 1'b0);

assign tmp_54_fu_788_p3 = {{tmp_52_reg_1355}, {ap_const_lv5_0}};

assign tmp_55_fu_795_p1 = tmp_20_fu_776_p2[7:0];

integer ap_tvar_int_1;

always @ (tmp_17_fu_747_p10) begin
    for (ap_tvar_int_1 = 128 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > ap_const_lv32_7F - ap_const_lv32_0) begin
            tmp_56_fu_799_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_56_fu_799_p4[ap_tvar_int_1] = tmp_17_fu_747_p10[ap_const_lv32_7F - ap_tvar_int_1];
        end
    end
end

assign tmp_57_fu_809_p2 = (tmp_54_fu_788_p3 - tmp_55_fu_795_p1);

assign tmp_58_fu_815_p2 = (ap_const_lv8_7F - tmp_54_fu_788_p3);

assign tmp_59_fu_821_p2 = (tmp_55_fu_795_p1 - tmp_54_fu_788_p3);

assign tmp_5_cast_fu_553_p1 = tmp_5_fu_545_p3;

assign tmp_5_fu_545_p3 = {{x_reg_401}, {1'b0}};

assign tmp_60_fu_827_p3 = ((tmp_53_fu_782_p2[0:0] === 1'b1) ? tmp_57_fu_809_p2 : tmp_59_fu_821_p2);

assign tmp_61_fu_835_p3 = ((tmp_53_fu_782_p2[0:0] === 1'b1) ? tmp_56_fu_799_p4 : tmp_17_fu_747_p10);

assign tmp_62_fu_843_p3 = ((tmp_53_fu_782_p2[0:0] === 1'b1) ? tmp_58_fu_815_p2 : tmp_54_fu_788_p3);

assign tmp_63_fu_851_p2 = (ap_const_lv8_7F - tmp_60_fu_827_p3);

assign tmp_64_fu_857_p1 = tmp_62_fu_843_p3;

assign tmp_65_fu_867_p1 = tmp_63_reg_1415;

assign tmp_66_fu_861_p2 = tmp_61_fu_835_p3 >> tmp_64_fu_857_p1;

assign tmp_67_fu_870_p2 = ap_const_lv128_lc_1 >> tmp_65_fu_867_p1;

assign tmp_68_fu_876_p2 = (tmp_66_reg_1420 & tmp_67_fu_870_p2);

assign tmp_69_fu_881_p1 = tmp_68_fu_876_p2[31:0];

assign tmp_70_fu_900_p1 = tmp_68_fu_876_p2[22:0];

assign tmp_71_fu_930_p1 = max_1_to_int_fu_916_p1[22:0];

assign tmp_8_cast_fu_598_p1 = tmp_8_fu_590_p3;

assign tmp_8_fu_590_p3 = {{y_reg_412}, {1'b0}};

assign tmp_fu_572_p2 = (tmp_2_reg_1261 + y_cast6_fu_557_p1);

assign x_1_fu_539_p2 = (x_reg_401 + ap_const_lv4_1);

assign x_cast7_fu_530_p1 = x_reg_401;

assign y_1_fu_566_p2 = (y_reg_412 + ap_const_lv4_1);

assign y_cast6_fu_557_p1 = y_reg_412;

always @ (posedge ap_clk) begin
    O_cast10_cast1_reg_1228[11:4] <= 8'b00000000;
    O_cast10_cast_reg_1233[7:4] <= 4'b0000;
    I_cast2_reg_1238[8:6] <= 3'b000;
    I_cast_reg_1243[13:6] <= 8'b00000000;
    x_cast7_reg_1266[11:4] <= 8'b00000000;
    tmp_5_cast_reg_1279[0] <= 1'b0;
    tmp_5_cast_reg_1279[13:5] <= 9'b000000000;
    tmp_8_cast_reg_1303[0] <= 1'b0;
    tmp_8_cast_reg_1303[8:5] <= 4'b0000;
    c_cast5_reg_1308[13:2] <= 12'b000000000000;
    tmp_63_reg_1415[0] <= 1'b0;
    tmp_12_reg_1501[4:0] <= 5'b00000;
    tmp_13_reg_1506[4:0] <= 5'b11111;
end

endmodule //dut_max_pool
