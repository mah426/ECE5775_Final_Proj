// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dut_conv1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0_address0,
        input_0_ce0,
        input_0_q0,
        input_1_address0,
        input_1_ce0,
        input_1_q0,
        input_2_address0,
        input_2_ce0,
        input_2_q0,
        input_3_address0,
        input_3_ce0,
        input_3_q0,
        input_4_address0,
        input_4_ce0,
        input_4_q0,
        input_5_address0,
        input_5_ce0,
        input_5_q0,
        input_6_address0,
        input_6_ce0,
        input_6_q0,
        input_7_address0,
        input_7_ce0,
        input_7_q0,
        output_0_address0,
        output_0_ce0,
        output_0_we0,
        output_0_d0,
        output_0_q0,
        output_1_address0,
        output_1_ce0,
        output_1_we0,
        output_1_d0,
        output_1_q0,
        output_2_address0,
        output_2_ce0,
        output_2_we0,
        output_2_d0,
        output_2_q0,
        output_3_address0,
        output_3_ce0,
        output_3_we0,
        output_3_d0,
        output_3_q0,
        output_4_address0,
        output_4_ce0,
        output_4_we0,
        output_4_d0,
        output_4_q0,
        output_5_address0,
        output_5_ce0,
        output_5_we0,
        output_5_d0,
        output_5_q0,
        output_6_address0,
        output_6_ce0,
        output_6_we0,
        output_6_d0,
        output_6_q0,
        output_7_address0,
        output_7_ce0,
        output_7_we0,
        output_7_d0,
        output_7_q0
);

parameter    ap_ST_st1_fsm_0 = 63'b1;
parameter    ap_ST_st2_fsm_1 = 63'b10;
parameter    ap_ST_st3_fsm_2 = 63'b100;
parameter    ap_ST_st4_fsm_3 = 63'b1000;
parameter    ap_ST_st5_fsm_4 = 63'b10000;
parameter    ap_ST_st6_fsm_5 = 63'b100000;
parameter    ap_ST_st7_fsm_6 = 63'b1000000;
parameter    ap_ST_st8_fsm_7 = 63'b10000000;
parameter    ap_ST_st9_fsm_8 = 63'b100000000;
parameter    ap_ST_st10_fsm_9 = 63'b1000000000;
parameter    ap_ST_st11_fsm_10 = 63'b10000000000;
parameter    ap_ST_st12_fsm_11 = 63'b100000000000;
parameter    ap_ST_st13_fsm_12 = 63'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 63'b10000000000000;
parameter    ap_ST_st15_fsm_14 = 63'b100000000000000;
parameter    ap_ST_st16_fsm_15 = 63'b1000000000000000;
parameter    ap_ST_st17_fsm_16 = 63'b10000000000000000;
parameter    ap_ST_st18_fsm_17 = 63'b100000000000000000;
parameter    ap_ST_st19_fsm_18 = 63'b1000000000000000000;
parameter    ap_ST_st20_fsm_19 = 63'b10000000000000000000;
parameter    ap_ST_st21_fsm_20 = 63'b100000000000000000000;
parameter    ap_ST_st22_fsm_21 = 63'b1000000000000000000000;
parameter    ap_ST_st23_fsm_22 = 63'b10000000000000000000000;
parameter    ap_ST_st24_fsm_23 = 63'b100000000000000000000000;
parameter    ap_ST_st25_fsm_24 = 63'b1000000000000000000000000;
parameter    ap_ST_st26_fsm_25 = 63'b10000000000000000000000000;
parameter    ap_ST_st27_fsm_26 = 63'b100000000000000000000000000;
parameter    ap_ST_st28_fsm_27 = 63'b1000000000000000000000000000;
parameter    ap_ST_st29_fsm_28 = 63'b10000000000000000000000000000;
parameter    ap_ST_st30_fsm_29 = 63'b100000000000000000000000000000;
parameter    ap_ST_st31_fsm_30 = 63'b1000000000000000000000000000000;
parameter    ap_ST_st32_fsm_31 = 63'b10000000000000000000000000000000;
parameter    ap_ST_st33_fsm_32 = 63'b100000000000000000000000000000000;
parameter    ap_ST_st34_fsm_33 = 63'b1000000000000000000000000000000000;
parameter    ap_ST_st35_fsm_34 = 63'b10000000000000000000000000000000000;
parameter    ap_ST_st36_fsm_35 = 63'b100000000000000000000000000000000000;
parameter    ap_ST_st37_fsm_36 = 63'b1000000000000000000000000000000000000;
parameter    ap_ST_st38_fsm_37 = 63'b10000000000000000000000000000000000000;
parameter    ap_ST_st39_fsm_38 = 63'b100000000000000000000000000000000000000;
parameter    ap_ST_st40_fsm_39 = 63'b1000000000000000000000000000000000000000;
parameter    ap_ST_st41_fsm_40 = 63'b10000000000000000000000000000000000000000;
parameter    ap_ST_st42_fsm_41 = 63'b100000000000000000000000000000000000000000;
parameter    ap_ST_st43_fsm_42 = 63'b1000000000000000000000000000000000000000000;
parameter    ap_ST_st44_fsm_43 = 63'b10000000000000000000000000000000000000000000;
parameter    ap_ST_st45_fsm_44 = 63'b100000000000000000000000000000000000000000000;
parameter    ap_ST_st46_fsm_45 = 63'b1000000000000000000000000000000000000000000000;
parameter    ap_ST_st47_fsm_46 = 63'b10000000000000000000000000000000000000000000000;
parameter    ap_ST_st48_fsm_47 = 63'b100000000000000000000000000000000000000000000000;
parameter    ap_ST_st49_fsm_48 = 63'b1000000000000000000000000000000000000000000000000;
parameter    ap_ST_st50_fsm_49 = 63'b10000000000000000000000000000000000000000000000000;
parameter    ap_ST_st51_fsm_50 = 63'b100000000000000000000000000000000000000000000000000;
parameter    ap_ST_st52_fsm_51 = 63'b1000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st53_fsm_52 = 63'b10000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st54_fsm_53 = 63'b100000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st55_fsm_54 = 63'b1000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st56_fsm_55 = 63'b10000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st57_fsm_56 = 63'b100000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st58_fsm_57 = 63'b1000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st59_fsm_58 = 63'b10000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st60_fsm_59 = 63'b100000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st61_fsm_60 = 63'b1000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st62_fsm_61 = 63'b10000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st63_fsm_62 = 63'b100000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_16 = 32'b10110;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_24 = 32'b100100;
parameter    ap_const_lv32_25 = 32'b100101;
parameter    ap_const_lv32_26 = 32'b100110;
parameter    ap_const_lv32_29 = 32'b101001;
parameter    ap_const_lv32_2E = 32'b101110;
parameter    ap_const_lv32_2F = 32'b101111;
parameter    ap_const_lv32_3C = 32'b111100;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv32_3E = 32'b111110;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv32_3D = 32'b111101;
parameter    ap_const_lv11_0 = 11'b00000000000;
parameter    ap_const_lv11_1 = 11'b1;
parameter    ap_const_lv11_2 = 11'b10;
parameter    ap_const_lv11_3 = 11'b11;
parameter    ap_const_lv11_4 = 11'b100;
parameter    ap_const_lv11_5 = 11'b101;
parameter    ap_const_lv11_6 = 11'b110;
parameter    ap_const_lv32_2A = 32'b101010;
parameter    ap_const_lv5_10 = 5'b10000;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_const_lv4_A = 4'b1010;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv3_6 = 3'b110;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_const_lv13_19 = 13'b11001;
parameter    ap_const_lv11_498 = 11'b10010011000;
parameter    ap_const_lv11_368 = 11'b1101101000;
parameter    ap_const_lv11_93 = 11'b10010011;
parameter    ap_const_lv3_5 = 3'b101;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv12_498 = 12'b10010011000;
parameter    ap_const_lv32_19 = 32'b11001;
parameter    ap_const_lv32_1C = 32'b11100;
parameter    ap_const_lv32_1B = 32'b11011;
parameter    ap_const_lv32_13 = 32'b10011;
parameter    ap_const_lv9_1F = 9'b11111;
parameter    ap_const_lv32_7F = 32'b1111111;
parameter    ap_const_lv8_7F = 8'b1111111;
parameter    ap_const_lv128_lc_1 = 128'b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111;
parameter    ap_const_lv128_lc_2 = 128'b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000;
parameter    ap_const_lv128_lc_3 = 128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv128_lc_4 = 128'b11111111111111111111111111111111;
parameter    ap_const_lv128_lc_5 = 128'b11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv128_lc_6 = 128'b1111111111111111111111111111111111111111111111111111111111111111;
parameter    ap_const_lv30_6F75 = 30'b110111101110101;
parameter    ap_const_lv24_DEF = 24'b110111101111;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] input_0_address0;
output   input_0_ce0;
input  [127:0] input_0_q0;
output  [7:0] input_1_address0;
output   input_1_ce0;
input  [127:0] input_1_q0;
output  [7:0] input_2_address0;
output   input_2_ce0;
input  [127:0] input_2_q0;
output  [7:0] input_3_address0;
output   input_3_ce0;
input  [127:0] input_3_q0;
output  [7:0] input_4_address0;
output   input_4_ce0;
input  [127:0] input_4_q0;
output  [7:0] input_5_address0;
output   input_5_ce0;
input  [127:0] input_5_q0;
output  [7:0] input_6_address0;
output   input_6_ce0;
input  [127:0] input_6_q0;
output  [7:0] input_7_address0;
output   input_7_ce0;
input  [127:0] input_7_q0;
output  [7:0] output_0_address0;
output   output_0_ce0;
output   output_0_we0;
output  [127:0] output_0_d0;
input  [127:0] output_0_q0;
output  [7:0] output_1_address0;
output   output_1_ce0;
output   output_1_we0;
output  [127:0] output_1_d0;
input  [127:0] output_1_q0;
output  [7:0] output_2_address0;
output   output_2_ce0;
output   output_2_we0;
output  [127:0] output_2_d0;
input  [127:0] output_2_q0;
output  [7:0] output_3_address0;
output   output_3_ce0;
output   output_3_we0;
output  [127:0] output_3_d0;
input  [127:0] output_3_q0;
output  [7:0] output_4_address0;
output   output_4_ce0;
output   output_4_we0;
output  [127:0] output_4_d0;
input  [127:0] output_4_q0;
output  [7:0] output_5_address0;
output   output_5_ce0;
output   output_5_we0;
output  [127:0] output_5_d0;
input  [127:0] output_5_q0;
output  [7:0] output_6_address0;
output   output_6_ce0;
output   output_6_we0;
output  [127:0] output_6_d0;
input  [127:0] output_6_q0;
output  [7:0] output_7_address0;
output   output_7_ce0;
output   output_7_we0;
output  [127:0] output_7_d0;
input  [127:0] output_7_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_0_ce0;
reg input_1_ce0;
reg input_2_ce0;
reg input_3_ce0;
reg input_4_ce0;
reg input_5_ce0;
reg input_6_ce0;
reg input_7_ce0;
reg[7:0] output_0_address0;
reg output_0_ce0;
reg output_0_we0;
reg[7:0] output_1_address0;
reg output_1_ce0;
reg output_1_we0;
reg[7:0] output_2_address0;
reg output_2_ce0;
reg output_2_we0;
reg[7:0] output_3_address0;
reg output_3_ce0;
reg output_3_we0;
reg[7:0] output_4_address0;
reg output_4_ce0;
reg output_4_we0;
reg[7:0] output_5_address0;
reg output_5_ce0;
reg output_5_we0;
reg[7:0] output_6_address0;
reg output_6_ce0;
reg output_6_we0;
reg[7:0] output_7_address0;
reg output_7_ce0;
reg output_7_we0;

(* fsm_encoding = "none" *) reg   [62:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_80;
wire   [11:0] conv2_weight_address0;
reg    conv2_weight_ce0;
wire   [31:0] conv2_weight_q0;
wire   [4:0] n_2_fu_501_p2;
reg   [4:0] n_2_reg_1219;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_211;
wire   [7:0] p_shl3_cast_fu_519_p1;
reg   [7:0] p_shl3_cast_reg_1224;
wire   [0:0] exitcond4_fu_495_p2;
wire   [5:0] p_shl4_cast1_fu_529_p1;
reg   [5:0] p_shl4_cast1_reg_1229;
wire   [7:0] tmp_19_fu_537_p2;
reg   [7:0] tmp_19_reg_1234;
wire   [3:0] x_2_fu_553_p2;
reg   [3:0] x_2_reg_1242;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_230;
wire   [10:0] p_shl5_fu_573_p3;
reg   [10:0] p_shl5_reg_1247;
wire   [0:0] exitcond5_fu_547_p2;
wire   [8:0] p_shl6_fu_581_p3;
reg   [8:0] p_shl6_reg_1252;
wire   [11:0] y_cast_fu_589_p1;
reg   [11:0] y_cast_reg_1257;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_246;
wire   [3:0] y_2_fu_603_p2;
reg   [3:0] y_2_reg_1265;
wire   [10:0] o_index_fu_618_p2;
reg   [10:0] o_index_reg_1270;
wire   [0:0] exitcond2_fu_597_p2;
wire   [2:0] m_3_fu_633_p2;
reg   [2:0] m_3_reg_1280;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_262;
wire   [7:0] tmp_22_fu_663_p2;
reg   [7:0] tmp_22_reg_1285;
wire   [0:0] exitcond6_fu_627_p2;
wire   [12:0] tmp_24_fu_678_p2;
reg   [12:0] tmp_24_reg_1290;
wire   [0:0] tmp_27_fu_684_p2;
reg   [0:0] tmp_27_reg_1295;
wire   [10:0] tmp_66_fu_694_p3;
reg   [10:0] tmp_66_reg_1304;
wire   [11:0] c_cast2_fu_711_p1;
reg   [11:0] c_cast2_reg_1310;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_284;
wire   [2:0] c_2_fu_721_p2;
reg   [2:0] c_2_reg_1318;
wire   [12:0] tmp8_fu_727_p2;
reg   [12:0] tmp8_reg_1323;
wire   [0:0] exitcond1_fu_715_p2;
wire   [2:0] r_2_fu_746_p2;
reg   [2:0] r_2_reg_1331;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_300;
wire   [11:0] i_index_fu_798_p2;
reg   [11:0] i_index_reg_1336;
wire   [0:0] exitcond_fu_740_p2;
wire   [12:0] w_index_fu_821_p2;
reg   [12:0] w_index_reg_1342;
reg   [3:0] tmp_29_reg_1347;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_316;
reg   [2:0] tmp_162_reg_1352;
wire   [10:0] tmp_160_fu_856_p1;
reg   [10:0] tmp_160_reg_1357;
reg    ap_sig_cseq_ST_st23_fsm_22;
reg    ap_sig_327;
reg   [4:0] tmp_161_reg_1363;
reg    ap_sig_cseq_ST_st24_fsm_23;
reg    ap_sig_336;
reg    ap_sig_cseq_ST_st37_fsm_36;
reg    ap_sig_345;
wire   [7:0] tmp_173_fu_1004_p2;
reg   [7:0] tmp_173_reg_1408;
reg    ap_sig_cseq_ST_st38_fsm_37;
reg    ap_sig_368;
wire   [127:0] tmp_176_fu_1014_p2;
reg   [127:0] tmp_176_reg_1413;
reg    ap_sig_cseq_ST_st39_fsm_38;
reg    ap_sig_381;
wire   [31:0] grp_fu_490_p2;
reg   [31:0] tmp_30_reg_1433;
reg    ap_sig_cseq_ST_st42_fsm_41;
reg    ap_sig_391;
wire   [31:0] grp_fu_485_p2;
reg    ap_sig_cseq_ST_st47_fsm_46;
reg    ap_sig_400;
reg   [4:0] tmp_148_reg_1443;
reg    ap_sig_cseq_ST_st48_fsm_47;
reg    ap_sig_409;
reg   [7:0] output_0_addr_reg_1448;
reg    ap_sig_cseq_ST_st61_fsm_60;
reg    ap_sig_418;
reg   [7:0] output_1_addr_reg_1453;
reg   [7:0] output_2_addr_reg_1458;
reg   [7:0] output_3_addr_reg_1463;
reg   [7:0] output_4_addr_reg_1468;
reg   [7:0] output_5_addr_reg_1473;
reg   [7:0] output_6_addr_reg_1478;
reg   [7:0] output_7_addr_reg_1483;
reg   [4:0] n_reg_382;
reg   [3:0] x_reg_393;
reg   [3:0] y_reg_405;
reg    ap_sig_cseq_ST_st63_fsm_62;
reg    ap_sig_454;
reg   [31:0] sum_reg_416;
reg   [2:0] m_reg_428;
reg   [31:0] sum_1_reg_439;
reg   [2:0] c_reg_451;
reg   [31:0] sum_2_reg_462;
reg   [2:0] r_reg_474;
wire   [63:0] newIndex6_fu_878_p1;
wire   [63:0] tmp_s_fu_1020_p1;
wire   [63:0] newIndex5_fu_1060_p1;
reg    ap_sig_cseq_ST_st62_fsm_61;
reg    ap_sig_481;
wire  signed [10:0] arrayNo5_fu_1072_p1;
wire   [127:0] tmp_159_fu_1180_p2;
reg    ap_sig_cseq_ST_st43_fsm_42;
reg    ap_sig_536;
wire   [31:0] grp_fu_490_p0;
wire   [3:0] tmp_146_fu_507_p1;
wire   [6:0] p_shl3_fu_511_p3;
wire   [4:0] tmp_147_fu_523_p2;
wire   [7:0] p_shl4_cast_fu_533_p1;
wire   [5:0] x_cast_fu_543_p1;
wire   [5:0] tmp1_fu_559_p2;
wire   [7:0] tmp1_cast_fu_564_p1;
wire   [7:0] tmp_fu_568_p2;
wire   [8:0] y_cast1_fu_593_p1;
wire   [8:0] tmp2_fu_609_p2;
wire   [10:0] tmp2_cast_fu_614_p1;
wire   [6:0] p_shl7_fu_639_p3;
wire   [3:0] p_shl8_fu_651_p3;
wire   [7:0] p_shl7_cast_fu_647_p1;
wire   [7:0] p_shl8_cast_fu_659_p1;
wire   [7:0] m_cast1_fu_623_p1;
wire   [7:0] tmp_23_fu_669_p2;
wire  signed [7:0] tmp_24_fu_678_p0;
wire   [10:0] tmp_28_fu_689_p2;
wire   [10:0] grp_fu_701_p0;
wire   [8:0] grp_fu_701_p1;
wire   [12:0] c_cast_fu_707_p1;
wire   [3:0] r_cast_fu_736_p1;
wire   [3:0] tmp6_fu_752_p2;
wire   [7:0] tmp6_cast_fu_758_p1;
wire   [7:0] tmp4_fu_762_p2;
wire   [8:0] p_shl1_fu_775_p3;
wire   [11:0] p_shl9_fu_767_p3;
wire  signed [11:0] p_shl1_cast_fu_783_p1;
wire   [11:0] tmp5_fu_787_p2;
wire   [11:0] tmp7_fu_793_p2;
wire   [4:0] p_shl_fu_803_p3;
wire   [4:0] r_cast1_fu_732_p1;
wire   [4:0] tmp9_fu_811_p2;
wire   [12:0] tmp9_cast_fu_817_p1;
wire  signed [13:0] tmp_70_fu_826_p1;
wire   [29:0] mul2_fu_1194_p2;
wire   [10:0] grp_fu_829_p2;
wire   [10:0] grp_fu_860_p0;
wire   [8:0] grp_fu_860_p1;
wire   [23:0] mul_fu_1202_p2;
wire   [10:0] grp_fu_860_p2;
wire  signed [10:0] arrayNo_fu_893_p1;
wire   [13:0] tmp_61_fu_900_p9;
wire   [8:0] tmp_72_fu_922_p3;
wire   [8:0] tmp_73_fu_929_p2;
wire   [127:0] tmp_61_fu_900_p10;
wire   [7:0] tmp_164_fu_941_p3;
wire   [7:0] tmp_165_fu_948_p1;
wire   [0:0] tmp_163_fu_935_p2;
wire   [7:0] tmp_167_fu_962_p2;
wire   [7:0] tmp_169_fu_974_p2;
reg   [127:0] tmp_166_fu_952_p4;
wire   [7:0] tmp_168_fu_968_p2;
wire   [7:0] tmp_170_fu_980_p3;
wire   [7:0] tmp_172_fu_996_p3;
wire   [127:0] tmp_171_fu_988_p3;
wire   [127:0] tmp_174_fu_1010_p1;
wire  signed [31:0] w_index_cast_fu_890_p1;
wire   [127:0] tmp_175_fu_1025_p1;
wire   [127:0] tmp_177_fu_1028_p2;
wire   [127:0] tmp_178_fu_1034_p2;
wire   [31:0] tmp_179_fu_1039_p1;
wire   [23:0] mul5_fu_1209_p2;
wire   [10:0] grp_fu_701_p2;
wire   [13:0] tmp_60_fu_1083_p9;
wire   [31:0] tmp_67_fu_1079_p1;
wire   [63:0] tmp_150_fu_1109_p3;
wire   [127:0] tmp_149_fu_1105_p1;
wire   [127:0] sf_fu_1117_p1;
wire   [127:0] tmp_154_fu_1142_p3;
wire   [127:0] tmp_153_fu_1135_p3;
wire   [127:0] tmp_152_fu_1128_p3;
wire   [127:0] p_not_fu_1155_p3;
wire   [127:0] tmp_60_fu_1083_p10;
wire   [127:0] tmp_155_fu_1149_p2;
wire   [127:0] tmp_151_fu_1121_p3;
wire   [127:0] tmp_156_fu_1162_p2;
wire   [127:0] tmp_157_fu_1168_p2;
wire   [127:0] tmp_158_fu_1174_p2;
wire   [13:0] mul2_fu_1194_p0;
wire   [15:0] mul2_fu_1194_p1;
wire   [10:0] mul_fu_1202_p0;
wire   [12:0] mul_fu_1202_p1;
wire   [12:0] mul5_fu_1209_p0;
wire   [10:0] mul5_fu_1209_p1;
reg    grp_fu_701_ap_start;
wire    grp_fu_701_ap_done;
reg    grp_fu_829_ap_start;
wire    grp_fu_829_ap_done;
reg    grp_fu_860_ap_start;
wire    grp_fu_860_ap_done;
reg   [62:0] ap_NS_fsm;
wire   [29:0] mul2_fu_1194_p00;
wire   [23:0] mul5_fu_1209_p10;
wire   [23:0] mul_fu_1202_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 63'b1;
end

dut_conv1_conv2_weight #(
    .DataWidth( 32 ),
    .AddressRange( 2400 ),
    .AddressWidth( 12 ))
conv2_weight_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv2_weight_address0),
    .ce0(conv2_weight_ce0),
    .q0(conv2_weight_q0)
);

dut_fadd_32ns_32ns_32_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dut_fadd_32ns_32ns_32_5_full_dsp_U49(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_2_reg_462),
    .din1(tmp_30_reg_1433),
    .ce(1'b1),
    .dout(grp_fu_485_p2)
);

dut_fmul_32ns_32ns_32_4_max_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dut_fmul_32ns_32ns_32_4_max_dsp_U50(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_490_p0),
    .din1(conv2_weight_q0),
    .ce(1'b1),
    .dout(grp_fu_490_p2)
);

dut_urem_11ns_9ns_11_15_seq #(
    .ID( 1 ),
    .NUM_STAGE( 15 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 11 ))
dut_urem_11ns_9ns_11_15_seq_U51(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_701_ap_start),
    .done(grp_fu_701_ap_done),
    .din0(grp_fu_701_p0),
    .din1(grp_fu_701_p1),
    .ce(1'b1),
    .dout(grp_fu_701_p2)
);

dut_urem_12ns_12ns_11_16_seq #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 11 ))
dut_urem_12ns_12ns_11_16_seq_U52(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_829_ap_start),
    .done(grp_fu_829_ap_done),
    .din0(i_index_reg_1336),
    .din1(ap_const_lv12_498),
    .ce(1'b1),
    .dout(grp_fu_829_p2)
);

dut_urem_11ns_9ns_11_15_seq #(
    .ID( 1 ),
    .NUM_STAGE( 15 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 11 ))
dut_urem_11ns_9ns_11_15_seq_U53(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_860_ap_start),
    .done(grp_fu_860_ap_done),
    .din0(grp_fu_860_p0),
    .din1(grp_fu_860_p1),
    .ce(1'b1),
    .dout(grp_fu_860_p2)
);

dut_mux_8to1_sel14_128_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 128 ),
    .din2_WIDTH( 128 ),
    .din3_WIDTH( 128 ),
    .din4_WIDTH( 128 ),
    .din5_WIDTH( 128 ),
    .din6_WIDTH( 128 ),
    .din7_WIDTH( 128 ),
    .din8_WIDTH( 128 ),
    .din9_WIDTH( 14 ),
    .dout_WIDTH( 128 ))
dut_mux_8to1_sel14_128_1_U54(
    .din1(input_0_q0),
    .din2(input_1_q0),
    .din3(input_2_q0),
    .din4(input_3_q0),
    .din5(input_4_q0),
    .din6(input_5_q0),
    .din7(input_6_q0),
    .din8(input_7_q0),
    .din9(tmp_61_fu_900_p9),
    .dout(tmp_61_fu_900_p10)
);

dut_mux_8to1_sel14_128_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 128 ),
    .din2_WIDTH( 128 ),
    .din3_WIDTH( 128 ),
    .din4_WIDTH( 128 ),
    .din5_WIDTH( 128 ),
    .din6_WIDTH( 128 ),
    .din7_WIDTH( 128 ),
    .din8_WIDTH( 128 ),
    .din9_WIDTH( 14 ),
    .dout_WIDTH( 128 ))
dut_mux_8to1_sel14_128_1_U55(
    .din1(output_0_q0),
    .din2(output_1_q0),
    .din3(output_2_q0),
    .din4(output_3_q0),
    .din5(output_4_q0),
    .din6(output_5_q0),
    .din7(output_6_q0),
    .din8(output_7_q0),
    .din9(tmp_60_fu_1083_p9),
    .dout(tmp_60_fu_1083_p10)
);

dut_mul_mul_14ns_16ns_30_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
dut_mul_mul_14ns_16ns_30_1_U56(
    .din0(mul2_fu_1194_p0),
    .din1(mul2_fu_1194_p1),
    .dout(mul2_fu_1194_p2)
);

dut_mul_mul_11ns_13ns_24_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 24 ))
dut_mul_mul_11ns_13ns_24_1_U57(
    .din0(mul_fu_1202_p0),
    .din1(mul_fu_1202_p1),
    .dout(mul_fu_1202_p2)
);

dut_mul_mul_13ns_11ns_24_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 24 ))
dut_mul_mul_13ns_11ns_24_1_U58(
    .din0(mul5_fu_1209_p0),
    .din1(mul5_fu_1209_p1),
    .dout(mul5_fu_1209_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st7_fsm_6) & ~(1'b0 == exitcond_fu_740_p2))) begin
        c_reg_451 <= c_2_reg_1318;
    end else if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) & (1'b0 == exitcond6_fu_627_p2))) begin
        c_reg_451 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & ~(1'b0 == exitcond1_fu_715_p2))) begin
        m_reg_428 <= m_3_reg_1280;
    end else if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & (1'b0 == exitcond2_fu_597_p2))) begin
        m_reg_428 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & ~(1'b0 == exitcond5_fu_547_p2))) begin
        n_reg_382 <= n_2_reg_1219;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        n_reg_382 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st47_fsm_46)) begin
        r_reg_474 <= r_2_reg_1331;
    end else if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & (1'b0 == exitcond1_fu_715_p2))) begin
        r_reg_474 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st7_fsm_6) & ~(1'b0 == exitcond_fu_740_p2))) begin
        sum_1_reg_439 <= sum_2_reg_462;
    end else if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) & (1'b0 == exitcond6_fu_627_p2))) begin
        sum_1_reg_439 <= sum_reg_416;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st47_fsm_46)) begin
        sum_2_reg_462 <= grp_fu_485_p2;
    end else if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & (1'b0 == exitcond1_fu_715_p2))) begin
        sum_2_reg_462 <= sum_1_reg_439;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & ~(1'b0 == exitcond1_fu_715_p2))) begin
        sum_reg_416 <= sum_1_reg_439;
    end else if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & (1'b0 == exitcond2_fu_597_p2))) begin
        sum_reg_416 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & ~(1'b0 == exitcond2_fu_597_p2))) begin
        x_reg_393 <= x_2_reg_1242;
    end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond4_fu_495_p2 == 1'b0))) begin
        x_reg_393 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st63_fsm_62)) begin
        y_reg_405 <= y_2_reg_1265;
    end else if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & (1'b0 == exitcond5_fu_547_p2))) begin
        y_reg_405 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        c_2_reg_1318 <= c_2_fu_721_p2;
        c_cast2_reg_1310[2 : 0] <= c_cast2_fu_711_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st7_fsm_6) & (1'b0 == exitcond_fu_740_p2))) begin
        i_index_reg_1336 <= i_index_fu_798_p2;
        w_index_reg_1342 <= w_index_fu_821_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        m_3_reg_1280 <= m_3_fu_633_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        n_2_reg_1219 <= n_2_fu_501_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & (1'b0 == exitcond2_fu_597_p2))) begin
        o_index_reg_1270 <= o_index_fu_618_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st61_fsm_60)) begin
        output_0_addr_reg_1448 <= newIndex5_fu_1060_p1;
        output_1_addr_reg_1453 <= newIndex5_fu_1060_p1;
        output_2_addr_reg_1458 <= newIndex5_fu_1060_p1;
        output_3_addr_reg_1463 <= newIndex5_fu_1060_p1;
        output_4_addr_reg_1468 <= newIndex5_fu_1060_p1;
        output_5_addr_reg_1473 <= newIndex5_fu_1060_p1;
        output_6_addr_reg_1478 <= newIndex5_fu_1060_p1;
        output_7_addr_reg_1483 <= newIndex5_fu_1060_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond4_fu_495_p2 == 1'b0))) begin
        p_shl3_cast_reg_1224[6 : 3] <= p_shl3_cast_fu_519_p1[6 : 3];
        p_shl4_cast1_reg_1229[4 : 1] <= p_shl4_cast1_fu_529_p1[4 : 1];
        tmp_19_reg_1234[7 : 1] <= tmp_19_fu_537_p2[7 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & (1'b0 == exitcond5_fu_547_p2))) begin
        p_shl5_reg_1247[10 : 3] <= p_shl5_fu_573_p3[10 : 3];
        p_shl6_reg_1252[8 : 1] <= p_shl6_fu_581_p3[8 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        r_2_reg_1331 <= r_2_fu_746_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & (1'b0 == exitcond1_fu_715_p2))) begin
        tmp8_reg_1323 <= tmp8_fu_727_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st48_fsm_47)) begin
        tmp_148_reg_1443 <= {{mul5_fu_1209_p2[ap_const_lv32_17 : ap_const_lv32_13]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st23_fsm_22)) begin
        tmp_160_reg_1357 <= tmp_160_fu_856_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st24_fsm_23)) begin
        tmp_161_reg_1363 <= {{mul_fu_1202_p2[ap_const_lv32_17 : ap_const_lv32_13]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        tmp_162_reg_1352 <= {{mul2_fu_1194_p2[ap_const_lv32_1B : ap_const_lv32_19]}};
        tmp_29_reg_1347 <= {{mul2_fu_1194_p2[ap_const_lv32_1C : ap_const_lv32_19]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st38_fsm_37)) begin
        tmp_173_reg_1408[7 : 1] <= tmp_173_fu_1004_p2[7 : 1];
        tmp_176_reg_1413 <= tmp_176_fu_1014_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) & (1'b0 == exitcond6_fu_627_p2))) begin
        tmp_22_reg_1285[7 : 1] <= tmp_22_fu_663_p2[7 : 1];
        tmp_24_reg_1290 <= tmp_24_fu_678_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) & ~(1'b0 == exitcond6_fu_627_p2))) begin
        tmp_27_reg_1295 <= tmp_27_fu_684_p2;
        tmp_66_reg_1304 <= tmp_66_fu_694_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st42_fsm_41)) begin
        tmp_30_reg_1433 <= grp_fu_490_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        x_2_reg_1242 <= x_2_fu_553_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        y_2_reg_1265 <= y_2_fu_603_p2;
        y_cast_reg_1257[3 : 0] <= y_cast_fu_589_p1[3 : 0];
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0)) | ((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond4_fu_495_p2 == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond4_fu_495_p2 == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_80) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_327) begin
        ap_sig_cseq_ST_st23_fsm_22 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st23_fsm_22 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_336) begin
        ap_sig_cseq_ST_st24_fsm_23 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st24_fsm_23 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_211) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_345) begin
        ap_sig_cseq_ST_st37_fsm_36 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st37_fsm_36 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_368) begin
        ap_sig_cseq_ST_st38_fsm_37 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st38_fsm_37 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_381) begin
        ap_sig_cseq_ST_st39_fsm_38 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st39_fsm_38 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_230) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_391) begin
        ap_sig_cseq_ST_st42_fsm_41 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st42_fsm_41 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_536) begin
        ap_sig_cseq_ST_st43_fsm_42 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st43_fsm_42 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_400) begin
        ap_sig_cseq_ST_st47_fsm_46 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st47_fsm_46 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_409) begin
        ap_sig_cseq_ST_st48_fsm_47 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st48_fsm_47 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_246) begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_262) begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_418) begin
        ap_sig_cseq_ST_st61_fsm_60 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st61_fsm_60 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_481) begin
        ap_sig_cseq_ST_st62_fsm_61 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st62_fsm_61 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_454) begin
        ap_sig_cseq_ST_st63_fsm_62 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st63_fsm_62 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_284) begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_300) begin
        ap_sig_cseq_ST_st7_fsm_6 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_316) begin
        ap_sig_cseq_ST_st8_fsm_7 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st38_fsm_37)) begin
        conv2_weight_ce0 = 1'b1;
    end else begin
        conv2_weight_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) & ~(1'b0 == exitcond6_fu_627_p2))) begin
        grp_fu_701_ap_start = 1'b1;
    end else begin
        grp_fu_701_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        grp_fu_829_ap_start = 1'b1;
    end else begin
        grp_fu_829_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st23_fsm_22)) begin
        grp_fu_860_ap_start = 1'b1;
    end else begin
        grp_fu_860_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st37_fsm_36)) begin
        input_0_ce0 = 1'b1;
    end else begin
        input_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st37_fsm_36)) begin
        input_1_ce0 = 1'b1;
    end else begin
        input_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st37_fsm_36)) begin
        input_2_ce0 = 1'b1;
    end else begin
        input_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st37_fsm_36)) begin
        input_3_ce0 = 1'b1;
    end else begin
        input_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st37_fsm_36)) begin
        input_4_ce0 = 1'b1;
    end else begin
        input_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st37_fsm_36)) begin
        input_5_ce0 = 1'b1;
    end else begin
        input_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st37_fsm_36)) begin
        input_6_ce0 = 1'b1;
    end else begin
        input_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st37_fsm_36)) begin
        input_7_ce0 = 1'b1;
    end else begin
        input_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st62_fsm_61)) begin
        output_0_address0 = output_0_addr_reg_1448;
    end else if ((1'b1 == ap_sig_cseq_ST_st61_fsm_60)) begin
        output_0_address0 = newIndex5_fu_1060_p1;
    end else begin
        output_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st61_fsm_60) | (1'b1 == ap_sig_cseq_ST_st62_fsm_61))) begin
        output_0_ce0 = 1'b1;
    end else begin
        output_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st62_fsm_61) & (arrayNo5_fu_1072_p1 == ap_const_lv11_0))) begin
        output_0_we0 = 1'b1;
    end else begin
        output_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st62_fsm_61)) begin
        output_1_address0 = output_1_addr_reg_1453;
    end else if ((1'b1 == ap_sig_cseq_ST_st61_fsm_60)) begin
        output_1_address0 = newIndex5_fu_1060_p1;
    end else begin
        output_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st61_fsm_60) | (1'b1 == ap_sig_cseq_ST_st62_fsm_61))) begin
        output_1_ce0 = 1'b1;
    end else begin
        output_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st62_fsm_61) & (arrayNo5_fu_1072_p1 == ap_const_lv11_1))) begin
        output_1_we0 = 1'b1;
    end else begin
        output_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st62_fsm_61)) begin
        output_2_address0 = output_2_addr_reg_1458;
    end else if ((1'b1 == ap_sig_cseq_ST_st61_fsm_60)) begin
        output_2_address0 = newIndex5_fu_1060_p1;
    end else begin
        output_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st61_fsm_60) | (1'b1 == ap_sig_cseq_ST_st62_fsm_61))) begin
        output_2_ce0 = 1'b1;
    end else begin
        output_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st62_fsm_61) & (arrayNo5_fu_1072_p1 == ap_const_lv11_2))) begin
        output_2_we0 = 1'b1;
    end else begin
        output_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st62_fsm_61)) begin
        output_3_address0 = output_3_addr_reg_1463;
    end else if ((1'b1 == ap_sig_cseq_ST_st61_fsm_60)) begin
        output_3_address0 = newIndex5_fu_1060_p1;
    end else begin
        output_3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st61_fsm_60) | (1'b1 == ap_sig_cseq_ST_st62_fsm_61))) begin
        output_3_ce0 = 1'b1;
    end else begin
        output_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st62_fsm_61) & (arrayNo5_fu_1072_p1 == ap_const_lv11_3))) begin
        output_3_we0 = 1'b1;
    end else begin
        output_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st62_fsm_61)) begin
        output_4_address0 = output_4_addr_reg_1468;
    end else if ((1'b1 == ap_sig_cseq_ST_st61_fsm_60)) begin
        output_4_address0 = newIndex5_fu_1060_p1;
    end else begin
        output_4_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st61_fsm_60) | (1'b1 == ap_sig_cseq_ST_st62_fsm_61))) begin
        output_4_ce0 = 1'b1;
    end else begin
        output_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st62_fsm_61) & (arrayNo5_fu_1072_p1 == ap_const_lv11_4))) begin
        output_4_we0 = 1'b1;
    end else begin
        output_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st62_fsm_61)) begin
        output_5_address0 = output_5_addr_reg_1473;
    end else if ((1'b1 == ap_sig_cseq_ST_st61_fsm_60)) begin
        output_5_address0 = newIndex5_fu_1060_p1;
    end else begin
        output_5_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st61_fsm_60) | (1'b1 == ap_sig_cseq_ST_st62_fsm_61))) begin
        output_5_ce0 = 1'b1;
    end else begin
        output_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st62_fsm_61) & (arrayNo5_fu_1072_p1 == ap_const_lv11_5))) begin
        output_5_we0 = 1'b1;
    end else begin
        output_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st62_fsm_61)) begin
        output_6_address0 = output_6_addr_reg_1478;
    end else if ((1'b1 == ap_sig_cseq_ST_st61_fsm_60)) begin
        output_6_address0 = newIndex5_fu_1060_p1;
    end else begin
        output_6_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st61_fsm_60) | (1'b1 == ap_sig_cseq_ST_st62_fsm_61))) begin
        output_6_ce0 = 1'b1;
    end else begin
        output_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st62_fsm_61) & (arrayNo5_fu_1072_p1 == ap_const_lv11_6))) begin
        output_6_we0 = 1'b1;
    end else begin
        output_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st62_fsm_61)) begin
        output_7_address0 = output_7_addr_reg_1483;
    end else if ((1'b1 == ap_sig_cseq_ST_st61_fsm_60)) begin
        output_7_address0 = newIndex5_fu_1060_p1;
    end else begin
        output_7_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st61_fsm_60) | (1'b1 == ap_sig_cseq_ST_st62_fsm_61))) begin
        output_7_ce0 = 1'b1;
    end else begin
        output_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st62_fsm_61) & ~(arrayNo5_fu_1072_p1 == ap_const_lv11_0) & ~(arrayNo5_fu_1072_p1 == ap_const_lv11_1) & ~(arrayNo5_fu_1072_p1 == ap_const_lv11_2) & ~(arrayNo5_fu_1072_p1 == ap_const_lv11_3) & ~(arrayNo5_fu_1072_p1 == ap_const_lv11_4) & ~(arrayNo5_fu_1072_p1 == ap_const_lv11_5) & ~(arrayNo5_fu_1072_p1 == ap_const_lv11_6))) begin
        output_7_we0 = 1'b1;
    end else begin
        output_7_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if (~(exitcond4_fu_495_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : begin
            if (~(1'b0 == exitcond5_fu_547_p2)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st4_fsm_3 : begin
            if (~(1'b0 == exitcond2_fu_597_p2)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        end
        ap_ST_st5_fsm_4 : begin
            if ((1'b0 == exitcond6_fu_627_p2)) begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end else begin
                ap_NS_fsm = ap_ST_st48_fsm_47;
            end
        end
        ap_ST_st6_fsm_5 : begin
            if (~(1'b0 == exitcond1_fu_715_p2)) begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end else begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end
        end
        ap_ST_st7_fsm_6 : begin
            if (~(1'b0 == exitcond_fu_740_p2)) begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end else begin
                ap_NS_fsm = ap_ST_st8_fsm_7;
            end
        end
        ap_ST_st8_fsm_7 : begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : begin
            ap_NS_fsm = ap_ST_st14_fsm_13;
        end
        ap_ST_st14_fsm_13 : begin
            ap_NS_fsm = ap_ST_st15_fsm_14;
        end
        ap_ST_st15_fsm_14 : begin
            ap_NS_fsm = ap_ST_st16_fsm_15;
        end
        ap_ST_st16_fsm_15 : begin
            ap_NS_fsm = ap_ST_st17_fsm_16;
        end
        ap_ST_st17_fsm_16 : begin
            ap_NS_fsm = ap_ST_st18_fsm_17;
        end
        ap_ST_st18_fsm_17 : begin
            ap_NS_fsm = ap_ST_st19_fsm_18;
        end
        ap_ST_st19_fsm_18 : begin
            ap_NS_fsm = ap_ST_st20_fsm_19;
        end
        ap_ST_st20_fsm_19 : begin
            ap_NS_fsm = ap_ST_st21_fsm_20;
        end
        ap_ST_st21_fsm_20 : begin
            ap_NS_fsm = ap_ST_st22_fsm_21;
        end
        ap_ST_st22_fsm_21 : begin
            ap_NS_fsm = ap_ST_st23_fsm_22;
        end
        ap_ST_st23_fsm_22 : begin
            ap_NS_fsm = ap_ST_st24_fsm_23;
        end
        ap_ST_st24_fsm_23 : begin
            ap_NS_fsm = ap_ST_st25_fsm_24;
        end
        ap_ST_st25_fsm_24 : begin
            ap_NS_fsm = ap_ST_st26_fsm_25;
        end
        ap_ST_st26_fsm_25 : begin
            ap_NS_fsm = ap_ST_st27_fsm_26;
        end
        ap_ST_st27_fsm_26 : begin
            ap_NS_fsm = ap_ST_st28_fsm_27;
        end
        ap_ST_st28_fsm_27 : begin
            ap_NS_fsm = ap_ST_st29_fsm_28;
        end
        ap_ST_st29_fsm_28 : begin
            ap_NS_fsm = ap_ST_st30_fsm_29;
        end
        ap_ST_st30_fsm_29 : begin
            ap_NS_fsm = ap_ST_st31_fsm_30;
        end
        ap_ST_st31_fsm_30 : begin
            ap_NS_fsm = ap_ST_st32_fsm_31;
        end
        ap_ST_st32_fsm_31 : begin
            ap_NS_fsm = ap_ST_st33_fsm_32;
        end
        ap_ST_st33_fsm_32 : begin
            ap_NS_fsm = ap_ST_st34_fsm_33;
        end
        ap_ST_st34_fsm_33 : begin
            ap_NS_fsm = ap_ST_st35_fsm_34;
        end
        ap_ST_st35_fsm_34 : begin
            ap_NS_fsm = ap_ST_st36_fsm_35;
        end
        ap_ST_st36_fsm_35 : begin
            ap_NS_fsm = ap_ST_st37_fsm_36;
        end
        ap_ST_st37_fsm_36 : begin
            ap_NS_fsm = ap_ST_st38_fsm_37;
        end
        ap_ST_st38_fsm_37 : begin
            ap_NS_fsm = ap_ST_st39_fsm_38;
        end
        ap_ST_st39_fsm_38 : begin
            ap_NS_fsm = ap_ST_st40_fsm_39;
        end
        ap_ST_st40_fsm_39 : begin
            ap_NS_fsm = ap_ST_st41_fsm_40;
        end
        ap_ST_st41_fsm_40 : begin
            ap_NS_fsm = ap_ST_st42_fsm_41;
        end
        ap_ST_st42_fsm_41 : begin
            ap_NS_fsm = ap_ST_st43_fsm_42;
        end
        ap_ST_st43_fsm_42 : begin
            ap_NS_fsm = ap_ST_st44_fsm_43;
        end
        ap_ST_st44_fsm_43 : begin
            ap_NS_fsm = ap_ST_st45_fsm_44;
        end
        ap_ST_st45_fsm_44 : begin
            ap_NS_fsm = ap_ST_st46_fsm_45;
        end
        ap_ST_st46_fsm_45 : begin
            ap_NS_fsm = ap_ST_st47_fsm_46;
        end
        ap_ST_st47_fsm_46 : begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st48_fsm_47 : begin
            ap_NS_fsm = ap_ST_st49_fsm_48;
        end
        ap_ST_st49_fsm_48 : begin
            ap_NS_fsm = ap_ST_st50_fsm_49;
        end
        ap_ST_st50_fsm_49 : begin
            ap_NS_fsm = ap_ST_st51_fsm_50;
        end
        ap_ST_st51_fsm_50 : begin
            ap_NS_fsm = ap_ST_st52_fsm_51;
        end
        ap_ST_st52_fsm_51 : begin
            ap_NS_fsm = ap_ST_st53_fsm_52;
        end
        ap_ST_st53_fsm_52 : begin
            ap_NS_fsm = ap_ST_st54_fsm_53;
        end
        ap_ST_st54_fsm_53 : begin
            ap_NS_fsm = ap_ST_st55_fsm_54;
        end
        ap_ST_st55_fsm_54 : begin
            ap_NS_fsm = ap_ST_st56_fsm_55;
        end
        ap_ST_st56_fsm_55 : begin
            ap_NS_fsm = ap_ST_st57_fsm_56;
        end
        ap_ST_st57_fsm_56 : begin
            ap_NS_fsm = ap_ST_st58_fsm_57;
        end
        ap_ST_st58_fsm_57 : begin
            ap_NS_fsm = ap_ST_st59_fsm_58;
        end
        ap_ST_st59_fsm_58 : begin
            ap_NS_fsm = ap_ST_st60_fsm_59;
        end
        ap_ST_st60_fsm_59 : begin
            ap_NS_fsm = ap_ST_st61_fsm_60;
        end
        ap_ST_st61_fsm_60 : begin
            ap_NS_fsm = ap_ST_st62_fsm_61;
        end
        ap_ST_st62_fsm_61 : begin
            ap_NS_fsm = ap_ST_st63_fsm_62;
        end
        ap_ST_st63_fsm_62 : begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    ap_sig_211 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_230 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

always @ (*) begin
    ap_sig_246 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

always @ (*) begin
    ap_sig_262 = (1'b1 == ap_CS_fsm[ap_const_lv32_4]);
end

always @ (*) begin
    ap_sig_284 = (1'b1 == ap_CS_fsm[ap_const_lv32_5]);
end

always @ (*) begin
    ap_sig_300 = (1'b1 == ap_CS_fsm[ap_const_lv32_6]);
end

always @ (*) begin
    ap_sig_316 = (1'b1 == ap_CS_fsm[ap_const_lv32_7]);
end

always @ (*) begin
    ap_sig_327 = (1'b1 == ap_CS_fsm[ap_const_lv32_16]);
end

always @ (*) begin
    ap_sig_336 = (1'b1 == ap_CS_fsm[ap_const_lv32_17]);
end

always @ (*) begin
    ap_sig_345 = (1'b1 == ap_CS_fsm[ap_const_lv32_24]);
end

always @ (*) begin
    ap_sig_368 = (1'b1 == ap_CS_fsm[ap_const_lv32_25]);
end

always @ (*) begin
    ap_sig_381 = (1'b1 == ap_CS_fsm[ap_const_lv32_26]);
end

always @ (*) begin
    ap_sig_391 = (1'b1 == ap_CS_fsm[ap_const_lv32_29]);
end

always @ (*) begin
    ap_sig_400 = (1'b1 == ap_CS_fsm[ap_const_lv32_2E]);
end

always @ (*) begin
    ap_sig_409 = (1'b1 == ap_CS_fsm[ap_const_lv32_2F]);
end

always @ (*) begin
    ap_sig_418 = (1'b1 == ap_CS_fsm[ap_const_lv32_3C]);
end

always @ (*) begin
    ap_sig_454 = (1'b1 == ap_CS_fsm[ap_const_lv32_3E]);
end

always @ (*) begin
    ap_sig_481 = (1'b1 == ap_CS_fsm[ap_const_lv32_3D]);
end

always @ (*) begin
    ap_sig_536 = (1'b1 == ap_CS_fsm[ap_const_lv32_2A]);
end

always @ (*) begin
    ap_sig_80 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

assign arrayNo5_fu_1072_p1 = $signed(tmp_148_reg_1443);

assign arrayNo_fu_893_p1 = $signed(tmp_161_reg_1363);

assign c_2_fu_721_p2 = (c_reg_451 + ap_const_lv3_1);

assign c_cast2_fu_711_p1 = c_reg_451;

assign c_cast_fu_707_p1 = c_reg_451;

assign conv2_weight_address0 = tmp_s_fu_1020_p1;

assign exitcond1_fu_715_p2 = ((c_reg_451 == ap_const_lv3_5) ? 1'b1 : 1'b0);

assign exitcond2_fu_597_p2 = ((y_reg_405 == ap_const_lv4_A) ? 1'b1 : 1'b0);

assign exitcond4_fu_495_p2 = ((n_reg_382 == ap_const_lv5_10) ? 1'b1 : 1'b0);

assign exitcond5_fu_547_p2 = ((x_reg_393 == ap_const_lv4_A) ? 1'b1 : 1'b0);

assign exitcond6_fu_627_p2 = ((m_reg_428 == ap_const_lv3_6) ? 1'b1 : 1'b0);

assign exitcond_fu_740_p2 = ((r_reg_474 == ap_const_lv3_5) ? 1'b1 : 1'b0);

assign grp_fu_490_p0 = tmp_179_fu_1039_p1;

assign grp_fu_701_p0 = ((tmp_27_fu_684_p2[0:0] === 1'b1) ? o_index_reg_1270 : tmp_28_fu_689_p2);

assign grp_fu_701_p1 = ap_const_lv11_93;

assign grp_fu_860_p0 = grp_fu_829_p2[10:0];

assign grp_fu_860_p1 = ap_const_lv11_93;

assign i_index_fu_798_p2 = (tmp7_fu_793_p2 + c_cast2_reg_1310);

assign input_0_address0 = newIndex6_fu_878_p1;

assign input_1_address0 = newIndex6_fu_878_p1;

assign input_2_address0 = newIndex6_fu_878_p1;

assign input_3_address0 = newIndex6_fu_878_p1;

assign input_4_address0 = newIndex6_fu_878_p1;

assign input_5_address0 = newIndex6_fu_878_p1;

assign input_6_address0 = newIndex6_fu_878_p1;

assign input_7_address0 = newIndex6_fu_878_p1;

assign m_3_fu_633_p2 = (m_reg_428 + ap_const_lv3_1);

assign m_cast1_fu_623_p1 = m_reg_428;

assign mul2_fu_1194_p0 = mul2_fu_1194_p00;

assign mul2_fu_1194_p00 = $unsigned(tmp_70_fu_826_p1);

assign mul2_fu_1194_p1 = ap_const_lv30_6F75;

assign mul5_fu_1209_p0 = ap_const_lv24_DEF;

assign mul5_fu_1209_p1 = mul5_fu_1209_p10;

assign mul5_fu_1209_p10 = tmp_66_reg_1304;

assign mul_fu_1202_p0 = mul_fu_1202_p00;

assign mul_fu_1202_p00 = tmp_160_reg_1357;

assign mul_fu_1202_p1 = ap_const_lv24_DEF;

assign n_2_fu_501_p2 = (n_reg_382 + ap_const_lv5_1);

assign newIndex5_fu_1060_p1 = grp_fu_701_p2;

assign newIndex6_fu_878_p1 = grp_fu_860_p2;

assign o_index_fu_618_p2 = (tmp2_cast_fu_614_p1 + p_shl5_reg_1247);

assign output_0_d0 = tmp_159_fu_1180_p2;

assign output_1_d0 = tmp_159_fu_1180_p2;

assign output_2_d0 = tmp_159_fu_1180_p2;

assign output_3_d0 = tmp_159_fu_1180_p2;

assign output_4_d0 = tmp_159_fu_1180_p2;

assign output_5_d0 = tmp_159_fu_1180_p2;

assign output_6_d0 = tmp_159_fu_1180_p2;

assign output_7_d0 = tmp_159_fu_1180_p2;

assign p_not_fu_1155_p3 = ((tmp_27_reg_1295[0:0] === 1'b1) ? ap_const_lv128_lc_4 : ap_const_lv128_lc_6);

assign p_shl1_cast_fu_783_p1 = $signed(p_shl1_fu_775_p3);

assign p_shl1_fu_775_p3 = {{tmp4_fu_762_p2}, {1'b0}};

assign p_shl3_cast_fu_519_p1 = p_shl3_fu_511_p3;

assign p_shl3_fu_511_p3 = {{tmp_146_fu_507_p1}, {ap_const_lv3_0}};

assign p_shl4_cast1_fu_529_p1 = tmp_147_fu_523_p2;

assign p_shl4_cast_fu_533_p1 = tmp_147_fu_523_p2;

assign p_shl5_fu_573_p3 = {{tmp_fu_568_p2}, {ap_const_lv3_0}};

assign p_shl6_fu_581_p3 = {{tmp_fu_568_p2}, {1'b0}};

assign p_shl7_cast_fu_647_p1 = p_shl7_fu_639_p3;

assign p_shl7_fu_639_p3 = {{m_reg_428}, {ap_const_lv4_0}};

assign p_shl8_cast_fu_659_p1 = p_shl8_fu_651_p3;

assign p_shl8_fu_651_p3 = {{m_reg_428}, {1'b0}};

assign p_shl9_fu_767_p3 = {{tmp4_fu_762_p2}, {ap_const_lv4_0}};

assign p_shl_fu_803_p3 = {{r_reg_474}, {ap_const_lv2_0}};

assign r_2_fu_746_p2 = (r_reg_474 + ap_const_lv3_1);

assign r_cast1_fu_732_p1 = r_reg_474;

assign r_cast_fu_736_p1 = r_reg_474;

assign sf_fu_1117_p1 = tmp_150_fu_1109_p3;

assign tmp1_cast_fu_564_p1 = tmp1_fu_559_p2;

assign tmp1_fu_559_p2 = (x_cast_fu_543_p1 + p_shl4_cast1_reg_1229);

assign tmp2_cast_fu_614_p1 = tmp2_fu_609_p2;

assign tmp2_fu_609_p2 = (p_shl6_reg_1252 + y_cast1_fu_593_p1);

assign tmp4_fu_762_p2 = (tmp6_cast_fu_758_p1 + tmp_22_reg_1285);

assign tmp5_fu_787_p2 = ($signed(p_shl9_fu_767_p3) - $signed(p_shl1_cast_fu_783_p1));

assign tmp6_cast_fu_758_p1 = tmp6_fu_752_p2;

assign tmp6_fu_752_p2 = (x_reg_393 + r_cast_fu_736_p1);

assign tmp7_fu_793_p2 = (y_cast_reg_1257 + tmp5_fu_787_p2);

assign tmp8_fu_727_p2 = (c_cast_fu_707_p1 + tmp_24_reg_1290);

assign tmp9_cast_fu_817_p1 = tmp9_fu_811_p2;

assign tmp9_fu_811_p2 = (p_shl_fu_803_p3 + r_cast1_fu_732_p1);

assign tmp_146_fu_507_p1 = n_reg_382[3:0];

assign tmp_147_fu_523_p2 = n_reg_382 << ap_const_lv5_1;

assign tmp_149_fu_1105_p1 = tmp_67_fu_1079_p1;

assign tmp_150_fu_1109_p3 = {{tmp_67_fu_1079_p1}, {ap_const_lv32_0}};

assign tmp_151_fu_1121_p3 = ((tmp_27_reg_1295[0:0] === 1'b1) ? tmp_149_fu_1105_p1 : sf_fu_1117_p1);

assign tmp_152_fu_1128_p3 = ((tmp_27_reg_1295[0:0] === 1'b1) ? ap_const_lv128_lc_1 : ap_const_lv128_lc_2);

assign tmp_153_fu_1135_p3 = ((tmp_27_reg_1295[0:0] === 1'b1) ? ap_const_lv128_lc_3 : ap_const_lv128_lc_4);

assign tmp_154_fu_1142_p3 = ((tmp_27_reg_1295[0:0] === 1'b1) ? ap_const_lv128_lc_2 : ap_const_lv128_lc_5);

assign tmp_155_fu_1149_p2 = (tmp_154_fu_1142_p3 | tmp_153_fu_1135_p3);

assign tmp_156_fu_1162_p2 = (tmp_152_fu_1128_p3 & p_not_fu_1155_p3);

assign tmp_157_fu_1168_p2 = (tmp_60_fu_1083_p10 & tmp_155_fu_1149_p2);

assign tmp_158_fu_1174_p2 = (tmp_151_fu_1121_p3 & tmp_156_fu_1162_p2);

assign tmp_159_fu_1180_p2 = (tmp_157_fu_1168_p2 | tmp_158_fu_1174_p2);

assign tmp_160_fu_856_p1 = grp_fu_829_p2[10:0];

assign tmp_163_fu_935_p2 = ((tmp_72_fu_922_p3 > tmp_73_fu_929_p2) ? 1'b1 : 1'b0);

assign tmp_164_fu_941_p3 = {{tmp_162_reg_1352}, {ap_const_lv5_0}};

assign tmp_165_fu_948_p1 = tmp_73_fu_929_p2[7:0];

integer ap_tvar_int_0;

always @ (tmp_61_fu_900_p10) begin
    for (ap_tvar_int_0 = 128 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > ap_const_lv32_7F - ap_const_lv32_0) begin
            tmp_166_fu_952_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_166_fu_952_p4[ap_tvar_int_0] = tmp_61_fu_900_p10[ap_const_lv32_7F - ap_tvar_int_0];
        end
    end
end

assign tmp_167_fu_962_p2 = (tmp_164_fu_941_p3 - tmp_165_fu_948_p1);

assign tmp_168_fu_968_p2 = (ap_const_lv8_7F - tmp_164_fu_941_p3);

assign tmp_169_fu_974_p2 = (tmp_165_fu_948_p1 - tmp_164_fu_941_p3);

assign tmp_170_fu_980_p3 = ((tmp_163_fu_935_p2[0:0] === 1'b1) ? tmp_167_fu_962_p2 : tmp_169_fu_974_p2);

assign tmp_171_fu_988_p3 = ((tmp_163_fu_935_p2[0:0] === 1'b1) ? tmp_166_fu_952_p4 : tmp_61_fu_900_p10);

assign tmp_172_fu_996_p3 = ((tmp_163_fu_935_p2[0:0] === 1'b1) ? tmp_168_fu_968_p2 : tmp_164_fu_941_p3);

assign tmp_173_fu_1004_p2 = (ap_const_lv8_7F - tmp_170_fu_980_p3);

assign tmp_174_fu_1010_p1 = tmp_172_fu_996_p3;

assign tmp_175_fu_1025_p1 = tmp_173_reg_1408;

assign tmp_176_fu_1014_p2 = tmp_171_fu_988_p3 >> tmp_174_fu_1010_p1;

assign tmp_177_fu_1028_p2 = ap_const_lv128_lc_1 >> tmp_175_fu_1025_p1;

assign tmp_178_fu_1034_p2 = (tmp_176_reg_1413 & tmp_177_fu_1028_p2);

assign tmp_179_fu_1039_p1 = tmp_178_fu_1034_p2[31:0];

assign tmp_19_fu_537_p2 = (p_shl3_cast_fu_519_p1 - p_shl4_cast_fu_533_p1);

assign tmp_22_fu_663_p2 = (p_shl7_cast_fu_647_p1 - p_shl8_cast_fu_659_p1);

assign tmp_23_fu_669_p2 = (m_cast1_fu_623_p1 + tmp_19_reg_1234);

assign tmp_24_fu_678_p0 = tmp_23_fu_669_p2;

assign tmp_24_fu_678_p2 = ($signed(tmp_24_fu_678_p0) * $signed('h19));

assign tmp_27_fu_684_p2 = ((o_index_reg_1270 < ap_const_lv11_498) ? 1'b1 : 1'b0);

assign tmp_28_fu_689_p2 = (ap_const_lv11_368 + o_index_reg_1270);

assign tmp_60_fu_1083_p9 = $unsigned(arrayNo5_fu_1072_p1);

assign tmp_61_fu_900_p9 = $unsigned(arrayNo_fu_893_p1);

assign tmp_66_fu_694_p3 = ((tmp_27_fu_684_p2[0:0] === 1'b1) ? o_index_reg_1270 : tmp_28_fu_689_p2);

assign tmp_67_fu_1079_p1 = sum_reg_416;

assign tmp_70_fu_826_p1 = $signed(i_index_reg_1336);

assign tmp_72_fu_922_p3 = {{tmp_29_reg_1347}, {ap_const_lv5_0}};

assign tmp_73_fu_929_p2 = (tmp_72_fu_922_p3 | ap_const_lv9_1F);

assign tmp_fu_568_p2 = (p_shl3_cast_reg_1224 + tmp1_cast_fu_564_p1);

assign tmp_s_fu_1020_p1 = $unsigned(w_index_cast_fu_890_p1);

assign w_index_cast_fu_890_p1 = $signed(w_index_reg_1342);

assign w_index_fu_821_p2 = (tmp9_cast_fu_817_p1 + tmp8_reg_1323);

assign x_2_fu_553_p2 = (x_reg_393 + ap_const_lv4_1);

assign x_cast_fu_543_p1 = x_reg_393;

assign y_2_fu_603_p2 = (y_reg_405 + ap_const_lv4_1);

assign y_cast1_fu_593_p1 = y_reg_405;

assign y_cast_fu_589_p1 = y_reg_405;

always @ (posedge ap_clk) begin
    p_shl3_cast_reg_1224[2:0] <= 3'b000;
    p_shl3_cast_reg_1224[7] <= 1'b0;
    p_shl4_cast1_reg_1229[0] <= 1'b0;
    p_shl4_cast1_reg_1229[5] <= 1'b0;
    tmp_19_reg_1234[0] <= 1'b0;
    p_shl5_reg_1247[2:0] <= 3'b000;
    p_shl6_reg_1252[0] <= 1'b0;
    y_cast_reg_1257[11:4] <= 8'b00000000;
    tmp_22_reg_1285[0] <= 1'b0;
    c_cast2_reg_1310[11:3] <= 9'b000000000;
    tmp_173_reg_1408[0] <= 1'b0;
end

endmodule //dut_conv1
