// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dut_dense_mlp (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0_address0,
        input_0_ce0,
        input_0_q0,
        output_0_address0,
        output_0_ce0,
        output_0_we0,
        output_0_d0,
        output_0_q0
);

parameter    ap_ST_st1_fsm_0 = 17'b1;
parameter    ap_ST_st2_fsm_1 = 17'b10;
parameter    ap_ST_st3_fsm_2 = 17'b100;
parameter    ap_ST_st4_fsm_3 = 17'b1000;
parameter    ap_ST_st5_fsm_4 = 17'b10000;
parameter    ap_ST_st6_fsm_5 = 17'b100000;
parameter    ap_ST_st7_fsm_6 = 17'b1000000;
parameter    ap_ST_st8_fsm_7 = 17'b10000000;
parameter    ap_ST_st9_fsm_8 = 17'b100000000;
parameter    ap_ST_st10_fsm_9 = 17'b1000000000;
parameter    ap_ST_st11_fsm_10 = 17'b10000000000;
parameter    ap_ST_st12_fsm_11 = 17'b100000000000;
parameter    ap_ST_st13_fsm_12 = 17'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 17'b10000000000000;
parameter    ap_ST_st15_fsm_14 = 17'b100000000000000;
parameter    ap_ST_st16_fsm_15 = 17'b1000000000000000;
parameter    ap_ST_st17_fsm_16 = 17'b10000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv7_0 = 7'b0000000;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv8_54 = 8'b1010100;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv7_54 = 7'b1010100;
parameter    ap_const_lv7_1 = 7'b1;
parameter    ap_const_lv32_3E759240 = 32'b111110011101011001001001000000;
parameter    ap_const_lv32_BE833E74 = 32'b10111110100000110011111001110100;
parameter    ap_const_lv9_0 = 9'b000000000;
parameter    ap_const_lv9_1F = 9'b11111;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] input_0_address0;
output   input_0_ce0;
input  [127:0] input_0_q0;
output  [7:0] output_0_address0;
output   output_0_ce0;
output   output_0_we0;
output  [127:0] output_0_d0;
input  [127:0] output_0_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_0_ce0;
reg[7:0] output_0_address0;
reg output_0_ce0;
reg output_0_we0;

(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_34;
wire   [7:0] fc3_weight_address0;
reg    fc3_weight_ce0;
wire   [31:0] fc3_weight_q0;
wire   [7:0] next_mul_fu_146_p2;
reg   [7:0] next_mul_reg_239;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_67;
wire   [1:0] n_1_fu_158_p2;
reg   [1:0] n_1_reg_247;
wire   [6:0] m_2_fu_174_p2;
reg   [6:0] m_2_reg_255;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_78;
wire   [0:0] exitcond_fu_168_p2;
wire   [31:0] bias_load_phi_fu_200_p3;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_99;
wire   [31:0] grp_fu_141_p2;
reg   [31:0] tmp_14_reg_285;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_109;
wire   [31:0] grp_fu_135_p2;
reg    ap_sig_cseq_ST_st12_fsm_11;
reg    ap_sig_118;
reg   [31:0] biased_reg_295;
reg    ap_sig_cseq_ST_st16_fsm_15;
reg    ap_sig_126;
reg   [7:0] output_0_addr_reg_300;
reg   [1:0] n_reg_88;
reg    ap_sig_cseq_ST_st17_fsm_16;
reg    ap_sig_141;
reg   [7:0] phi_mul_reg_100;
wire   [31:0] sum_phi_fu_116_p4;
reg   [31:0] sum_reg_112;
wire   [0:0] exitcond1_fu_152_p2;
reg   [6:0] m_reg_124;
wire   [63:0] newIndex3_fu_186_p1;
wire   [63:0] tmp_13_fu_191_p1;
wire   [63:0] newIndex2_fu_218_p1;
reg   [31:0] grp_fu_135_p0;
reg   [31:0] grp_fu_135_p1;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_167;
wire   [31:0] grp_fu_141_p0;
wire   [7:0] m_cast_fu_164_p1;
wire   [7:0] w_index_fu_180_p2;
wire   [0:0] tmp_fu_196_p1;
wire   [31:0] tmp_104_fu_209_p1;
wire   [31:0] tmp_s_fu_223_p1;
reg   [16:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'b1;
end

dut_dense_mlp_fc3_weight #(
    .DataWidth( 32 ),
    .AddressRange( 168 ),
    .AddressWidth( 8 ))
fc3_weight_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fc3_weight_address0),
    .ce0(fc3_weight_ce0),
    .q0(fc3_weight_q0)
);

dut_fadd_32ns_32ns_32_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dut_fadd_32ns_32ns_32_5_full_dsp_U98(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_135_p0),
    .din1(grp_fu_135_p1),
    .ce(1'b1),
    .dout(grp_fu_135_p2)
);

dut_fmul_32ns_32ns_32_4_max_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dut_fmul_32ns_32ns_32_4_max_dsp_U99(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_141_p0),
    .din1(fc3_weight_q0),
    .ce(1'b1),
    .dout(grp_fu_141_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st12_fsm_11)) begin
        m_reg_124 <= m_2_reg_255;
    end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (1'b0 == exitcond1_fu_152_p2))) begin
        m_reg_124 <= ap_const_lv7_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st17_fsm_16)) begin
        n_reg_88 <= n_1_reg_247;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        n_reg_88 <= ap_const_lv2_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st17_fsm_16)) begin
        phi_mul_reg_100 <= next_mul_reg_239;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        phi_mul_reg_100 <= ap_const_lv8_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st12_fsm_11)) begin
        sum_reg_112 <= grp_fu_135_p2;
    end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (1'b0 == exitcond1_fu_152_p2))) begin
        sum_reg_112 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st16_fsm_15)) begin
        biased_reg_295 <= grp_fu_135_p2;
        output_0_addr_reg_300[1 : 0] <= newIndex2_fu_218_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        m_2_reg_255 <= m_2_fu_174_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        n_1_reg_247 <= n_1_fu_158_p2;
        next_mul_reg_239 <= next_mul_fu_146_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        tmp_14_reg_285 <= grp_fu_141_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0)) | ((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(1'b0 == exitcond1_fu_152_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(1'b0 == exitcond1_fu_152_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_118) begin
        ap_sig_cseq_ST_st12_fsm_11 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st12_fsm_11 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_126) begin
        ap_sig_cseq_ST_st16_fsm_15 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st16_fsm_15 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_141) begin
        ap_sig_cseq_ST_st17_fsm_16 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st17_fsm_16 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_34) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_67) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_78) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_99) begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_109) begin
        ap_sig_cseq_ST_st7_fsm_6 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_167) begin
        ap_sig_cseq_ST_st8_fsm_7 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        fc3_weight_ce0 = 1'b1;
    end else begin
        fc3_weight_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        grp_fu_135_p0 = sum_reg_112;
    end else if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        grp_fu_135_p0 = sum_phi_fu_116_p4;
    end else begin
        grp_fu_135_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        grp_fu_135_p1 = tmp_14_reg_285;
    end else if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        grp_fu_135_p1 = bias_load_phi_fu_200_p3;
    end else begin
        grp_fu_135_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        input_0_ce0 = 1'b1;
    end else begin
        input_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st17_fsm_16)) begin
        output_0_address0 = output_0_addr_reg_300;
    end else if ((1'b1 == ap_sig_cseq_ST_st16_fsm_15)) begin
        output_0_address0 = newIndex2_fu_218_p1;
    end else begin
        output_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st16_fsm_15) | (1'b1 == ap_sig_cseq_ST_st17_fsm_16))) begin
        output_0_ce0 = 1'b1;
    end else begin
        output_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st17_fsm_16)) begin
        output_0_we0 = 1'b1;
    end else begin
        output_0_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if (~(1'b0 == exitcond1_fu_152_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : begin
            if (~(exitcond_fu_168_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_st13_fsm_12;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st4_fsm_3 : begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st13_fsm_12 : begin
            ap_NS_fsm = ap_ST_st14_fsm_13;
        end
        ap_ST_st14_fsm_13 : begin
            ap_NS_fsm = ap_ST_st15_fsm_14;
        end
        ap_ST_st15_fsm_14 : begin
            ap_NS_fsm = ap_ST_st16_fsm_15;
        end
        ap_ST_st16_fsm_15 : begin
            ap_NS_fsm = ap_ST_st17_fsm_16;
        end
        ap_ST_st17_fsm_16 : begin
            ap_NS_fsm = ap_ST_st2_fsm_1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    ap_sig_109 = (1'b1 == ap_CS_fsm[ap_const_lv32_6]);
end

always @ (*) begin
    ap_sig_118 = (1'b1 == ap_CS_fsm[ap_const_lv32_B]);
end

always @ (*) begin
    ap_sig_126 = (1'b1 == ap_CS_fsm[ap_const_lv32_F]);
end

always @ (*) begin
    ap_sig_141 = (1'b1 == ap_CS_fsm[ap_const_lv32_10]);
end

always @ (*) begin
    ap_sig_167 = (1'b1 == ap_CS_fsm[ap_const_lv32_7]);
end

always @ (*) begin
    ap_sig_34 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_67 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_78 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

always @ (*) begin
    ap_sig_99 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

assign bias_load_phi_fu_200_p3 = ((tmp_fu_196_p1[0:0] === 1'b1) ? ap_const_lv32_3E759240 : ap_const_lv32_BE833E74);

assign exitcond1_fu_152_p2 = ((n_reg_88 == ap_const_lv2_2) ? 1'b1 : 1'b0);

assign exitcond_fu_168_p2 = ((m_reg_124 == ap_const_lv7_54) ? 1'b1 : 1'b0);

assign fc3_weight_address0 = tmp_13_fu_191_p1;

assign grp_fu_141_p0 = tmp_104_fu_209_p1;

assign input_0_address0 = newIndex3_fu_186_p1;

assign m_2_fu_174_p2 = (m_reg_124 + ap_const_lv7_1);

assign m_cast_fu_164_p1 = m_reg_124;

assign n_1_fu_158_p2 = (n_reg_88 + ap_const_lv2_1);

assign newIndex2_fu_218_p1 = n_reg_88;

assign newIndex3_fu_186_p1 = m_reg_124;

assign next_mul_fu_146_p2 = (phi_mul_reg_100 + ap_const_lv8_54);

assign output_0_d0 = {{output_0_q0[32'd127 : 32'd32]}, {tmp_s_fu_223_p1}};

assign sum_phi_fu_116_p4 = sum_reg_112;

assign tmp_104_fu_209_p1 = input_0_q0[31:0];

assign tmp_13_fu_191_p1 = w_index_fu_180_p2;

assign tmp_fu_196_p1 = n_reg_88[0:0];

assign tmp_s_fu_223_p1 = biased_reg_295;

assign w_index_fu_180_p2 = (phi_mul_reg_100 + m_cast_fu_164_p1);

always @ (posedge ap_clk) begin
    output_0_addr_reg_300[7:2] <= 6'b000000;
end

endmodule //dut_dense_mlp
