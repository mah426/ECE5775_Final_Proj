-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity dut_dense_mlp_1_fc2_bias_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of dut_dense_mlp_1_fc2_bias_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100101001011011110110101110", 
    1 => "10111101110100000010101110111011", 
    2 => "10111100010100001010110011001111", 
    3 => "00111001100000110111011101000111", 
    4 => "10111101011000011001001101000001", 
    5 => "10111100001100000001010001101010", 
    6 => "00111101110010000001010010000110", 
    7 => "10111101011000000111100100101001", 
    8 => "00111101011101110101011111001100", 
    9 => "00111101010111110011010110010111", 
    10 => "10111101101010110111101001100011", 
    11 => "10111101000001001011001101011011", 
    12 => "00111101101111000100101001110110", 
    13 => "00111101101010101010010001001010", 
    14 => "00111110010001011010010000111011", 
    15 => "10111101101000010001001010100101", 
    16 => "10111011101011100111000111011100", 
    17 => "00111110001100110010010001111101", 
    18 => "00111101101111011011011011011111", 
    19 => "10111101001101001010111000011100", 
    20 => "10111101100110010111111010000110", 
    21 => "00111101100001010000111110000010", 
    22 => "00111101000110101110100010111111", 
    23 => "10111101100001001000111010100000", 
    24 => "00111110000110000001010110011110", 
    25 => "00111101000101001000001000111010", 
    26 => "00111100101110100011101110000111", 
    27 => "00111101011100001011000110110001", 
    28 => "10111101000111001000100100110100", 
    29 => "10111101010100001011100100011111", 
    30 => "00111110000011000010100101011001", 
    31 => "00111101111110111100000010100000", 
    32 => "00111110001011011110101101010110", 
    33 => "00111110010000110111110010011000", 
    34 => "00111100001110101110000110011111", 
    35 => "10111101010001001101110100010000", 
    36 => "10111101101010010111011110110100", 
    37 => "00111101111111100111000101101000", 
    38 => "10111101110111000110110101001110", 
    39 => "00111101111000110110110111000010", 
    40 => "00111101011101110111110111000001", 
    41 => "00111101110110000000001100001101", 
    42 => "10111101100101101010001001001010", 
    43 => "00111101000111001111000100011000", 
    44 => "10111010000010000100111011010000", 
    45 => "00111101100111000000111110101111", 
    46 => "00111101011000000110111011001111", 
    47 => "00111101110111011011100101110111", 
    48 => "00111100101101111001001110011000", 
    49 => "10111100000111001110010101110010", 
    50 => "00111101110010010111010111010000", 
    51 => "10111101110001111000010101101011", 
    52 => "00111101001010001001111110010110", 
    53 => "00111101110100101011011100110000", 
    54 => "00111110001010101111101011010111", 
    55 => "00111101100000000101011110111110", 
    56 => "00111110000100000100101010001101", 
    57 => "10111101001100100001001001101111", 
    58 => "10111100111001111001110111011100", 
    59 => "00111101011101011100010110000000", 
    60 => "10111101111000110001110000111101", 
    61 => "00111101000110111110001110100101", 
    62 => "00111101011111011011101000010010", 
    63 => "00111100101000110111010101100001", 
    64 => "10111101000100111111010010001100", 
    65 => "10111101101101101011110110110111", 
    66 => "00111101101000001010011101010001", 
    67 => "00111101000000110001010001000100", 
    68 => "00111101111111100000000110011000", 
    69 => "00111101110001101010111100101101", 
    70 => "00111100110101010001100010010011", 
    71 => "00111100001011111101100110000110", 
    72 => "00111101011010100010000001110001", 
    73 => "00111101101001110111100000001100", 
    74 => "10111100001100000011110010010111", 
    75 => "10111101101001001010001111000101", 
    76 => "10111100010001111000110011101000", 
    77 => "10111101000000010101110100010100", 
    78 => "10111101010110000111101001010000", 
    79 => "10111100111010100110100110010110", 
    80 => "00111110010100101011110001111010", 
    81 => "00111100100111011011110001011010", 
    82 => "10111101010100000010001111010110", 
    83 => "10111100110100011101110111001101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity dut_dense_mlp_1_fc2_bias is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of dut_dense_mlp_1_fc2_bias is
    component dut_dense_mlp_1_fc2_bias_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    dut_dense_mlp_1_fc2_bias_rom_U :  component dut_dense_mlp_1_fc2_bias_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


