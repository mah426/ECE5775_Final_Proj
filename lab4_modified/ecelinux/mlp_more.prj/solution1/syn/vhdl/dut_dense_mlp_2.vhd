-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_dense_mlp_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
    input1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input1_ce0 : OUT STD_LOGIC;
    input1_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
    input2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input2_ce0 : OUT STD_LOGIC;
    input2_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
    input3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input3_ce0 : OUT STD_LOGIC;
    input3_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
    input4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input4_ce0 : OUT STD_LOGIC;
    input4_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
    input5_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input5_ce0 : OUT STD_LOGIC;
    input5_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
    input6_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input6_ce0 : OUT STD_LOGIC;
    input6_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
    input7_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input7_ce0 : OUT STD_LOGIC;
    input7_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (127 downto 0);
    output_r_q0 : IN STD_LOGIC_VECTOR (127 downto 0) );
end;


architecture behav of dut_dense_mlp_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (20 downto 0) := "000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (20 downto 0) := "000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (20 downto 0) := "000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (20 downto 0) := "000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (20 downto 0) := "000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (20 downto 0) := "000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (20 downto 0) := "000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (20 downto 0) := "001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (20 downto 0) := "010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv16_190 : STD_LOGIC_VECTOR (15 downto 0) := "0000000110010000";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv9_190 : STD_LOGIC_VECTOR (8 downto 0) := "110010000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_93 : STD_LOGIC_VECTOR (8 downto 0) := "010010011";
    constant ap_const_lv19_37C : STD_LOGIC_VECTOR (18 downto 0) := "0000000001101111100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv9_1F : STD_LOGIC_VECTOR (8 downto 0) := "000011111";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_38 : BOOLEAN;
    signal fc1_weight_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal fc1_weight_ce0 : STD_LOGIC;
    signal fc1_weight_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc1_bias_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal fc1_bias_ce0 : STD_LOGIC;
    signal fc1_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul2_fu_303_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal next_mul2_reg_495 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_120 : BOOLEAN;
    signal n_1_fu_315_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal n_1_reg_503 : STD_LOGIC_VECTOR (6 downto 0);
    signal m_2_fu_331_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal m_2_reg_511 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_131 : BOOLEAN;
    signal idx_urem_fu_349_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal idx_urem_reg_516 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_index_fu_357_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal w_index_reg_521 : STD_LOGIC_VECTOR (15 downto 0);
    signal next_mul_fu_363_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal next_mul_reg_526 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_100_reg_531 : STD_LOGIC_VECTOR (1 downto 0);
    signal output_addr_reg_581 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_101_fu_422_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_101_reg_586 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_174 : BOOLEAN;
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_185 : BOOLEAN;
    signal grp_fu_293_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_reg_606 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_195 : BOOLEAN;
    signal grp_fu_288_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_204 : BOOLEAN;
    signal fc1_bias_load_reg_616 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_212 : BOOLEAN;
    signal biased_reg_621 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st19_fsm_18 : STD_LOGIC;
    signal ap_sig_220 : BOOLEAN;
    signal tmp_33_fu_475_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_reg_627 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st20_fsm_19 : STD_LOGIC;
    signal ap_sig_229 : BOOLEAN;
    signal n_reg_219 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st21_fsm_20 : STD_LOGIC;
    signal ap_sig_242 : BOOLEAN;
    signal phi_mul1_reg_231 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_reg_243 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_reg_255 : STD_LOGIC_VECTOR (8 downto 0);
    signal phi_mul_reg_266 : STD_LOGIC_VECTOR (18 downto 0);
    signal phi_urem_reg_277 : STD_LOGIC_VECTOR (8 downto 0);
    signal newIndex4_fu_379_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_391_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_426_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_288_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_273 : BOOLEAN;
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_280 : BOOLEAN;
    signal grp_fu_293_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_urem_fu_337_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_99_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_cast5_fu_321_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_40_fu_400_p9 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_40_fu_400_p10 : STD_LOGIC_VECTOR (127 downto 0);
    signal biased_to_int_fu_434_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_437_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_98_fu_447_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (20 downto 0);

    component dut_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_fcmp_32ns_32ns_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component dut_mux_8to1_sel14_128_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (127 downto 0);
        din2 : IN STD_LOGIC_VECTOR (127 downto 0);
        din3 : IN STD_LOGIC_VECTOR (127 downto 0);
        din4 : IN STD_LOGIC_VECTOR (127 downto 0);
        din5 : IN STD_LOGIC_VECTOR (127 downto 0);
        din6 : IN STD_LOGIC_VECTOR (127 downto 0);
        din7 : IN STD_LOGIC_VECTOR (127 downto 0);
        din8 : IN STD_LOGIC_VECTOR (127 downto 0);
        din9 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component dut_dense_mlp_2_fc1_weight IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_dense_mlp_2_fc1_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    fc1_weight_U : component dut_dense_mlp_2_fc1_weight
    generic map (
        DataWidth => 32,
        AddressRange => 48000,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc1_weight_address0,
        ce0 => fc1_weight_ce0,
        q0 => fc1_weight_q0);

    fc1_bias_U : component dut_dense_mlp_2_fc1_bias
    generic map (
        DataWidth => 32,
        AddressRange => 120,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc1_bias_address0,
        ce0 => fc1_bias_ce0,
        q0 => fc1_bias_q0);

    dut_fadd_32ns_32ns_32_5_full_dsp_U76 : component dut_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_reg_243,
        din1 => grp_fu_288_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_288_p2);

    dut_fmul_32ns_32ns_32_4_max_dsp_U77 : component dut_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_293_p0,
        din1 => fc1_weight_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_293_p2);

    dut_fcmp_32ns_32ns_1_1_U78 : component dut_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => biased_reg_621,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => tmp_38_fu_298_p2);

    dut_mux_8to1_sel14_128_1_U79 : component dut_mux_8to1_sel14_128_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 128,
        din2_WIDTH => 128,
        din3_WIDTH => 128,
        din4_WIDTH => 128,
        din5_WIDTH => 128,
        din6_WIDTH => 128,
        din7_WIDTH => 128,
        din8_WIDTH => 128,
        din9_WIDTH => 14,
        dout_WIDTH => 128)
    port map (
        din1 => input_r_q0,
        din2 => input1_q0,
        din3 => input2_q0,
        din4 => input3_q0,
        din5 => input4_q0,
        din6 => input5_q0,
        din7 => input6_q0,
        din8 => input7_q0,
        din9 => tmp_40_fu_400_p9,
        dout => tmp_40_fu_400_p10);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    m_reg_255_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
                m_reg_255 <= m_2_reg_511;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond1_fu_309_p2))) then 
                m_reg_255 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    n_reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
                n_reg_219 <= n_1_reg_503;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                n_reg_219 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    phi_mul1_reg_231_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
                phi_mul1_reg_231 <= next_mul2_reg_495;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                phi_mul1_reg_231 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
                phi_mul_reg_266 <= next_mul_reg_526;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond1_fu_309_p2))) then 
                phi_mul_reg_266 <= ap_const_lv19_0;
            end if; 
        end if;
    end process;

    phi_urem_reg_277_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
                phi_urem_reg_277 <= idx_urem_reg_516;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond1_fu_309_p2))) then 
                phi_urem_reg_277 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    sum_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
                sum_reg_243 <= grp_fu_288_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond1_fu_309_p2))) then 
                sum_reg_243 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18)) then
                biased_reg_621 <= grp_fu_288_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then
                fc1_bias_load_reg_616 <= fc1_bias_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond_fu_325_p2 = ap_const_lv1_0))) then
                idx_urem_reg_516 <= idx_urem_fu_349_p3;
                next_mul_reg_526 <= next_mul_fu_363_p2;
                tmp_100_reg_531 <= phi_mul_reg_266(18 downto 17);
                w_index_reg_521 <= w_index_fu_357_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                m_2_reg_511 <= m_2_fu_331_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                n_1_reg_503 <= n_1_fu_315_p2;
                next_mul2_reg_495 <= next_mul2_fu_303_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((exitcond_fu_325_p2 = ap_const_lv1_0)))) then
                    output_addr_reg_581(6 downto 0) <= tmp_14_fu_391_p1(8 - 1 downto 0)(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                tmp_101_reg_586 <= tmp_101_fu_422_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then
                tmp_13_reg_606 <= grp_fu_293_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then
                tmp_33_reg_627 <= tmp_33_fu_475_p3;
            end if;
        end if;
    end process;
    output_addr_reg_581(7) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_fu_325_p2, exitcond1_fu_309_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_309_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((exitcond_fu_325_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st14_fsm_13;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, exitcond1_fu_309_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond1_fu_309_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond1_fu_309_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond1_fu_309_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_120_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_120 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_131_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_131 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_174_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_174 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_185_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_185 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_195_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_195 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    ap_sig_204_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_204 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    ap_sig_212_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_212 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    ap_sig_220_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_220 <= (ap_const_lv1_1 = ap_CS_fsm(18 downto 18));
    end process;


    ap_sig_229_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_229 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    ap_sig_242_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_242 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    ap_sig_273_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_273 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    ap_sig_280_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_280 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    ap_sig_38_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_38 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_204)
    begin
        if (ap_sig_204) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_212)
    begin
        if (ap_sig_212) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_280)
    begin
        if (ap_sig_280) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st19_fsm_18_assign_proc : process(ap_sig_220)
    begin
        if (ap_sig_220) then 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_38)
    begin
        if (ap_sig_38) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st20_fsm_19_assign_proc : process(ap_sig_229)
    begin
        if (ap_sig_229) then 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st21_fsm_20_assign_proc : process(ap_sig_242)
    begin
        if (ap_sig_242) then 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_120)
    begin
        if (ap_sig_120) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_131)
    begin
        if (ap_sig_131) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_174)
    begin
        if (ap_sig_174) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_185)
    begin
        if (ap_sig_185) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_195)
    begin
        if (ap_sig_195) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_273)
    begin
        if (ap_sig_273) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    biased_to_int_fu_434_p1 <= biased_reg_621;
    exitcond1_fu_309_p2 <= "1" when (n_reg_219 = ap_const_lv7_78) else "0";
    exitcond_fu_325_p2 <= "1" when (m_reg_255 = ap_const_lv9_190) else "0";
    fc1_bias_address0 <= tmp_14_fu_391_p1(7 - 1 downto 0);

    fc1_bias_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            fc1_bias_ce0 <= ap_const_logic_1;
        else 
            fc1_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fc1_weight_address0 <= tmp_12_fu_426_p1(16 - 1 downto 0);

    fc1_weight_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            fc1_weight_ce0 <= ap_const_logic_1;
        else 
            fc1_weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_288_p1_assign_proc : process(tmp_13_reg_606, fc1_bias_load_reg_616, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st15_fsm_14)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
            grp_fu_288_p1 <= fc1_bias_load_reg_616;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            grp_fu_288_p1 <= tmp_13_reg_606;
        else 
            grp_fu_288_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_293_p0 <= tmp_101_reg_586;
    idx_urem_fu_349_p3 <= 
        next_urem_fu_337_p2 when (tmp_99_fu_343_p2(0) = '1') else 
        ap_const_lv9_0;
    input1_address0 <= newIndex4_fu_379_p1(8 - 1 downto 0);

    input1_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            input1_ce0 <= ap_const_logic_1;
        else 
            input1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input2_address0 <= newIndex4_fu_379_p1(8 - 1 downto 0);

    input2_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            input2_ce0 <= ap_const_logic_1;
        else 
            input2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input3_address0 <= newIndex4_fu_379_p1(8 - 1 downto 0);

    input3_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            input3_ce0 <= ap_const_logic_1;
        else 
            input3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input4_address0 <= newIndex4_fu_379_p1(8 - 1 downto 0);

    input4_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            input4_ce0 <= ap_const_logic_1;
        else 
            input4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input5_address0 <= newIndex4_fu_379_p1(8 - 1 downto 0);

    input5_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            input5_ce0 <= ap_const_logic_1;
        else 
            input5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input6_address0 <= newIndex4_fu_379_p1(8 - 1 downto 0);

    input6_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            input6_ce0 <= ap_const_logic_1;
        else 
            input6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input7_address0 <= newIndex4_fu_379_p1(8 - 1 downto 0);

    input7_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            input7_ce0 <= ap_const_logic_1;
        else 
            input7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_r_address0 <= newIndex4_fu_379_p1(8 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_2_fu_331_p2 <= std_logic_vector(unsigned(m_reg_255) + unsigned(ap_const_lv9_1));
    m_cast5_fu_321_p1 <= std_logic_vector(resize(unsigned(m_reg_255),16));
    n_1_fu_315_p2 <= std_logic_vector(unsigned(n_reg_219) + unsigned(ap_const_lv7_1));
    newIndex4_fu_379_p1 <= std_logic_vector(resize(unsigned(phi_urem_reg_277),64));
    next_mul2_fu_303_p2 <= std_logic_vector(unsigned(phi_mul1_reg_231) + unsigned(ap_const_lv16_190));
    next_mul_fu_363_p2 <= std_logic_vector(unsigned(ap_const_lv19_37C) + unsigned(phi_mul_reg_266));
    next_urem_fu_337_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(phi_urem_reg_277));
    notlhs_fu_451_p2 <= "0" when (tmp_fu_437_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_457_p2 <= "1" when (tmp_98_fu_447_p1 = ap_const_lv23_0) else "0";
    output_r_address0 <= output_addr_reg_581;

    output_r_ce0_assign_proc : process(ap_sig_cseq_ST_st20_fsm_19, ap_sig_cseq_ST_st21_fsm_20)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) or (ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= (output_r_q0(127 downto 32) & tmp_33_reg_627);

    output_r_we0_assign_proc : process(ap_sig_cseq_ST_st21_fsm_20)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_101_fu_422_p1 <= tmp_40_fu_400_p10(32 - 1 downto 0);
    tmp_12_fu_426_p1 <= std_logic_vector(resize(unsigned(w_index_reg_521),64));
    tmp_14_fu_391_p1 <= std_logic_vector(resize(unsigned(n_reg_219),64));
    tmp_33_fu_475_p3 <= 
        biased_to_int_fu_434_p1 when (tmp_39_fu_469_p2(0) = '1') else 
        ap_const_lv32_0;
    tmp_39_fu_469_p2 <= (tmp_s_fu_463_p2 and tmp_38_fu_298_p2);
    tmp_40_fu_400_p9 <= std_logic_vector(resize(unsigned(tmp_100_reg_531),14));
    tmp_98_fu_447_p1 <= biased_to_int_fu_434_p1(23 - 1 downto 0);
    tmp_99_fu_343_p2 <= "1" when (unsigned(next_urem_fu_337_p2) < unsigned(ap_const_lv9_93)) else "0";
    tmp_fu_437_p4 <= biased_to_int_fu_434_p1(30 downto 23);
    tmp_s_fu_463_p2 <= (notrhs_fu_457_p2 or notlhs_fu_451_p2);
    w_index_fu_357_p2 <= std_logic_vector(unsigned(m_cast5_fu_321_p1) + unsigned(phi_mul1_reg_231));
end behav;
