-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_dense_mlp_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (127 downto 0);
    output_r_q0 : IN STD_LOGIC_VECTOR (127 downto 0) );
end;


architecture behav of dut_dense_mlp_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (19 downto 0) := "00000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (19 downto 0) := "00000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (19 downto 0) := "00000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (19 downto 0) := "00000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (19 downto 0) := "00000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (19 downto 0) := "00001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (19 downto 0) := "00010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (19 downto 0) := "00100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (19 downto 0) := "01000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (19 downto 0) := "10000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv7_54 : STD_LOGIC_VECTOR (6 downto 0) := "1010100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_1F : STD_LOGIC_VECTOR (8 downto 0) := "000011111";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_37 : BOOLEAN;
    signal fc2_weight_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal fc2_weight_ce0 : STD_LOGIC;
    signal fc2_weight_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc2_bias_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal fc2_bias_ce0 : STD_LOGIC;
    signal fc2_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_1_fu_163_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal n_1_reg_313 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_77 : BOOLEAN;
    signal tmp_s_fu_193_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_s_reg_318 : STD_LOGIC_VECTOR (14 downto 0);
    signal exitcond2_fu_157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_2_fu_209_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal m_2_reg_326 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_92 : BOOLEAN;
    signal exitcond_fu_203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_addr_reg_346 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_114 : BOOLEAN;
    signal grp_fu_147_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_361 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_124 : BOOLEAN;
    signal grp_fu_142_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_133 : BOOLEAN;
    signal fc2_bias_load_reg_371 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_141 : BOOLEAN;
    signal biased_reg_376 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st18_fsm_17 : STD_LOGIC;
    signal ap_sig_149 : BOOLEAN;
    signal tmp_41_fu_290_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_41_reg_382 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st19_fsm_18 : STD_LOGIC;
    signal ap_sig_158 : BOOLEAN;
    signal n_reg_107 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st20_fsm_19 : STD_LOGIC;
    signal ap_sig_171 : BOOLEAN;
    signal sum_reg_119 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_reg_131 : STD_LOGIC_VECTOR (6 downto 0);
    signal newIndex7_fu_224_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_229_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_234_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_142_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_190 : BOOLEAN;
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_197 : BOOLEAN;
    signal grp_fu_147_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl_fu_169_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl1_fu_181_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_cast_fu_177_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl1_cast_fu_189_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal m_cast5_fu_199_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal w_index_fu_215_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal w_index_cast_fu_220_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_103_fu_240_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal biased_to_int_fu_249_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_252_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_102_fu_262_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_44_fu_152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_46_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (19 downto 0);

    component dut_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_fcmp_32ns_32ns_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component dut_dense_mlp_1_fc2_weight IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_dense_mlp_1_fc2_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    fc2_weight_U : component dut_dense_mlp_1_fc2_weight
    generic map (
        DataWidth => 32,
        AddressRange => 10080,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc2_weight_address0,
        ce0 => fc2_weight_ce0,
        q0 => fc2_weight_q0);

    fc2_bias_U : component dut_dense_mlp_1_fc2_bias
    generic map (
        DataWidth => 32,
        AddressRange => 84,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc2_bias_address0,
        ce0 => fc2_bias_ce0,
        q0 => fc2_bias_q0);

    dut_fadd_32ns_32ns_32_5_full_dsp_U91 : component dut_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_reg_119,
        din1 => grp_fu_142_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_142_p2);

    dut_fmul_32ns_32ns_32_4_max_dsp_U92 : component dut_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_147_p0,
        din1 => fc2_weight_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_147_p2);

    dut_fcmp_32ns_32ns_1_1_U93 : component dut_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => biased_reg_376,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => tmp_44_fu_152_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    m_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
                m_reg_131 <= m_2_reg_326;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond2_fu_157_p2 = ap_const_lv1_0))) then 
                m_reg_131 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    n_reg_107_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
                n_reg_107 <= n_1_reg_313;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                n_reg_107 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    sum_reg_119_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
                sum_reg_119 <= grp_fu_142_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond2_fu_157_p2 = ap_const_lv1_0))) then 
                sum_reg_119 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then
                biased_reg_376 <= grp_fu_142_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then
                fc2_bias_load_reg_371 <= fc2_bias_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                m_2_reg_326 <= m_2_fu_209_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                n_1_reg_313 <= n_1_fu_163_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond_fu_203_p2)))) then
                    output_addr_reg_346(6 downto 0) <= tmp_15_fu_234_p1(8 - 1 downto 0)(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then
                tmp_14_reg_361 <= grp_fu_147_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18)) then
                tmp_41_reg_382 <= tmp_41_fu_290_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond2_fu_157_p2 = ap_const_lv1_0))) then
                    tmp_s_reg_318(14 downto 3) <= tmp_s_fu_193_p2(14 downto 3);
            end if;
        end if;
    end process;
    tmp_s_reg_318(2 downto 0) <= "000";
    output_addr_reg_346(7) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond2_fu_157_p2, exitcond_fu_203_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond2_fu_157_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_lv1_0 = exitcond_fu_203_p2))) then
                    ap_NS_fsm <= ap_ST_st13_fsm_12;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, exitcond2_fu_157_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond2_fu_157_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond2_fu_157_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond2_fu_157_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_114_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_114 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_124_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_124 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    ap_sig_133_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_133 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    ap_sig_141_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_141 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    ap_sig_149_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_149 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    ap_sig_158_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_158 <= (ap_const_lv1_1 = ap_CS_fsm(18 downto 18));
    end process;


    ap_sig_171_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_171 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    ap_sig_190_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_190 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    ap_sig_197_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_197 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    ap_sig_37_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_37 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_77_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_77 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_92_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_92 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_133)
    begin
        if (ap_sig_133) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_141)
    begin
        if (ap_sig_141) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_197)
    begin
        if (ap_sig_197) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st18_fsm_17_assign_proc : process(ap_sig_149)
    begin
        if (ap_sig_149) then 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st19_fsm_18_assign_proc : process(ap_sig_158)
    begin
        if (ap_sig_158) then 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_37)
    begin
        if (ap_sig_37) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st20_fsm_19_assign_proc : process(ap_sig_171)
    begin
        if (ap_sig_171) then 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_77)
    begin
        if (ap_sig_77) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_92)
    begin
        if (ap_sig_92) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_114)
    begin
        if (ap_sig_114) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_124)
    begin
        if (ap_sig_124) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_190)
    begin
        if (ap_sig_190) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;

    biased_to_int_fu_249_p1 <= biased_reg_376;
    exitcond2_fu_157_p2 <= "1" when (n_reg_107 = ap_const_lv7_54) else "0";
    exitcond_fu_203_p2 <= "1" when (m_reg_131 = ap_const_lv7_78) else "0";
    fc2_bias_address0 <= tmp_15_fu_234_p1(7 - 1 downto 0);

    fc2_bias_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            fc2_bias_ce0 <= ap_const_logic_1;
        else 
            fc2_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fc2_weight_address0 <= tmp_13_fu_229_p1(14 - 1 downto 0);

    fc2_weight_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            fc2_weight_ce0 <= ap_const_logic_1;
        else 
            fc2_weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_142_p1_assign_proc : process(tmp_14_reg_361, fc2_bias_load_reg_371, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            grp_fu_142_p1 <= fc2_bias_load_reg_371;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            grp_fu_142_p1 <= tmp_14_reg_361;
        else 
            grp_fu_142_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_147_p0 <= tmp_103_fu_240_p1;
    input_r_address0 <= newIndex7_fu_224_p1(8 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_2_fu_209_p2 <= std_logic_vector(unsigned(m_reg_131) + unsigned(ap_const_lv7_1));
    m_cast5_fu_199_p1 <= std_logic_vector(resize(unsigned(m_reg_131),15));
    n_1_fu_163_p2 <= std_logic_vector(unsigned(n_reg_107) + unsigned(ap_const_lv7_1));
    newIndex7_fu_224_p1 <= std_logic_vector(resize(unsigned(m_reg_131),64));
    notlhs_fu_266_p2 <= "0" when (tmp_fu_252_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_272_p2 <= "1" when (tmp_102_fu_262_p1 = ap_const_lv23_0) else "0";
    output_r_address0 <= output_addr_reg_346;

    output_r_ce0_assign_proc : process(ap_sig_cseq_ST_st19_fsm_18, ap_sig_cseq_ST_st20_fsm_19)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18) or (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= (output_r_q0(127 downto 32) & tmp_41_reg_382);

    output_r_we0_assign_proc : process(ap_sig_cseq_ST_st20_fsm_19)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_189_p1 <= std_logic_vector(resize(unsigned(p_shl1_fu_181_p3),15));
    p_shl1_fu_181_p3 <= (n_reg_107 & ap_const_lv3_0);
    p_shl_cast_fu_177_p1 <= std_logic_vector(resize(unsigned(p_shl_fu_169_p3),15));
    p_shl_fu_169_p3 <= (n_reg_107 & ap_const_lv7_0);
    tmp_102_fu_262_p1 <= biased_to_int_fu_249_p1(23 - 1 downto 0);
    tmp_103_fu_240_p1 <= input_r_q0(32 - 1 downto 0);
    tmp_13_fu_229_p1 <= std_logic_vector(resize(unsigned(w_index_cast_fu_220_p1),64));
    tmp_15_fu_234_p1 <= std_logic_vector(resize(unsigned(n_reg_107),64));
    tmp_41_fu_290_p3 <= 
        biased_to_int_fu_249_p1 when (tmp_46_fu_284_p2(0) = '1') else 
        ap_const_lv32_0;
    tmp_43_fu_278_p2 <= (notrhs_fu_272_p2 or notlhs_fu_266_p2);
    tmp_46_fu_284_p2 <= (tmp_43_fu_278_p2 and tmp_44_fu_152_p2);
    tmp_fu_252_p4 <= biased_to_int_fu_249_p1(30 downto 23);
    tmp_s_fu_193_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_177_p1) - unsigned(p_shl1_cast_fu_189_p1));
        w_index_cast_fu_220_p1 <= std_logic_vector(resize(signed(w_index_fu_215_p2),32));

    w_index_fu_215_p2 <= std_logic_vector(unsigned(tmp_s_reg_318) + unsigned(m_cast5_fu_199_p1));
end behav;
