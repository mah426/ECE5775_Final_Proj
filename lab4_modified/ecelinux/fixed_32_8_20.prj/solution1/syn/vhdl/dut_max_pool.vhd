-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_max_pool is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    M : IN STD_LOGIC_VECTOR (5 downto 0);
    I : IN STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of dut_max_pool is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_800000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_29 : BOOLEAN;
    signal O_fu_212_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal O_reg_502 : STD_LOGIC_VECTOR (3 downto 0);
    signal O_cast9_cast1_fu_222_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal O_cast9_cast1_reg_508 : STD_LOGIC_VECTOR (11 downto 0);
    signal O_cast9_cast_fu_226_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal O_cast9_cast_reg_513 : STD_LOGIC_VECTOR (7 downto 0);
    signal I_cast2_fu_230_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal I_cast2_reg_518 : STD_LOGIC_VECTOR (8 downto 0);
    signal I_cast_fu_234_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal I_cast_reg_523 : STD_LOGIC_VECTOR (13 downto 0);
    signal next_mul_fu_238_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal next_mul_reg_528 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_71 : BOOLEAN;
    signal m_1_fu_256_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal m_1_reg_536 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_fu_262_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_reg_541 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_cast6_fu_267_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal x_cast6_reg_546 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_89 : BOOLEAN;
    signal x_1_fu_276_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal x_1_reg_554 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_cast_fu_290_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_5_cast_reg_559 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond3_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_1_fu_303_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal y_1_reg_567 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_105 : BOOLEAN;
    signal tmp3_fu_318_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp3_reg_572 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond2_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal o_index_fu_323_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal o_index_reg_577 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_119 : BOOLEAN;
    signal tmp_8_cast_fu_335_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_8_cast_reg_582 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_cast4_fu_339_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal c_cast4_reg_587 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_130 : BOOLEAN;
    signal c_1_fu_349_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_1_reg_595 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_1_fu_369_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_1_reg_603 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_141 : BOOLEAN;
    signal tmp4_fu_381_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp4_reg_608 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_389_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp5_reg_613 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_155 : BOOLEAN;
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_164 : BOOLEAN;
    signal input_load_reg_623 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_172 : BOOLEAN;
    signal tmp_25_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_reg_630 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_181 : BOOLEAN;
    signal max_2_fu_490_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_190 : BOOLEAN;
    signal m_reg_114 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul_reg_125 : STD_LOGIC_VECTOR (8 downto 0);
    signal x_reg_137 : STD_LOGIC_VECTOR (3 downto 0);
    signal y_reg_148 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond1_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_reg_160 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_reg_173 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_1_reg_184 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_reg_196 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_9_fu_355_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_403_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_cast_fu_247_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_fu_262_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_262_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_5_fu_282_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal y_cast5_fu_294_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_309_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp3_fu_318_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp3_fu_318_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_327_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_cast3_fu_359_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_fu_375_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp5_fu_389_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp5_fu_389_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp2_fu_394_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_index_fu_398_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal input_load_to_int_fu_408_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_1_to_int_fu_425_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_411_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_fu_421_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_429_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_fu_439_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs5_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs4_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp3_fu_318_p10 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp5_fu_389_p10 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_2_fu_262_p10 : STD_LOGIC_VECTOR (7 downto 0);

    component dut_fcmp_32ns_32ns_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    dut_fcmp_32ns_32ns_1_1_U11 : component dut_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => input_load_reg_623,
        din1 => max_1_reg_184,
        opcode => ap_const_lv5_2,
        dout => tmp_25_fu_207_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = exitcond_fu_363_p2)))) then 
                c_reg_173 <= c_1_reg_595;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                c_reg_173 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    m_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond3_fu_271_p2)))) then 
                m_reg_114 <= m_1_reg_536;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                m_reg_114 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    max_1_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
                max_1_reg_184 <= max_2_fu_490_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = exitcond1_fu_343_p2))) then 
                max_1_reg_184 <= max_reg_160;
            end if; 
        end if;
    end process;

    max_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = exitcond_fu_363_p2)))) then 
                max_reg_160 <= max_1_reg_184;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                max_reg_160 <= ap_const_lv32_800000;
            end if; 
        end if;
    end process;

    phi_mul_reg_125_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond3_fu_271_p2)))) then 
                phi_mul_reg_125 <= next_mul_reg_528;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                phi_mul_reg_125 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    r_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
                r_reg_196 <= r_1_reg_603;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = exitcond1_fu_343_p2))) then 
                r_reg_196 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    x_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond2_fu_298_p2)))) then 
                x_reg_137 <= x_1_reg_554;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_1_fu_251_p2 = ap_const_lv1_0)))) then 
                x_reg_137 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    y_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = exitcond1_fu_343_p2)))) then 
                y_reg_148 <= y_1_reg_567;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond3_fu_271_p2))) then 
                y_reg_148 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                    I_cast2_reg_518(5 downto 0) <= I_cast2_fu_230_p1(5 downto 0);
                    I_cast_reg_523(5 downto 0) <= I_cast_fu_234_p1(5 downto 0);
                    O_cast9_cast1_reg_508(3 downto 0) <= O_cast9_cast1_fu_222_p1(3 downto 0);
                    O_cast9_cast_reg_513(3 downto 0) <= O_cast9_cast_fu_226_p1(3 downto 0);
                O_reg_502 <= I(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                c_1_reg_595 <= c_1_fu_349_p2;
                    c_cast4_reg_587(1 downto 0) <= c_cast4_fu_339_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then
                input_load_reg_623 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                m_1_reg_536 <= m_1_fu_256_p2;
                next_mul_reg_528 <= next_mul_fu_238_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                o_index_reg_577 <= o_index_fu_323_p2;
                    tmp_8_cast_reg_582(4 downto 1) <= tmp_8_cast_fu_335_p1(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then
                r_1_reg_603 <= r_1_fu_369_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond2_fu_298_p2))) then
                tmp3_reg_572 <= tmp3_fu_318_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (ap_const_lv1_0 = exitcond_fu_363_p2))) then
                tmp4_reg_608 <= tmp4_fu_381_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then
                tmp5_reg_613 <= tmp5_fu_389_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then
                tmp_25_reg_630 <= tmp_25_fu_207_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_1_fu_251_p2 = ap_const_lv1_0)))) then
                tmp_2_reg_541 <= tmp_2_fu_262_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond3_fu_271_p2))) then
                    tmp_5_cast_reg_559(4 downto 1) <= tmp_5_cast_fu_290_p1(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                x_1_reg_554 <= x_1_fu_276_p2;
                    x_cast6_reg_546(3 downto 0) <= x_cast6_fu_267_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                y_1_reg_567 <= y_1_fu_303_p2;
            end if;
        end if;
    end process;
    O_cast9_cast1_reg_508(11 downto 4) <= "00000000";
    O_cast9_cast_reg_513(7 downto 4) <= "0000";
    I_cast2_reg_518(8 downto 6) <= "000";
    I_cast_reg_523(13 downto 6) <= "00000000";
    x_cast6_reg_546(11 downto 4) <= "00000000";
    tmp_5_cast_reg_559(0) <= '0';
    tmp_5_cast_reg_559(13 downto 5) <= "000000000";
    tmp_8_cast_reg_582(0) <= '0';
    tmp_8_cast_reg_582(8 downto 5) <= "0000";
    c_cast4_reg_587(13 downto 2) <= "000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_1_fu_251_p2, exitcond3_fu_271_p2, exitcond2_fu_298_p2, exitcond_fu_363_p2, exitcond1_fu_343_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((tmp_1_fu_251_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_lv1_0 = exitcond3_fu_271_p2))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (not((ap_const_lv1_0 = exitcond2_fu_298_p2))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_343_p2))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st7_fsm_6 => 
                if (not((ap_const_lv1_0 = exitcond_fu_363_p2))) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                end if;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    I_cast2_fu_230_p1 <= std_logic_vector(resize(unsigned(I),9));
    I_cast_fu_234_p1 <= std_logic_vector(resize(unsigned(I),14));
    O_cast9_cast1_fu_222_p1 <= std_logic_vector(resize(unsigned(O_fu_212_p4),12));
    O_cast9_cast_fu_226_p1 <= std_logic_vector(resize(unsigned(O_fu_212_p4),8));
    O_fu_212_p4 <= I(4 downto 1);

    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, tmp_1_fu_251_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_1_fu_251_p2 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, tmp_1_fu_251_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_1_fu_251_p2 = ap_const_lv1_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_105_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_105 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_119_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_119 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_130_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_130 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_141_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_141 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    ap_sig_155_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_155 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    ap_sig_164_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_164 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    ap_sig_172_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_172 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    ap_sig_181_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_181 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    ap_sig_190_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_190 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    ap_sig_29_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_29 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_71_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_71 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_89_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_89 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_172)
    begin
        if (ap_sig_172) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_181)
    begin
        if (ap_sig_181) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_190)
    begin
        if (ap_sig_190) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_29)
    begin
        if (ap_sig_29) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_71)
    begin
        if (ap_sig_71) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_89)
    begin
        if (ap_sig_89) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_105)
    begin
        if (ap_sig_105) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_119)
    begin
        if (ap_sig_119) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_130)
    begin
        if (ap_sig_130) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_141)
    begin
        if (ap_sig_141) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_155)
    begin
        if (ap_sig_155) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_164)
    begin
        if (ap_sig_164) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    c_1_fu_349_p2 <= std_logic_vector(unsigned(c_reg_173) + unsigned(ap_const_lv2_1));
    c_cast4_fu_339_p1 <= std_logic_vector(resize(unsigned(c_reg_173),14));
    exitcond1_fu_343_p2 <= "1" when (c_reg_173 = ap_const_lv2_2) else "0";
    exitcond2_fu_298_p2 <= "1" when (y_reg_148 = O_reg_502) else "0";
    exitcond3_fu_271_p2 <= "1" when (x_reg_137 = O_reg_502) else "0";
    exitcond_fu_363_p2 <= "1" when (r_reg_196 = ap_const_lv2_2) else "0";
    i_index_fu_398_p2 <= std_logic_vector(unsigned(c_cast4_reg_587) + unsigned(tmp2_fu_394_p2));
    input_load_to_int_fu_408_p1 <= input_load_reg_623;
    input_r_address0 <= tmp_7_fu_403_p1(13 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_sig_cseq_ST_st9_fsm_8)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_1_fu_256_p2 <= std_logic_vector(unsigned(m_reg_114) + unsigned(ap_const_lv5_1));
    m_cast_fu_247_p1 <= std_logic_vector(resize(unsigned(m_reg_114),6));
    max_1_to_int_fu_425_p1 <= max_1_reg_184;
    max_2_fu_490_p3 <= 
        input_load_reg_623 when (tmp_26_fu_485_p2(0) = '1') else 
        max_1_reg_184;
    next_mul_fu_238_p2 <= std_logic_vector(unsigned(phi_mul_reg_125) + unsigned(I_cast2_reg_518));
    notlhs4_fu_461_p2 <= "0" when (tmp_20_fu_429_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_443_p2 <= "0" when (tmp_18_fu_411_p4 = ap_const_lv8_FF) else "1";
    notrhs5_fu_467_p2 <= "1" when (tmp_21_fu_439_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_449_p2 <= "1" when (tmp_19_fu_421_p1 = ap_const_lv23_0) else "0";
    o_index_fu_323_p2 <= std_logic_vector(unsigned(x_cast6_reg_546) + unsigned(tmp3_reg_572));
    output_r_address0 <= tmp_9_fu_355_p1(13 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= max_reg_160;

    output_r_we0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, exitcond1_fu_343_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = exitcond1_fu_343_p2))))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_1_fu_369_p2 <= std_logic_vector(unsigned(r_reg_196) + unsigned(ap_const_lv2_1));
    r_cast3_fu_359_p1 <= std_logic_vector(resize(unsigned(r_reg_196),9));
    tmp1_fu_375_p2 <= std_logic_vector(unsigned(r_cast3_fu_359_p1) + unsigned(phi_mul_reg_125));
    tmp2_fu_394_p2 <= std_logic_vector(unsigned(tmp5_reg_613) + unsigned(tmp_5_cast_reg_559));
    tmp3_fu_318_p0 <= O_cast9_cast1_reg_508(4 - 1 downto 0);
    tmp3_fu_318_p1 <= tmp3_fu_318_p10(8 - 1 downto 0);
    tmp3_fu_318_p10 <= std_logic_vector(resize(unsigned(tmp_fu_309_p2),12));
    tmp3_fu_318_p2 <= std_logic_vector(resize(unsigned(tmp3_fu_318_p0) * unsigned(tmp3_fu_318_p1), 12));
    tmp4_fu_381_p2 <= std_logic_vector(unsigned(tmp_8_cast_reg_582) + unsigned(tmp1_fu_375_p2));
    tmp5_fu_389_p0 <= I_cast_reg_523(6 - 1 downto 0);
    tmp5_fu_389_p1 <= tmp5_fu_389_p10(9 - 1 downto 0);
    tmp5_fu_389_p10 <= std_logic_vector(resize(unsigned(tmp4_reg_608),14));
    tmp5_fu_389_p2 <= std_logic_vector(resize(unsigned(tmp5_fu_389_p0) * unsigned(tmp5_fu_389_p1), 14));
    tmp_18_fu_411_p4 <= input_load_to_int_fu_408_p1(30 downto 23);
    tmp_19_fu_421_p1 <= input_load_to_int_fu_408_p1(23 - 1 downto 0);
    tmp_1_fu_251_p2 <= "1" when (signed(m_cast_fu_247_p1) < signed(M)) else "0";
    tmp_20_fu_429_p4 <= max_1_to_int_fu_425_p1(30 downto 23);
    tmp_21_fu_439_p1 <= max_1_to_int_fu_425_p1(23 - 1 downto 0);
    tmp_22_fu_455_p2 <= (notrhs_fu_449_p2 or notlhs_fu_443_p2);
    tmp_23_fu_473_p2 <= (notrhs5_fu_467_p2 or notlhs4_fu_461_p2);
    tmp_24_fu_479_p2 <= (tmp_22_fu_455_p2 and tmp_23_fu_473_p2);
    tmp_26_fu_485_p2 <= (tmp_24_fu_479_p2 and tmp_25_reg_630);
    tmp_2_fu_262_p0 <= O_cast9_cast_reg_513(4 - 1 downto 0);
    tmp_2_fu_262_p1 <= tmp_2_fu_262_p10(5 - 1 downto 0);
    tmp_2_fu_262_p10 <= std_logic_vector(resize(unsigned(m_reg_114),8));
    tmp_2_fu_262_p2 <= std_logic_vector(resize(unsigned(tmp_2_fu_262_p0) * unsigned(tmp_2_fu_262_p1), 8));
    tmp_5_cast_fu_290_p1 <= std_logic_vector(resize(unsigned(tmp_5_fu_282_p3),14));
    tmp_5_fu_282_p3 <= (x_reg_137 & ap_const_lv1_0);
    tmp_7_fu_403_p1 <= std_logic_vector(resize(unsigned(i_index_fu_398_p2),64));
    tmp_8_cast_fu_335_p1 <= std_logic_vector(resize(unsigned(tmp_8_fu_327_p3),9));
    tmp_8_fu_327_p3 <= (y_reg_148 & ap_const_lv1_0);
    tmp_9_fu_355_p1 <= std_logic_vector(resize(unsigned(o_index_reg_577),64));
    tmp_fu_309_p2 <= std_logic_vector(unsigned(tmp_2_reg_541) + unsigned(y_cast5_fu_294_p1));
    x_1_fu_276_p2 <= std_logic_vector(unsigned(x_reg_137) + unsigned(ap_const_lv4_1));
    x_cast6_fu_267_p1 <= std_logic_vector(resize(unsigned(x_reg_137),12));
    y_1_fu_303_p2 <= std_logic_vector(unsigned(y_reg_148) + unsigned(ap_const_lv4_1));
    y_cast5_fu_294_p1 <= std_logic_vector(resize(unsigned(y_reg_148),8));
end behav;
