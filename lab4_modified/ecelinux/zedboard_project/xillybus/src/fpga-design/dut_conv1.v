// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dut_conv1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        M,
        N,
        I,
        L
);

parameter    ap_ST_st1_fsm_0 = 18'b1;
parameter    ap_ST_st2_fsm_1 = 18'b10;
parameter    ap_ST_st3_fsm_2 = 18'b100;
parameter    ap_ST_st4_fsm_3 = 18'b1000;
parameter    ap_ST_st5_fsm_4 = 18'b10000;
parameter    ap_ST_st6_fsm_5 = 18'b100000;
parameter    ap_ST_st7_fsm_6 = 18'b1000000;
parameter    ap_ST_st8_fsm_7 = 18'b10000000;
parameter    ap_ST_st9_fsm_8 = 18'b100000000;
parameter    ap_ST_st10_fsm_9 = 18'b1000000000;
parameter    ap_ST_st11_fsm_10 = 18'b10000000000;
parameter    ap_ST_st12_fsm_11 = 18'b100000000000;
parameter    ap_ST_st13_fsm_12 = 18'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 18'b10000000000000;
parameter    ap_ST_st15_fsm_14 = 18'b100000000000000;
parameter    ap_ST_st16_fsm_15 = 18'b1000000000000000;
parameter    ap_ST_st17_fsm_16 = 18'b10000000000000000;
parameter    ap_ST_st18_fsm_17 = 18'b100000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv7_0 = 7'b0000000;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv6_3C = 6'b111100;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_const_lv12_19 = 12'b11001;
parameter    ap_const_lv3_5 = 3'b101;
parameter    ap_const_lv2_0 = 2'b00;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [12:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
input  [3:0] M;
input  [5:0] N;
input  [6:0] I;
input  [0:0] L;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_35;
wire   [8:0] conv1_weight_address0;
reg    conv1_weight_ce0;
wire   [31:0] conv1_weight_q0;
wire   [11:0] conv2_weight_address0;
reg    conv2_weight_ce0;
wire   [31:0] conv2_weight_q0;
wire   [5:0] O_fu_295_p2;
reg   [5:0] O_reg_587;
wire   [13:0] O_cast20_cast_fu_301_p1;
reg   [13:0] O_cast20_cast_reg_593;
wire   [8:0] O_cast_cast_fu_305_p1;
reg   [8:0] O_cast_cast_reg_598;
wire   [6:0] M_cast_fu_309_p1;
reg   [6:0] M_cast_reg_603;
wire   [7:0] I_cast4_fu_313_p1;
reg   [7:0] I_cast4_reg_608;
wire   [12:0] I_cast_fu_317_p1;
reg   [12:0] I_cast_reg_613;
wire   [6:0] next_mul3_fu_321_p2;
reg   [6:0] next_mul3_reg_618;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_99;
wire   [4:0] n_2_fu_339_p2;
reg   [4:0] n_2_reg_626;
wire   [8:0] tmp_13_fu_345_p2;
reg   [8:0] tmp_13_reg_631;
wire   [0:0] tmp_s_fu_334_p2;
wire   [7:0] x_cast1_fu_350_p1;
reg   [7:0] x_cast1_reg_636;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_117;
wire   [4:0] x_2_fu_367_p2;
reg   [4:0] x_2_reg_644;
wire   [13:0] tmp3_fu_382_p2;
reg   [13:0] tmp3_reg_649;
wire   [0:0] tmp_15_fu_362_p2;
wire   [12:0] y_cast1_fu_387_p1;
reg   [12:0] y_cast1_reg_654;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_134;
wire   [4:0] y_2_fu_404_p2;
reg   [4:0] y_2_reg_662;
wire   [13:0] o_index_fu_410_p2;
reg   [13:0] o_index_reg_667;
wire   [0:0] exitcond2_fu_399_p2;
wire   [7:0] next_mul_fu_415_p2;
reg   [7:0] next_mul_reg_672;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_150;
wire   [2:0] m_3_fu_433_p2;
reg   [2:0] m_3_reg_680;
wire   [11:0] tmp_22_fu_449_p2;
reg   [11:0] tmp_22_reg_685;
wire   [0:0] tmp_18_fu_428_p2;
wire   [12:0] c_cast1_fu_463_p1;
reg   [12:0] c_cast1_reg_690;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_167;
wire   [2:0] c_2_fu_473_p2;
reg   [2:0] c_2_reg_698;
wire   [11:0] tmp7_fu_479_p2;
reg   [11:0] tmp7_reg_703;
wire   [0:0] exitcond1_fu_467_p2;
wire   [2:0] r_2_fu_498_p2;
reg   [2:0] r_2_reg_711;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_183;
wire   [7:0] tmp4_fu_510_p2;
reg   [7:0] tmp4_reg_716;
wire   [0:0] exitcond_fu_492_p2;
wire   [11:0] w_index_fu_533_p2;
reg   [11:0] w_index_reg_721;
wire   [12:0] tmp5_fu_541_p2;
reg   [12:0] tmp5_reg_726;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_199;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_216;
wire   [31:0] p_pn_v_fu_565_p3;
reg   [31:0] p_pn_v_reg_746;
reg    ap_sig_cseq_ST_st10_fsm_9;
reg    ap_sig_226;
wire   [31:0] grp_fu_286_p2;
reg   [31:0] p_pn_reg_756;
reg    ap_sig_cseq_ST_st13_fsm_12;
reg    ap_sig_235;
wire   [31:0] grp_fu_281_p2;
reg    ap_sig_cseq_ST_st18_fsm_17;
reg    ap_sig_244;
reg   [4:0] n_reg_154;
reg   [6:0] phi_mul2_reg_165;
reg   [4:0] x_reg_177;
reg   [4:0] y_reg_188;
reg   [31:0] sum_reg_199;
reg   [2:0] m_reg_212;
reg   [7:0] phi_mul_reg_223;
reg   [31:0] sum_1_reg_235;
reg   [2:0] c_reg_247;
reg   [31:0] sum_2_reg_258;
reg   [2:0] r_reg_270;
wire   [63:0] tmp_23_fu_455_p1;
wire   [63:0] tmp_26_fu_546_p1;
wire   [63:0] tmp_25_fu_560_p1;
reg    ap_sig_cseq_ST_st14_fsm_13;
reg    ap_sig_293;
wire   [5:0] tmp_27_fu_291_p1;
wire   [5:0] n_cast_fu_330_p1;
wire   [5:0] tmp_13_fu_345_p0;
wire   [4:0] tmp_13_fu_345_p1;
wire   [5:0] x_cast_fu_358_p1;
wire   [8:0] x_cast2_fu_354_p1;
wire   [8:0] tmp_fu_373_p2;
wire   [8:0] tmp3_fu_382_p0;
wire   [5:0] tmp3_fu_382_p1;
wire   [5:0] y_cast_fu_395_p1;
wire   [13:0] y_cast2_fu_391_p1;
wire   [3:0] m_cast_fu_424_p1;
wire   [6:0] m_cast1_fu_420_p1;
wire   [6:0] tmp_21_fu_439_p2;
wire   [6:0] tmp_22_fu_449_p0;
wire   [11:0] c_cast_fu_459_p1;
wire   [7:0] r_cast9_fu_484_p1;
wire   [7:0] tmp1_fu_504_p2;
wire   [4:0] p_shl_fu_515_p3;
wire   [4:0] r_cast8_fu_488_p1;
wire   [4:0] tmp6_fu_523_p2;
wire   [11:0] tmp6_cast_fu_529_p1;
wire   [7:0] tmp5_fu_541_p0;
wire   [6:0] tmp5_fu_541_p1;
wire   [12:0] tmp2_fu_551_p2;
wire   [12:0] i_index_fu_555_p2;
reg   [17:0] ap_NS_fsm;
wire   [13:0] tmp3_fu_382_p00;
wire   [12:0] tmp5_fu_541_p00;
wire   [8:0] tmp_13_fu_345_p10;
wire   [11:0] tmp_22_fu_449_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 18'b1;
end

dut_conv1_conv1_weight #(
    .DataWidth( 32 ),
    .AddressRange( 450 ),
    .AddressWidth( 9 ))
conv1_weight_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv1_weight_address0),
    .ce0(conv1_weight_ce0),
    .q0(conv1_weight_q0)
);

dut_conv1_conv2_weight #(
    .DataWidth( 32 ),
    .AddressRange( 2400 ),
    .AddressWidth( 12 ))
conv2_weight_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv2_weight_address0),
    .ce0(conv2_weight_ce0),
    .q0(conv2_weight_q0)
);

dut_fadd_32ns_32ns_32_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dut_fadd_32ns_32ns_32_5_full_dsp_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_2_reg_258),
    .din1(p_pn_reg_756),
    .ce(1'b1),
    .dout(grp_fu_281_p2)
);

dut_fmul_32ns_32ns_32_4_max_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dut_fmul_32ns_32ns_32_4_max_dsp_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(input_r_q0),
    .din1(p_pn_v_reg_746),
    .ce(1'b1),
    .dout(grp_fu_286_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st7_fsm_6) & ~(1'b0 == exitcond_fu_492_p2))) begin
        c_reg_247 <= c_2_reg_698;
    end else if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) & ~(1'b0 == tmp_18_fu_428_p2))) begin
        c_reg_247 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & ~(1'b0 == exitcond1_fu_467_p2))) begin
        m_reg_212 <= m_3_reg_680;
    end else if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & (1'b0 == exitcond2_fu_399_p2))) begin
        m_reg_212 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & (1'b0 == tmp_15_fu_362_p2))) begin
        n_reg_154 <= n_2_reg_626;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        n_reg_154 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & (1'b0 == tmp_15_fu_362_p2))) begin
        phi_mul2_reg_165 <= next_mul3_reg_618;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        phi_mul2_reg_165 <= ap_const_lv7_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & ~(1'b0 == exitcond1_fu_467_p2))) begin
        phi_mul_reg_223 <= next_mul_reg_672;
    end else if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & (1'b0 == exitcond2_fu_399_p2))) begin
        phi_mul_reg_223 <= ap_const_lv8_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st18_fsm_17)) begin
        r_reg_270 <= r_2_reg_711;
    end else if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & (1'b0 == exitcond1_fu_467_p2))) begin
        r_reg_270 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st7_fsm_6) & ~(1'b0 == exitcond_fu_492_p2))) begin
        sum_1_reg_235 <= sum_2_reg_258;
    end else if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) & ~(1'b0 == tmp_18_fu_428_p2))) begin
        sum_1_reg_235 <= sum_reg_199;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st18_fsm_17)) begin
        sum_2_reg_258 <= grp_fu_281_p2;
    end else if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & (1'b0 == exitcond1_fu_467_p2))) begin
        sum_2_reg_258 <= sum_1_reg_235;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & ~(1'b0 == exitcond1_fu_467_p2))) begin
        sum_reg_199 <= sum_1_reg_235;
    end else if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & (1'b0 == exitcond2_fu_399_p2))) begin
        sum_reg_199 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & ~(1'b0 == exitcond2_fu_399_p2))) begin
        x_reg_177 <= x_2_reg_644;
    end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(tmp_s_fu_334_p2 == 1'b0))) begin
        x_reg_177 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) & (1'b0 == tmp_18_fu_428_p2))) begin
        y_reg_188 <= y_2_reg_662;
    end else if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & ~(1'b0 == tmp_15_fu_362_p2))) begin
        y_reg_188 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        I_cast4_reg_608[6 : 0] <= I_cast4_fu_313_p1[6 : 0];
        I_cast_reg_613[6 : 0] <= I_cast_fu_317_p1[6 : 0];
        M_cast_reg_603[3 : 0] <= M_cast_fu_309_p1[3 : 0];
        O_cast20_cast_reg_593[5 : 0] <= O_cast20_cast_fu_301_p1[5 : 0];
        O_cast_cast_reg_598[5 : 0] <= O_cast_cast_fu_305_p1[5 : 0];
        O_reg_587 <= O_fu_295_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        c_2_reg_698 <= c_2_fu_473_p2;
        c_cast1_reg_690[2 : 0] <= c_cast1_fu_463_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        m_3_reg_680 <= m_3_fu_433_p2;
        next_mul_reg_672 <= next_mul_fu_415_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        n_2_reg_626 <= n_2_fu_339_p2;
        next_mul3_reg_618 <= next_mul3_fu_321_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & (1'b0 == exitcond2_fu_399_p2))) begin
        o_index_reg_667 <= o_index_fu_410_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st13_fsm_12)) begin
        p_pn_reg_756 <= grp_fu_286_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        p_pn_v_reg_746 <= p_pn_v_fu_565_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        r_2_reg_711 <= r_2_fu_498_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & ~(1'b0 == tmp_15_fu_362_p2))) begin
        tmp3_reg_649 <= tmp3_fu_382_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st7_fsm_6) & (1'b0 == exitcond_fu_492_p2))) begin
        tmp4_reg_716 <= tmp4_fu_510_p2;
        w_index_reg_721 <= w_index_fu_533_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        tmp5_reg_726 <= tmp5_fu_541_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & (1'b0 == exitcond1_fu_467_p2))) begin
        tmp7_reg_703 <= tmp7_fu_479_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(tmp_s_fu_334_p2 == 1'b0))) begin
        tmp_13_reg_631 <= tmp_13_fu_345_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) & ~(1'b0 == tmp_18_fu_428_p2))) begin
        tmp_22_reg_685 <= tmp_22_fu_449_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        x_2_reg_644 <= x_2_fu_367_p2;
        x_cast1_reg_636[4 : 0] <= x_cast1_fu_350_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        y_2_reg_662 <= y_2_fu_404_p2;
        y_cast1_reg_654[4 : 0] <= y_cast1_fu_387_p1[4 : 0];
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0)) | ((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (tmp_s_fu_334_p2 == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (tmp_s_fu_334_p2 == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_226) begin
        ap_sig_cseq_ST_st10_fsm_9 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_9 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_235) begin
        ap_sig_cseq_ST_st13_fsm_12 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st13_fsm_12 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_293) begin
        ap_sig_cseq_ST_st14_fsm_13 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st14_fsm_13 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_244) begin
        ap_sig_cseq_ST_st18_fsm_17 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st18_fsm_17 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_35) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_99) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_117) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_134) begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_150) begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_167) begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_183) begin
        ap_sig_cseq_ST_st7_fsm_6 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_199) begin
        ap_sig_cseq_ST_st8_fsm_7 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_216) begin
        ap_sig_cseq_ST_st9_fsm_8 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        conv1_weight_ce0 = 1'b1;
    end else begin
        conv1_weight_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        conv2_weight_ce0 = 1'b1;
    end else begin
        conv2_weight_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) & (1'b0 == tmp_18_fu_428_p2))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if ((tmp_s_fu_334_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : begin
            if ((1'b0 == tmp_15_fu_362_p2)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st4_fsm_3 : begin
            if (~(1'b0 == exitcond2_fu_399_p2)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        end
        ap_ST_st5_fsm_4 : begin
            if ((1'b0 == tmp_18_fu_428_p2)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end
        end
        ap_ST_st6_fsm_5 : begin
            if (~(1'b0 == exitcond1_fu_467_p2)) begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end else begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end
        end
        ap_ST_st7_fsm_6 : begin
            if (~(1'b0 == exitcond_fu_492_p2)) begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end else begin
                ap_NS_fsm = ap_ST_st8_fsm_7;
            end
        end
        ap_ST_st8_fsm_7 : begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : begin
            ap_NS_fsm = ap_ST_st14_fsm_13;
        end
        ap_ST_st14_fsm_13 : begin
            ap_NS_fsm = ap_ST_st15_fsm_14;
        end
        ap_ST_st15_fsm_14 : begin
            ap_NS_fsm = ap_ST_st16_fsm_15;
        end
        ap_ST_st16_fsm_15 : begin
            ap_NS_fsm = ap_ST_st17_fsm_16;
        end
        ap_ST_st17_fsm_16 : begin
            ap_NS_fsm = ap_ST_st18_fsm_17;
        end
        ap_ST_st18_fsm_17 : begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign I_cast4_fu_313_p1 = I;

assign I_cast_fu_317_p1 = I;

assign M_cast_fu_309_p1 = M;

assign O_cast20_cast_fu_301_p1 = O_fu_295_p2;

assign O_cast_cast_fu_305_p1 = O_fu_295_p2;

assign O_fu_295_p2 = ($signed(ap_const_lv6_3C) + $signed(tmp_27_fu_291_p1));

always @ (*) begin
    ap_sig_117 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

always @ (*) begin
    ap_sig_134 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

always @ (*) begin
    ap_sig_150 = (1'b1 == ap_CS_fsm[ap_const_lv32_4]);
end

always @ (*) begin
    ap_sig_167 = (1'b1 == ap_CS_fsm[ap_const_lv32_5]);
end

always @ (*) begin
    ap_sig_183 = (1'b1 == ap_CS_fsm[ap_const_lv32_6]);
end

always @ (*) begin
    ap_sig_199 = (1'b1 == ap_CS_fsm[ap_const_lv32_7]);
end

always @ (*) begin
    ap_sig_216 = (1'b1 == ap_CS_fsm[ap_const_lv32_8]);
end

always @ (*) begin
    ap_sig_226 = (1'b1 == ap_CS_fsm[ap_const_lv32_9]);
end

always @ (*) begin
    ap_sig_235 = (1'b1 == ap_CS_fsm[ap_const_lv32_C]);
end

always @ (*) begin
    ap_sig_244 = (1'b1 == ap_CS_fsm[ap_const_lv32_11]);
end

always @ (*) begin
    ap_sig_293 = (1'b1 == ap_CS_fsm[ap_const_lv32_D]);
end

always @ (*) begin
    ap_sig_35 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_99 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

assign c_2_fu_473_p2 = (c_reg_247 + ap_const_lv3_1);

assign c_cast1_fu_463_p1 = c_reg_247;

assign c_cast_fu_459_p1 = c_reg_247;

assign conv1_weight_address0 = tmp_26_fu_546_p1;

assign conv2_weight_address0 = tmp_26_fu_546_p1;

assign exitcond1_fu_467_p2 = ((c_reg_247 == ap_const_lv3_5) ? 1'b1 : 1'b0);

assign exitcond2_fu_399_p2 = ((y_cast_fu_395_p1 == O_reg_587) ? 1'b1 : 1'b0);

assign exitcond_fu_492_p2 = ((r_reg_270 == ap_const_lv3_5) ? 1'b1 : 1'b0);

assign i_index_fu_555_p2 = (tmp2_fu_551_p2 + y_cast1_reg_654);

assign input_r_address0 = tmp_25_fu_560_p1;

assign m_3_fu_433_p2 = (m_reg_212 + ap_const_lv3_1);

assign m_cast1_fu_420_p1 = m_reg_212;

assign m_cast_fu_424_p1 = m_reg_212;

assign n_2_fu_339_p2 = (n_reg_154 + ap_const_lv5_1);

assign n_cast_fu_330_p1 = n_reg_154;

assign next_mul3_fu_321_p2 = (phi_mul2_reg_165 + M_cast_reg_603);

assign next_mul_fu_415_p2 = (phi_mul_reg_223 + I_cast4_reg_608);

assign o_index_fu_410_p2 = (y_cast2_fu_391_p1 + tmp3_reg_649);

assign output_r_address0 = tmp_23_fu_455_p1;

assign output_r_d0 = sum_reg_199;

assign p_pn_v_fu_565_p3 = ((L[0:0] === 1'b1) ? conv2_weight_q0 : conv1_weight_q0);

assign p_shl_fu_515_p3 = {{r_reg_270}, {ap_const_lv2_0}};

assign r_2_fu_498_p2 = (r_reg_270 + ap_const_lv3_1);

assign r_cast8_fu_488_p1 = r_reg_270;

assign r_cast9_fu_484_p1 = r_reg_270;

assign tmp1_fu_504_p2 = (phi_mul_reg_223 + r_cast9_fu_484_p1);

assign tmp2_fu_551_p2 = (c_cast1_reg_690 + tmp5_reg_726);

assign tmp3_fu_382_p0 = tmp3_fu_382_p00;

assign tmp3_fu_382_p00 = tmp_fu_373_p2;

assign tmp3_fu_382_p1 = O_cast20_cast_reg_593;

assign tmp3_fu_382_p2 = (tmp3_fu_382_p0 * tmp3_fu_382_p1);

assign tmp4_fu_510_p2 = (tmp1_fu_504_p2 + x_cast1_reg_636);

assign tmp5_fu_541_p0 = tmp5_fu_541_p00;

assign tmp5_fu_541_p00 = tmp4_reg_716;

assign tmp5_fu_541_p1 = I_cast_reg_613;

assign tmp5_fu_541_p2 = (tmp5_fu_541_p0 * tmp5_fu_541_p1);

assign tmp6_cast_fu_529_p1 = tmp6_fu_523_p2;

assign tmp6_fu_523_p2 = (p_shl_fu_515_p3 + r_cast8_fu_488_p1);

assign tmp7_fu_479_p2 = (tmp_22_reg_685 + c_cast_fu_459_p1);

assign tmp_13_fu_345_p0 = O_cast_cast_reg_598;

assign tmp_13_fu_345_p1 = tmp_13_fu_345_p10;

assign tmp_13_fu_345_p10 = n_reg_154;

assign tmp_13_fu_345_p2 = (tmp_13_fu_345_p0 * tmp_13_fu_345_p1);

assign tmp_15_fu_362_p2 = (($signed(x_cast_fu_358_p1) < $signed(O_reg_587)) ? 1'b1 : 1'b0);

assign tmp_18_fu_428_p2 = (($signed(m_cast_fu_424_p1) < $signed(M)) ? 1'b1 : 1'b0);

assign tmp_21_fu_439_p2 = (phi_mul2_reg_165 + m_cast1_fu_420_p1);

assign tmp_22_fu_449_p0 = tmp_22_fu_449_p00;

assign tmp_22_fu_449_p00 = tmp_21_fu_439_p2;

assign tmp_22_fu_449_p2 = (tmp_22_fu_449_p0 * $signed('h19));

assign tmp_23_fu_455_p1 = o_index_reg_667;

assign tmp_25_fu_560_p1 = i_index_fu_555_p2;

assign tmp_26_fu_546_p1 = w_index_reg_721;

assign tmp_27_fu_291_p1 = I[5:0];

assign tmp_fu_373_p2 = (x_cast2_fu_354_p1 + tmp_13_reg_631);

assign tmp_s_fu_334_p2 = (($signed(n_cast_fu_330_p1) < $signed(N)) ? 1'b1 : 1'b0);

assign w_index_fu_533_p2 = (tmp7_reg_703 + tmp6_cast_fu_529_p1);

assign x_2_fu_367_p2 = (x_reg_177 + ap_const_lv5_1);

assign x_cast1_fu_350_p1 = x_reg_177;

assign x_cast2_fu_354_p1 = x_reg_177;

assign x_cast_fu_358_p1 = x_reg_177;

assign y_2_fu_404_p2 = (y_reg_188 + ap_const_lv5_1);

assign y_cast1_fu_387_p1 = y_reg_188;

assign y_cast2_fu_391_p1 = y_reg_188;

assign y_cast_fu_395_p1 = y_reg_188;

always @ (posedge ap_clk) begin
    O_cast20_cast_reg_593[13:6] <= 8'b00000000;
    O_cast_cast_reg_598[8:6] <= 3'b000;
    M_cast_reg_603[6:4] <= 3'b000;
    I_cast4_reg_608[7] <= 1'b0;
    I_cast_reg_613[12:7] <= 6'b000000;
    x_cast1_reg_636[7:5] <= 3'b000;
    y_cast1_reg_654[12:5] <= 8'b00000000;
    c_cast1_reg_690[12:3] <= 10'b0000000000;
end

endmodule //dut_conv1
