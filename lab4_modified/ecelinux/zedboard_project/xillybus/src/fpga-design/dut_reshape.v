// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dut_reshape (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_st1_fsm_0 = 6'b1;
parameter    ap_ST_st2_fsm_1 = 6'b10;
parameter    ap_ST_st3_fsm_2 = 6'b100;
parameter    ap_ST_st4_fsm_3 = 6'b1000;
parameter    ap_ST_st5_fsm_4 = 6'b10000;
parameter    ap_ST_st6_fsm_5 = 6'b100000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv9_0 = 9'b000000000;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv9_190 = 9'b110010000;
parameter    ap_const_lv9_1 = 9'b1;
parameter    ap_const_lv3_5 = 3'b101;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv14_190 = 14'b110010000;
parameter    ap_const_lv14_1260 = 14'b1001001100000;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [12:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_23;
wire   [13:0] c_cast7_fu_107_p1;
reg   [13:0] c_cast7_reg_211;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_48;
wire   [8:0] c_1_fu_117_p2;
reg   [8:0] c_1_reg_219;
wire   [2:0] y_1_fu_129_p2;
reg   [2:0] y_1_reg_227;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_59;
wire   [4:0] tmp_2_fu_135_p3;
reg   [4:0] tmp_2_reg_232;
wire   [0:0] exitcond1_fu_123_p2;
wire   [12:0] tmp_2_cast_fu_143_p1;
reg   [12:0] tmp_2_cast_reg_237;
wire   [2:0] x_1_fu_157_p2;
reg   [2:0] x_1_reg_245;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_76;
wire   [13:0] tmp_5_fu_172_p2;
reg   [13:0] tmp_5_reg_250;
wire   [0:0] exitcond_fu_151_p2;
wire   [12:0] i_index_fu_188_p2;
reg   [12:0] i_index_reg_255;
wire   [13:0] o_index_fu_193_p2;
reg   [13:0] o_index_reg_260;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_92;
wire   [0:0] tmp_7_fu_197_p2;
reg   [0:0] tmp_7_reg_265;
reg   [8:0] c_reg_73;
reg   [2:0] y_reg_85;
wire   [0:0] exitcond2_fu_111_p2;
reg   [2:0] x_reg_96;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_124;
wire   [63:0] tmp_8_fu_203_p1;
wire   [63:0] tmp_9_fu_207_p1;
wire   [4:0] x_cast3_fu_147_p1;
wire   [4:0] tmp_4_fu_163_p2;
wire   [4:0] tmp_5_fu_172_p0;
wire   [12:0] tmp1_fu_178_p4;
reg   [5:0] ap_NS_fsm;
wire   [13:0] tmp_5_fu_172_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'b1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & ~(exitcond1_fu_123_p2 == 1'b0))) begin
        c_reg_73 <= c_1_reg_219;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        c_reg_73 <= ap_const_lv9_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        x_reg_96 <= x_1_reg_245;
    end else if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & (exitcond1_fu_123_p2 == 1'b0))) begin
        x_reg_96 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & ~(1'b0 == exitcond_fu_151_p2))) begin
        y_reg_85 <= y_1_reg_227;
    end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (1'b0 == exitcond2_fu_111_p2))) begin
        y_reg_85 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        c_1_reg_219 <= c_1_fu_117_p2;
        c_cast7_reg_211[8 : 0] <= c_cast7_fu_107_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & (1'b0 == exitcond_fu_151_p2))) begin
        i_index_reg_255 <= i_index_fu_188_p2;
        tmp_5_reg_250[13 : 4] <= tmp_5_fu_172_p2[13 : 4];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        o_index_reg_260 <= o_index_fu_193_p2;
        tmp_7_reg_265 <= tmp_7_fu_197_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & (exitcond1_fu_123_p2 == 1'b0))) begin
        tmp_2_cast_reg_237[4 : 2] <= tmp_2_cast_fu_143_p1[4 : 2];
        tmp_2_reg_232[4 : 2] <= tmp_2_fu_135_p3[4 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        x_1_reg_245 <= x_1_fu_157_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        y_1_reg_227 <= y_1_fu_129_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0)) | ((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(1'b0 == exitcond2_fu_111_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(1'b0 == exitcond2_fu_111_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_23) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_48) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_59) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_76) begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_92) begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_124) begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & ~(1'b0 == tmp_7_reg_265))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if (~(1'b0 == exitcond2_fu_111_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : begin
            if (~(exitcond1_fu_123_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st4_fsm_3 : begin
            if (~(1'b0 == exitcond_fu_151_p2)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        end
        ap_ST_st5_fsm_4 : begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    ap_sig_124 = (1'b1 == ap_CS_fsm[ap_const_lv32_5]);
end

always @ (*) begin
    ap_sig_23 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_48 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_59 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

always @ (*) begin
    ap_sig_76 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

always @ (*) begin
    ap_sig_92 = (1'b1 == ap_CS_fsm[ap_const_lv32_4]);
end

assign c_1_fu_117_p2 = (c_reg_73 + ap_const_lv9_1);

assign c_cast7_fu_107_p1 = c_reg_73;

assign exitcond1_fu_123_p2 = ((y_reg_85 == ap_const_lv3_5) ? 1'b1 : 1'b0);

assign exitcond2_fu_111_p2 = ((c_reg_73 == ap_const_lv9_190) ? 1'b1 : 1'b0);

assign exitcond_fu_151_p2 = ((x_reg_96 == ap_const_lv3_5) ? 1'b1 : 1'b0);

assign i_index_fu_188_p2 = (tmp1_fu_178_p4 + tmp_2_cast_reg_237);

assign input_r_address0 = tmp_8_fu_203_p1;

assign o_index_fu_193_p2 = (tmp_5_reg_250 + c_cast7_reg_211);

assign output_r_address0 = tmp_9_fu_207_p1;

assign output_r_d0 = input_r_q0;

assign tmp1_fu_178_p4 = {{{c_reg_73}, {1'b0}}, {x_reg_96}};

assign tmp_2_cast_fu_143_p1 = tmp_2_fu_135_p3;

assign tmp_2_fu_135_p3 = {{y_reg_85}, {ap_const_lv2_0}};

assign tmp_4_fu_163_p2 = (x_cast3_fu_147_p1 + tmp_2_reg_232);

assign tmp_5_fu_172_p0 = tmp_5_fu_172_p00;

assign tmp_5_fu_172_p00 = tmp_4_fu_163_p2;

assign tmp_5_fu_172_p2 = (tmp_5_fu_172_p0 * $signed('h190));

assign tmp_7_fu_197_p2 = ((o_index_fu_193_p2 < ap_const_lv14_1260) ? 1'b1 : 1'b0);

assign tmp_8_fu_203_p1 = i_index_reg_255;

assign tmp_9_fu_207_p1 = o_index_reg_260;

assign x_1_fu_157_p2 = (x_reg_96 + ap_const_lv3_1);

assign x_cast3_fu_147_p1 = x_reg_96;

assign y_1_fu_129_p2 = (y_reg_85 + ap_const_lv3_1);

always @ (posedge ap_clk) begin
    c_cast7_reg_211[13:9] <= 5'b00000;
    tmp_2_reg_232[1:0] <= 2'b00;
    tmp_2_cast_reg_237[1:0] <= 2'b00;
    tmp_2_cast_reg_237[12:5] <= 8'b00000000;
    tmp_5_reg_250[3:0] <= 4'b0000;
end

endmodule //dut_reshape
