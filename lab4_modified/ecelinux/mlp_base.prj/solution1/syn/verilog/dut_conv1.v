// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dut_conv1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_st1_fsm_0 = 21'b1;
parameter    ap_ST_st2_fsm_1 = 21'b10;
parameter    ap_ST_st3_fsm_2 = 21'b100;
parameter    ap_ST_st4_fsm_3 = 21'b1000;
parameter    ap_ST_st5_fsm_4 = 21'b10000;
parameter    ap_ST_st6_fsm_5 = 21'b100000;
parameter    ap_ST_st7_fsm_6 = 21'b1000000;
parameter    ap_ST_st8_fsm_7 = 21'b10000000;
parameter    ap_ST_st9_fsm_8 = 21'b100000000;
parameter    ap_ST_st10_fsm_9 = 21'b1000000000;
parameter    ap_ST_st11_fsm_10 = 21'b10000000000;
parameter    ap_ST_st12_fsm_11 = 21'b100000000000;
parameter    ap_ST_st13_fsm_12 = 21'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 21'b10000000000000;
parameter    ap_ST_st15_fsm_14 = 21'b100000000000000;
parameter    ap_ST_st16_fsm_15 = 21'b1000000000000000;
parameter    ap_ST_st17_fsm_16 = 21'b10000000000000000;
parameter    ap_ST_st18_fsm_17 = 21'b100000000000000000;
parameter    ap_ST_st19_fsm_18 = 21'b1000000000000000000;
parameter    ap_ST_st20_fsm_19 = 21'b10000000000000000000;
parameter    ap_ST_st21_fsm_20 = 21'b100000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_14 = 32'b10100;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv5_10 = 5'b10000;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_const_lv4_A = 4'b1010;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv3_6 = 3'b110;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_const_lv13_19 = 13'b11001;
parameter    ap_const_lv3_5 = 3'b101;
parameter    ap_const_lv2_0 = 2'b00;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [12:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [20:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_38;
wire   [11:0] conv2_weight_address0;
reg    conv2_weight_ce0;
wire   [31:0] conv2_weight_q0;
wire   [4:0] n_2_fu_237_p2;
reg   [4:0] n_2_reg_562;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_70;
wire   [7:0] p_shl3_cast_fu_255_p1;
reg   [7:0] p_shl3_cast_reg_567;
wire   [0:0] exitcond8_fu_231_p2;
wire   [5:0] p_shl4_cast1_fu_265_p1;
reg   [5:0] p_shl4_cast1_reg_572;
wire   [7:0] tmp_20_fu_273_p2;
reg   [7:0] tmp_20_reg_577;
wire   [3:0] x_3_fu_289_p2;
reg   [3:0] x_3_reg_585;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_89;
wire   [10:0] p_shl5_fu_309_p3;
reg   [10:0] p_shl5_reg_590;
wire   [0:0] exitcond9_fu_283_p2;
wire   [8:0] p_shl6_fu_317_p3;
reg   [8:0] p_shl6_reg_595;
wire   [11:0] y_cast_fu_325_p1;
reg   [11:0] y_cast_reg_600;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_105;
wire   [3:0] y_3_fu_339_p2;
reg   [3:0] y_3_reg_608;
wire   [10:0] o_index_fu_354_p2;
reg   [10:0] o_index_reg_613;
wire   [0:0] exitcond2_fu_333_p2;
wire   [2:0] m_3_fu_369_p2;
reg   [2:0] m_3_reg_621;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_121;
wire   [7:0] tmp_23_fu_399_p2;
reg   [7:0] tmp_23_reg_626;
wire   [0:0] exitcond3_fu_363_p2;
wire   [12:0] tmp_25_fu_414_p2;
reg   [12:0] tmp_25_reg_631;
wire   [11:0] c_cast2_fu_428_p1;
reg   [11:0] c_cast2_reg_636;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_137;
wire   [2:0] c_3_fu_438_p2;
reg   [2:0] c_3_reg_644;
wire   [12:0] tmp8_fu_444_p2;
reg   [12:0] tmp8_reg_649;
wire   [0:0] exitcond1_fu_432_p2;
wire   [2:0] r_2_fu_463_p2;
reg   [2:0] r_2_reg_657;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_153;
wire   [11:0] i_index_fu_515_p2;
reg   [11:0] i_index_reg_662;
wire   [0:0] exitcond_fu_457_p2;
wire   [12:0] w_index_fu_538_p2;
reg   [12:0] w_index_reg_667;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_169;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_179;
wire   [31:0] grp_fu_225_p2;
reg   [31:0] tmp_33_reg_692;
reg    ap_sig_cseq_ST_st12_fsm_11;
reg    ap_sig_189;
wire   [31:0] grp_fu_218_p2;
reg    ap_sig_cseq_ST_st17_fsm_16;
reg    ap_sig_198;
reg    ap_sig_cseq_ST_st21_fsm_20;
reg    ap_sig_206;
reg   [4:0] n_reg_114;
reg   [3:0] x_reg_125;
reg   [3:0] y_reg_137;
reg   [31:0] sum_reg_148;
reg   [2:0] m_reg_161;
reg   [31:0] filter_sum_reg_172;
reg   [2:0] c_reg_184;
reg   [31:0] filter_sum_1_reg_195;
reg   [2:0] r_reg_207;
wire   [63:0] tmp_26_fu_420_p1;
wire   [63:0] tmp_s_fu_549_p1;
wire   [63:0] tmp_32_fu_554_p1;
reg   [31:0] grp_fu_218_p0;
reg   [31:0] grp_fu_218_p1;
reg    ap_sig_cseq_ST_st13_fsm_12;
reg    ap_sig_252;
wire   [3:0] tmp_34_fu_243_p1;
wire   [6:0] p_shl3_fu_247_p3;
wire   [4:0] tmp_35_fu_259_p2;
wire   [7:0] p_shl4_cast_fu_269_p1;
wire   [5:0] x_cast_fu_279_p1;
wire   [5:0] tmp1_fu_295_p2;
wire   [7:0] tmp1_cast_fu_300_p1;
wire   [7:0] tmp_fu_304_p2;
wire   [8:0] y_cast1_fu_329_p1;
wire   [8:0] tmp2_fu_345_p2;
wire   [10:0] tmp2_cast_fu_350_p1;
wire   [6:0] p_shl7_fu_375_p3;
wire   [3:0] p_shl8_fu_387_p3;
wire   [7:0] p_shl7_cast_fu_383_p1;
wire   [7:0] p_shl8_cast_fu_395_p1;
wire   [7:0] m_cast1_fu_359_p1;
wire   [7:0] tmp_24_fu_405_p2;
wire  signed [7:0] tmp_25_fu_414_p0;
wire   [12:0] c_cast_fu_424_p1;
wire   [3:0] r_cast_fu_453_p1;
wire   [3:0] tmp6_fu_469_p2;
wire   [7:0] tmp6_cast_fu_475_p1;
wire   [7:0] tmp4_fu_479_p2;
wire   [8:0] p_shl1_fu_492_p3;
wire   [11:0] p_shl9_fu_484_p3;
wire  signed [11:0] p_shl1_cast_fu_500_p1;
wire   [11:0] tmp5_fu_504_p2;
wire   [11:0] tmp7_fu_510_p2;
wire   [4:0] r_cast1_fu_449_p1;
wire   [4:0] p_shl_fu_520_p3;
wire   [4:0] tmp9_fu_528_p2;
wire   [12:0] tmp9_cast_fu_534_p1;
wire  signed [31:0] i_index_cast_fu_543_p1;
wire  signed [31:0] w_index_cast_fu_546_p1;
reg   [20:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 21'b1;
end

dut_conv1_conv2_weight #(
    .DataWidth( 32 ),
    .AddressRange( 2400 ),
    .AddressWidth( 12 ))
conv2_weight_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv2_weight_address0),
    .ce0(conv2_weight_ce0),
    .q0(conv2_weight_q0)
);

dut_fadd_32ns_32ns_32_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dut_fadd_32ns_32ns_32_5_full_dsp_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_218_p0),
    .din1(grp_fu_218_p1),
    .ce(1'b1),
    .dout(grp_fu_218_p2)
);

dut_fmul_32ns_32ns_32_4_max_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dut_fmul_32ns_32ns_32_4_max_dsp_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(input_r_q0),
    .din1(conv2_weight_q0),
    .ce(1'b1),
    .dout(grp_fu_225_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st7_fsm_6) & ~(1'b0 == exitcond_fu_457_p2))) begin
        c_reg_184 <= c_3_reg_644;
    end else if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) & (1'b0 == exitcond3_fu_363_p2))) begin
        c_reg_184 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st17_fsm_16)) begin
        filter_sum_1_reg_195 <= grp_fu_218_p2;
    end else if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & (1'b0 == exitcond1_fu_432_p2))) begin
        filter_sum_1_reg_195 <= filter_sum_reg_172;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st7_fsm_6) & ~(1'b0 == exitcond_fu_457_p2))) begin
        filter_sum_reg_172 <= filter_sum_1_reg_195;
    end else if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) & (1'b0 == exitcond3_fu_363_p2))) begin
        filter_sum_reg_172 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st21_fsm_20)) begin
        m_reg_161 <= m_3_reg_621;
    end else if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & (1'b0 == exitcond2_fu_333_p2))) begin
        m_reg_161 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & ~(1'b0 == exitcond9_fu_283_p2))) begin
        n_reg_114 <= n_2_reg_562;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        n_reg_114 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st17_fsm_16)) begin
        r_reg_207 <= r_2_reg_657;
    end else if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & (1'b0 == exitcond1_fu_432_p2))) begin
        r_reg_207 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st21_fsm_20)) begin
        sum_reg_148 <= grp_fu_218_p2;
    end else if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & (1'b0 == exitcond2_fu_333_p2))) begin
        sum_reg_148 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & ~(1'b0 == exitcond2_fu_333_p2))) begin
        x_reg_125 <= x_3_reg_585;
    end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond8_fu_231_p2 == 1'b0))) begin
        x_reg_125 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) & ~(1'b0 == exitcond3_fu_363_p2))) begin
        y_reg_137 <= y_3_reg_608;
    end else if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & (1'b0 == exitcond9_fu_283_p2))) begin
        y_reg_137 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        c_3_reg_644 <= c_3_fu_438_p2;
        c_cast2_reg_636[2 : 0] <= c_cast2_fu_428_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st7_fsm_6) & (1'b0 == exitcond_fu_457_p2))) begin
        i_index_reg_662 <= i_index_fu_515_p2;
        w_index_reg_667 <= w_index_fu_538_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        m_3_reg_621 <= m_3_fu_369_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        n_2_reg_562 <= n_2_fu_237_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & (1'b0 == exitcond2_fu_333_p2))) begin
        o_index_reg_613 <= o_index_fu_354_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond8_fu_231_p2 == 1'b0))) begin
        p_shl3_cast_reg_567[6 : 3] <= p_shl3_cast_fu_255_p1[6 : 3];
        p_shl4_cast1_reg_572[4 : 1] <= p_shl4_cast1_fu_265_p1[4 : 1];
        tmp_20_reg_577[7 : 1] <= tmp_20_fu_273_p2[7 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & (1'b0 == exitcond9_fu_283_p2))) begin
        p_shl5_reg_590[10 : 3] <= p_shl5_fu_309_p3[10 : 3];
        p_shl6_reg_595[8 : 1] <= p_shl6_fu_317_p3[8 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        r_2_reg_657 <= r_2_fu_463_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & (1'b0 == exitcond1_fu_432_p2))) begin
        tmp8_reg_649 <= tmp8_fu_444_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) & (1'b0 == exitcond3_fu_363_p2))) begin
        tmp_23_reg_626[7 : 1] <= tmp_23_fu_399_p2[7 : 1];
        tmp_25_reg_631 <= tmp_25_fu_414_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st12_fsm_11)) begin
        tmp_33_reg_692 <= grp_fu_225_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        x_3_reg_585 <= x_3_fu_289_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        y_3_reg_608 <= y_3_fu_339_p2;
        y_cast_reg_600[3 : 0] <= y_cast_fu_325_p1[3 : 0];
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0)) | ((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond8_fu_231_p2 == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond8_fu_231_p2 == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_189) begin
        ap_sig_cseq_ST_st12_fsm_11 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st12_fsm_11 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_252) begin
        ap_sig_cseq_ST_st13_fsm_12 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st13_fsm_12 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_198) begin
        ap_sig_cseq_ST_st17_fsm_16 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st17_fsm_16 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_38) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_206) begin
        ap_sig_cseq_ST_st21_fsm_20 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st21_fsm_20 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_70) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_89) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_105) begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_121) begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_137) begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_153) begin
        ap_sig_cseq_ST_st7_fsm_6 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_169) begin
        ap_sig_cseq_ST_st8_fsm_7 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_179) begin
        ap_sig_cseq_ST_st9_fsm_8 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        conv2_weight_ce0 = 1'b1;
    end else begin
        conv2_weight_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st13_fsm_12)) begin
        grp_fu_218_p0 = filter_sum_1_reg_195;
    end else if ((1'b1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        grp_fu_218_p0 = sum_reg_148;
    end else begin
        grp_fu_218_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st13_fsm_12)) begin
        grp_fu_218_p1 = tmp_33_reg_692;
    end else if ((1'b1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        grp_fu_218_p1 = filter_sum_reg_172;
    end else begin
        grp_fu_218_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) & ~(1'b0 == exitcond3_fu_363_p2))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if (~(exitcond8_fu_231_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : begin
            if (~(1'b0 == exitcond9_fu_283_p2)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st4_fsm_3 : begin
            if (~(1'b0 == exitcond2_fu_333_p2)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        end
        ap_ST_st5_fsm_4 : begin
            if (~(1'b0 == exitcond3_fu_363_p2)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end
        end
        ap_ST_st6_fsm_5 : begin
            if ((1'b0 == exitcond1_fu_432_p2)) begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end else begin
                ap_NS_fsm = ap_ST_st18_fsm_17;
            end
        end
        ap_ST_st7_fsm_6 : begin
            if (~(1'b0 == exitcond_fu_457_p2)) begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end else begin
                ap_NS_fsm = ap_ST_st8_fsm_7;
            end
        end
        ap_ST_st8_fsm_7 : begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : begin
            ap_NS_fsm = ap_ST_st14_fsm_13;
        end
        ap_ST_st14_fsm_13 : begin
            ap_NS_fsm = ap_ST_st15_fsm_14;
        end
        ap_ST_st15_fsm_14 : begin
            ap_NS_fsm = ap_ST_st16_fsm_15;
        end
        ap_ST_st16_fsm_15 : begin
            ap_NS_fsm = ap_ST_st17_fsm_16;
        end
        ap_ST_st17_fsm_16 : begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st18_fsm_17 : begin
            ap_NS_fsm = ap_ST_st19_fsm_18;
        end
        ap_ST_st19_fsm_18 : begin
            ap_NS_fsm = ap_ST_st20_fsm_19;
        end
        ap_ST_st20_fsm_19 : begin
            ap_NS_fsm = ap_ST_st21_fsm_20;
        end
        ap_ST_st21_fsm_20 : begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    ap_sig_105 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

always @ (*) begin
    ap_sig_121 = (1'b1 == ap_CS_fsm[ap_const_lv32_4]);
end

always @ (*) begin
    ap_sig_137 = (1'b1 == ap_CS_fsm[ap_const_lv32_5]);
end

always @ (*) begin
    ap_sig_153 = (1'b1 == ap_CS_fsm[ap_const_lv32_6]);
end

always @ (*) begin
    ap_sig_169 = (1'b1 == ap_CS_fsm[ap_const_lv32_7]);
end

always @ (*) begin
    ap_sig_179 = (1'b1 == ap_CS_fsm[ap_const_lv32_8]);
end

always @ (*) begin
    ap_sig_189 = (1'b1 == ap_CS_fsm[ap_const_lv32_B]);
end

always @ (*) begin
    ap_sig_198 = (1'b1 == ap_CS_fsm[ap_const_lv32_10]);
end

always @ (*) begin
    ap_sig_206 = (1'b1 == ap_CS_fsm[ap_const_lv32_14]);
end

always @ (*) begin
    ap_sig_252 = (1'b1 == ap_CS_fsm[ap_const_lv32_C]);
end

always @ (*) begin
    ap_sig_38 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_70 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_89 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

assign c_3_fu_438_p2 = (c_reg_184 + ap_const_lv3_1);

assign c_cast2_fu_428_p1 = c_reg_184;

assign c_cast_fu_424_p1 = c_reg_184;

assign conv2_weight_address0 = tmp_32_fu_554_p1;

assign exitcond1_fu_432_p2 = ((c_reg_184 == ap_const_lv3_5) ? 1'b1 : 1'b0);

assign exitcond2_fu_333_p2 = ((y_reg_137 == ap_const_lv4_A) ? 1'b1 : 1'b0);

assign exitcond3_fu_363_p2 = ((m_reg_161 == ap_const_lv3_6) ? 1'b1 : 1'b0);

assign exitcond8_fu_231_p2 = ((n_reg_114 == ap_const_lv5_10) ? 1'b1 : 1'b0);

assign exitcond9_fu_283_p2 = ((x_reg_125 == ap_const_lv4_A) ? 1'b1 : 1'b0);

assign exitcond_fu_457_p2 = ((r_reg_207 == ap_const_lv3_5) ? 1'b1 : 1'b0);

assign i_index_cast_fu_543_p1 = $signed(i_index_reg_662);

assign i_index_fu_515_p2 = (c_cast2_reg_636 + tmp7_fu_510_p2);

assign input_r_address0 = tmp_s_fu_549_p1;

assign m_3_fu_369_p2 = (m_reg_161 + ap_const_lv3_1);

assign m_cast1_fu_359_p1 = m_reg_161;

assign n_2_fu_237_p2 = (n_reg_114 + ap_const_lv5_1);

assign o_index_fu_354_p2 = (tmp2_cast_fu_350_p1 + p_shl5_reg_590);

assign output_r_address0 = tmp_26_fu_420_p1;

assign output_r_d0 = sum_reg_148;

assign p_shl1_cast_fu_500_p1 = $signed(p_shl1_fu_492_p3);

assign p_shl1_fu_492_p3 = {{tmp4_fu_479_p2}, {1'b0}};

assign p_shl3_cast_fu_255_p1 = p_shl3_fu_247_p3;

assign p_shl3_fu_247_p3 = {{tmp_34_fu_243_p1}, {ap_const_lv3_0}};

assign p_shl4_cast1_fu_265_p1 = tmp_35_fu_259_p2;

assign p_shl4_cast_fu_269_p1 = tmp_35_fu_259_p2;

assign p_shl5_fu_309_p3 = {{tmp_fu_304_p2}, {ap_const_lv3_0}};

assign p_shl6_fu_317_p3 = {{tmp_fu_304_p2}, {1'b0}};

assign p_shl7_cast_fu_383_p1 = p_shl7_fu_375_p3;

assign p_shl7_fu_375_p3 = {{m_reg_161}, {ap_const_lv4_0}};

assign p_shl8_cast_fu_395_p1 = p_shl8_fu_387_p3;

assign p_shl8_fu_387_p3 = {{m_reg_161}, {1'b0}};

assign p_shl9_fu_484_p3 = {{tmp4_fu_479_p2}, {ap_const_lv4_0}};

assign p_shl_fu_520_p3 = {{r_reg_207}, {ap_const_lv2_0}};

assign r_2_fu_463_p2 = (r_reg_207 + ap_const_lv3_1);

assign r_cast1_fu_449_p1 = r_reg_207;

assign r_cast_fu_453_p1 = r_reg_207;

assign tmp1_cast_fu_300_p1 = tmp1_fu_295_p2;

assign tmp1_fu_295_p2 = (x_cast_fu_279_p1 + p_shl4_cast1_reg_572);

assign tmp2_cast_fu_350_p1 = tmp2_fu_345_p2;

assign tmp2_fu_345_p2 = (p_shl6_reg_595 + y_cast1_fu_329_p1);

assign tmp4_fu_479_p2 = (tmp_23_reg_626 + tmp6_cast_fu_475_p1);

assign tmp5_fu_504_p2 = ($signed(p_shl9_fu_484_p3) - $signed(p_shl1_cast_fu_500_p1));

assign tmp6_cast_fu_475_p1 = tmp6_fu_469_p2;

assign tmp6_fu_469_p2 = (r_cast_fu_453_p1 + x_reg_125);

assign tmp7_fu_510_p2 = (tmp5_fu_504_p2 + y_cast_reg_600);

assign tmp8_fu_444_p2 = (c_cast_fu_424_p1 + tmp_25_reg_631);

assign tmp9_cast_fu_534_p1 = tmp9_fu_528_p2;

assign tmp9_fu_528_p2 = (r_cast1_fu_449_p1 + p_shl_fu_520_p3);

assign tmp_20_fu_273_p2 = (p_shl3_cast_fu_255_p1 - p_shl4_cast_fu_269_p1);

assign tmp_23_fu_399_p2 = (p_shl7_cast_fu_383_p1 - p_shl8_cast_fu_395_p1);

assign tmp_24_fu_405_p2 = (m_cast1_fu_359_p1 + tmp_20_reg_577);

assign tmp_25_fu_414_p0 = tmp_24_fu_405_p2;

assign tmp_25_fu_414_p2 = ($signed(tmp_25_fu_414_p0) * $signed('h19));

assign tmp_26_fu_420_p1 = o_index_reg_613;

assign tmp_32_fu_554_p1 = $unsigned(w_index_cast_fu_546_p1);

assign tmp_34_fu_243_p1 = n_reg_114[3:0];

assign tmp_35_fu_259_p2 = n_reg_114 << ap_const_lv5_1;

assign tmp_fu_304_p2 = (p_shl3_cast_reg_567 + tmp1_cast_fu_300_p1);

assign tmp_s_fu_549_p1 = $unsigned(i_index_cast_fu_543_p1);

assign w_index_cast_fu_546_p1 = $signed(w_index_reg_667);

assign w_index_fu_538_p2 = (tmp8_reg_649 + tmp9_cast_fu_534_p1);

assign x_3_fu_289_p2 = (x_reg_125 + ap_const_lv4_1);

assign x_cast_fu_279_p1 = x_reg_125;

assign y_3_fu_339_p2 = (y_reg_137 + ap_const_lv4_1);

assign y_cast1_fu_329_p1 = y_reg_137;

assign y_cast_fu_325_p1 = y_reg_137;

always @ (posedge ap_clk) begin
    p_shl3_cast_reg_567[2:0] <= 3'b000;
    p_shl3_cast_reg_567[7] <= 1'b0;
    p_shl4_cast1_reg_572[0] <= 1'b0;
    p_shl4_cast1_reg_572[5] <= 1'b0;
    tmp_20_reg_577[0] <= 1'b0;
    p_shl5_reg_590[2:0] <= 3'b000;
    p_shl6_reg_595[0] <= 1'b0;
    y_cast_reg_600[11:4] <= 8'b00000000;
    tmp_23_reg_626[0] <= 1'b0;
    c_cast2_reg_636[11:3] <= 9'b000000000;
end

endmodule //dut_conv1
