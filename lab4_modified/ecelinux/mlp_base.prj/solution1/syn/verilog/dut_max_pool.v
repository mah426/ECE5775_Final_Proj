// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dut_max_pool (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        M,
        I
);

parameter    ap_ST_st1_fsm_0 = 12'b1;
parameter    ap_ST_st2_fsm_1 = 12'b10;
parameter    ap_ST_st3_fsm_2 = 12'b100;
parameter    ap_ST_st4_fsm_3 = 12'b1000;
parameter    ap_ST_st5_fsm_4 = 12'b10000;
parameter    ap_ST_st6_fsm_5 = 12'b100000;
parameter    ap_ST_st7_fsm_6 = 12'b1000000;
parameter    ap_ST_st8_fsm_7 = 12'b10000000;
parameter    ap_ST_st9_fsm_8 = 12'b100000000;
parameter    ap_ST_st10_fsm_9 = 12'b1000000000;
parameter    ap_ST_st11_fsm_10 = 12'b10000000000;
parameter    ap_ST_st12_fsm_11 = 12'b100000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv9_0 = 9'b000000000;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv32_800000 = 32'b100000000000000000000000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_1E = 32'b11110;
parameter    ap_const_lv8_FF = 8'b11111111;
parameter    ap_const_lv23_0 = 23'b00000000000000000000000;
parameter    ap_const_lv5_2 = 5'b10;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [12:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
input  [5:0] M;
input  [5:0] I;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_29;
wire   [3:0] O_fu_212_p4;
reg   [3:0] O_reg_502;
wire   [11:0] O_cast9_cast1_fu_222_p1;
reg   [11:0] O_cast9_cast1_reg_508;
wire   [7:0] O_cast9_cast_fu_226_p1;
reg   [7:0] O_cast9_cast_reg_513;
wire   [8:0] I_cast2_fu_230_p1;
reg   [8:0] I_cast2_reg_518;
wire   [13:0] I_cast_fu_234_p1;
reg   [13:0] I_cast_reg_523;
wire   [8:0] next_mul_fu_238_p2;
reg   [8:0] next_mul_reg_528;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_71;
wire   [4:0] m_1_fu_256_p2;
reg   [4:0] m_1_reg_536;
wire   [7:0] tmp_4_fu_262_p2;
reg   [7:0] tmp_4_reg_541;
wire   [0:0] tmp_3_fu_251_p2;
wire   [11:0] x_cast6_fu_267_p1;
reg   [11:0] x_cast6_reg_546;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_89;
wire   [3:0] x_1_fu_276_p2;
reg   [3:0] x_1_reg_554;
wire   [13:0] tmp_7_cast_fu_290_p1;
reg   [13:0] tmp_7_cast_reg_559;
wire   [0:0] exitcond3_fu_271_p2;
wire   [3:0] y_1_fu_303_p2;
reg   [3:0] y_1_reg_567;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_105;
wire   [11:0] tmp3_fu_318_p2;
reg   [11:0] tmp3_reg_572;
wire   [0:0] exitcond2_fu_298_p2;
wire   [11:0] o_index_fu_323_p2;
reg   [11:0] o_index_reg_577;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_119;
wire   [8:0] tmp_cast_fu_335_p1;
reg   [8:0] tmp_cast_reg_582;
wire   [13:0] c_cast4_fu_339_p1;
reg   [13:0] c_cast4_reg_587;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_130;
wire   [1:0] c_1_fu_349_p2;
reg   [1:0] c_1_reg_595;
wire   [1:0] r_1_fu_369_p2;
reg   [1:0] r_1_reg_603;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_141;
wire   [8:0] tmp4_fu_381_p2;
reg   [8:0] tmp4_reg_608;
wire   [0:0] exitcond_fu_363_p2;
wire   [13:0] tmp5_fu_389_p2;
reg   [13:0] tmp5_reg_613;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_155;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_164;
reg   [31:0] input_load_reg_623;
reg    ap_sig_cseq_ST_st10_fsm_9;
reg    ap_sig_172;
wire   [0:0] tmp_25_fu_207_p2;
reg   [0:0] tmp_25_reg_630;
reg    ap_sig_cseq_ST_st11_fsm_10;
reg    ap_sig_181;
wire   [31:0] max_2_fu_490_p3;
reg    ap_sig_cseq_ST_st12_fsm_11;
reg    ap_sig_190;
reg   [4:0] m_reg_114;
reg   [8:0] phi_mul_reg_125;
reg   [3:0] x_reg_137;
reg   [3:0] y_reg_148;
wire   [0:0] exitcond1_fu_343_p2;
reg   [31:0] max_reg_160;
reg   [1:0] c_reg_173;
reg   [31:0] max_1_reg_184;
reg   [1:0] r_reg_196;
wire   [63:0] tmp_1_fu_355_p1;
wire   [63:0] tmp_9_fu_403_p1;
wire   [5:0] m_cast_fu_247_p1;
wire   [3:0] tmp_4_fu_262_p0;
wire   [4:0] tmp_4_fu_262_p1;
wire   [4:0] tmp_7_fu_282_p3;
wire   [7:0] y_cast5_fu_294_p1;
wire   [7:0] tmp_fu_309_p2;
wire   [3:0] tmp3_fu_318_p0;
wire   [7:0] tmp3_fu_318_p1;
wire   [4:0] tmp_s_fu_327_p3;
wire   [8:0] r_cast3_fu_359_p1;
wire   [8:0] tmp1_fu_375_p2;
wire   [5:0] tmp5_fu_389_p0;
wire   [8:0] tmp5_fu_389_p1;
wire   [13:0] tmp2_fu_394_p2;
wire   [13:0] i_index_fu_398_p2;
wire   [31:0] input_load_to_int_fu_408_p1;
wire   [31:0] max_1_to_int_fu_425_p1;
wire   [7:0] tmp_18_fu_411_p4;
wire   [22:0] tmp_19_fu_421_p1;
wire   [0:0] notrhs_fu_449_p2;
wire   [0:0] notlhs_fu_443_p2;
wire   [7:0] tmp_20_fu_429_p4;
wire   [22:0] tmp_21_fu_439_p1;
wire   [0:0] notrhs5_fu_467_p2;
wire   [0:0] notlhs4_fu_461_p2;
wire   [0:0] tmp_22_fu_455_p2;
wire   [0:0] tmp_23_fu_473_p2;
wire   [0:0] tmp_24_fu_479_p2;
wire   [0:0] tmp_26_fu_485_p2;
reg   [11:0] ap_NS_fsm;
wire   [11:0] tmp3_fu_318_p10;
wire   [13:0] tmp5_fu_389_p10;
wire   [7:0] tmp_4_fu_262_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'b1;
end

dut_fcmp_32ns_32ns_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
dut_fcmp_32ns_32ns_1_1_U11(
    .din0(input_load_reg_623),
    .din1(max_1_reg_184),
    .opcode(ap_const_lv5_2),
    .dout(tmp_25_fu_207_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st7_fsm_6) & ~(1'b0 == exitcond_fu_363_p2))) begin
        c_reg_173 <= c_1_reg_595;
    end else if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        c_reg_173 <= ap_const_lv2_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & ~(1'b0 == exitcond3_fu_271_p2))) begin
        m_reg_114 <= m_1_reg_536;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        m_reg_114 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st12_fsm_11)) begin
        max_1_reg_184 <= max_2_fu_490_p3;
    end else if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & (1'b0 == exitcond1_fu_343_p2))) begin
        max_1_reg_184 <= max_reg_160;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st7_fsm_6) & ~(1'b0 == exitcond_fu_363_p2))) begin
        max_reg_160 <= max_1_reg_184;
    end else if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        max_reg_160 <= ap_const_lv32_800000;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & ~(1'b0 == exitcond3_fu_271_p2))) begin
        phi_mul_reg_125 <= next_mul_reg_528;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        phi_mul_reg_125 <= ap_const_lv9_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st12_fsm_11)) begin
        r_reg_196 <= r_1_reg_603;
    end else if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & (1'b0 == exitcond1_fu_343_p2))) begin
        r_reg_196 <= ap_const_lv2_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & ~(1'b0 == exitcond2_fu_298_p2))) begin
        x_reg_137 <= x_1_reg_554;
    end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(tmp_3_fu_251_p2 == 1'b0))) begin
        x_reg_137 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & ~(1'b0 == exitcond1_fu_343_p2))) begin
        y_reg_148 <= y_1_reg_567;
    end else if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & (1'b0 == exitcond3_fu_271_p2))) begin
        y_reg_148 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        I_cast2_reg_518[5 : 0] <= I_cast2_fu_230_p1[5 : 0];
        I_cast_reg_523[5 : 0] <= I_cast_fu_234_p1[5 : 0];
        O_cast9_cast1_reg_508[3 : 0] <= O_cast9_cast1_fu_222_p1[3 : 0];
        O_cast9_cast_reg_513[3 : 0] <= O_cast9_cast_fu_226_p1[3 : 0];
        O_reg_502 <= {{I[ap_const_lv32_4 : ap_const_lv32_1]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        c_1_reg_595 <= c_1_fu_349_p2;
        c_cast4_reg_587[1 : 0] <= c_cast4_fu_339_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        input_load_reg_623 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        m_1_reg_536 <= m_1_fu_256_p2;
        next_mul_reg_528 <= next_mul_fu_238_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        o_index_reg_577 <= o_index_fu_323_p2;
        tmp_cast_reg_582[4 : 1] <= tmp_cast_fu_335_p1[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        r_1_reg_603 <= r_1_fu_369_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & (1'b0 == exitcond2_fu_298_p2))) begin
        tmp3_reg_572 <= tmp3_fu_318_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st7_fsm_6) & (1'b0 == exitcond_fu_363_p2))) begin
        tmp4_reg_608 <= tmp4_fu_381_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        tmp5_reg_613 <= tmp5_fu_389_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st11_fsm_10)) begin
        tmp_25_reg_630 <= tmp_25_fu_207_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(tmp_3_fu_251_p2 == 1'b0))) begin
        tmp_4_reg_541 <= tmp_4_fu_262_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & (1'b0 == exitcond3_fu_271_p2))) begin
        tmp_7_cast_reg_559[4 : 1] <= tmp_7_cast_fu_290_p1[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        x_1_reg_554 <= x_1_fu_276_p2;
        x_cast6_reg_546[3 : 0] <= x_cast6_fu_267_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        y_1_reg_567 <= y_1_fu_303_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0)) | ((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (tmp_3_fu_251_p2 == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (tmp_3_fu_251_p2 == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_172) begin
        ap_sig_cseq_ST_st10_fsm_9 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_9 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_181) begin
        ap_sig_cseq_ST_st11_fsm_10 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st11_fsm_10 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_190) begin
        ap_sig_cseq_ST_st12_fsm_11 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st12_fsm_11 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_29) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_71) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_89) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_105) begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_119) begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_130) begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_141) begin
        ap_sig_cseq_ST_st7_fsm_6 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_155) begin
        ap_sig_cseq_ST_st8_fsm_7 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_164) begin
        ap_sig_cseq_ST_st9_fsm_8 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & ~(1'b0 == exitcond1_fu_343_p2))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if ((tmp_3_fu_251_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : begin
            if (~(1'b0 == exitcond3_fu_271_p2)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st4_fsm_3 : begin
            if (~(1'b0 == exitcond2_fu_298_p2)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        end
        ap_ST_st5_fsm_4 : begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : begin
            if (~(1'b0 == exitcond1_fu_343_p2)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end
        end
        ap_ST_st7_fsm_6 : begin
            if (~(1'b0 == exitcond_fu_363_p2)) begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end else begin
                ap_NS_fsm = ap_ST_st8_fsm_7;
            end
        end
        ap_ST_st8_fsm_7 : begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign I_cast2_fu_230_p1 = I;

assign I_cast_fu_234_p1 = I;

assign O_cast9_cast1_fu_222_p1 = O_fu_212_p4;

assign O_cast9_cast_fu_226_p1 = O_fu_212_p4;

assign O_fu_212_p4 = {{I[ap_const_lv32_4 : ap_const_lv32_1]}};

always @ (*) begin
    ap_sig_105 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

always @ (*) begin
    ap_sig_119 = (1'b1 == ap_CS_fsm[ap_const_lv32_4]);
end

always @ (*) begin
    ap_sig_130 = (1'b1 == ap_CS_fsm[ap_const_lv32_5]);
end

always @ (*) begin
    ap_sig_141 = (1'b1 == ap_CS_fsm[ap_const_lv32_6]);
end

always @ (*) begin
    ap_sig_155 = (1'b1 == ap_CS_fsm[ap_const_lv32_7]);
end

always @ (*) begin
    ap_sig_164 = (1'b1 == ap_CS_fsm[ap_const_lv32_8]);
end

always @ (*) begin
    ap_sig_172 = (1'b1 == ap_CS_fsm[ap_const_lv32_9]);
end

always @ (*) begin
    ap_sig_181 = (1'b1 == ap_CS_fsm[ap_const_lv32_A]);
end

always @ (*) begin
    ap_sig_190 = (1'b1 == ap_CS_fsm[ap_const_lv32_B]);
end

always @ (*) begin
    ap_sig_29 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_71 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_89 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

assign c_1_fu_349_p2 = (c_reg_173 + ap_const_lv2_1);

assign c_cast4_fu_339_p1 = c_reg_173;

assign exitcond1_fu_343_p2 = ((c_reg_173 == ap_const_lv2_2) ? 1'b1 : 1'b0);

assign exitcond2_fu_298_p2 = ((y_reg_148 == O_reg_502) ? 1'b1 : 1'b0);

assign exitcond3_fu_271_p2 = ((x_reg_137 == O_reg_502) ? 1'b1 : 1'b0);

assign exitcond_fu_363_p2 = ((r_reg_196 == ap_const_lv2_2) ? 1'b1 : 1'b0);

assign i_index_fu_398_p2 = (c_cast4_reg_587 + tmp2_fu_394_p2);

assign input_load_to_int_fu_408_p1 = input_load_reg_623;

assign input_r_address0 = tmp_9_fu_403_p1;

assign m_1_fu_256_p2 = (m_reg_114 + ap_const_lv5_1);

assign m_cast_fu_247_p1 = m_reg_114;

assign max_1_to_int_fu_425_p1 = max_1_reg_184;

assign max_2_fu_490_p3 = ((tmp_26_fu_485_p2[0:0] === 1'b1) ? input_load_reg_623 : max_1_reg_184);

assign next_mul_fu_238_p2 = (phi_mul_reg_125 + I_cast2_reg_518);

assign notlhs4_fu_461_p2 = ((tmp_20_fu_429_p4 != ap_const_lv8_FF) ? 1'b1 : 1'b0);

assign notlhs_fu_443_p2 = ((tmp_18_fu_411_p4 != ap_const_lv8_FF) ? 1'b1 : 1'b0);

assign notrhs5_fu_467_p2 = ((tmp_21_fu_439_p1 == ap_const_lv23_0) ? 1'b1 : 1'b0);

assign notrhs_fu_449_p2 = ((tmp_19_fu_421_p1 == ap_const_lv23_0) ? 1'b1 : 1'b0);

assign o_index_fu_323_p2 = (x_cast6_reg_546 + tmp3_reg_572);

assign output_r_address0 = tmp_1_fu_355_p1;

assign output_r_d0 = max_reg_160;

assign r_1_fu_369_p2 = (r_reg_196 + ap_const_lv2_1);

assign r_cast3_fu_359_p1 = r_reg_196;

assign tmp1_fu_375_p2 = (r_cast3_fu_359_p1 + phi_mul_reg_125);

assign tmp2_fu_394_p2 = (tmp5_reg_613 + tmp_7_cast_reg_559);

assign tmp3_fu_318_p0 = O_cast9_cast1_reg_508;

assign tmp3_fu_318_p1 = tmp3_fu_318_p10;

assign tmp3_fu_318_p10 = tmp_fu_309_p2;

assign tmp3_fu_318_p2 = (tmp3_fu_318_p0 * tmp3_fu_318_p1);

assign tmp4_fu_381_p2 = (tmp_cast_reg_582 + tmp1_fu_375_p2);

assign tmp5_fu_389_p0 = I_cast_reg_523;

assign tmp5_fu_389_p1 = tmp5_fu_389_p10;

assign tmp5_fu_389_p10 = tmp4_reg_608;

assign tmp5_fu_389_p2 = (tmp5_fu_389_p0 * tmp5_fu_389_p1);

assign tmp_18_fu_411_p4 = {{input_load_to_int_fu_408_p1[ap_const_lv32_1E : ap_const_lv32_17]}};

assign tmp_19_fu_421_p1 = input_load_to_int_fu_408_p1[22:0];

assign tmp_1_fu_355_p1 = o_index_reg_577;

assign tmp_20_fu_429_p4 = {{max_1_to_int_fu_425_p1[ap_const_lv32_1E : ap_const_lv32_17]}};

assign tmp_21_fu_439_p1 = max_1_to_int_fu_425_p1[22:0];

assign tmp_22_fu_455_p2 = (notrhs_fu_449_p2 | notlhs_fu_443_p2);

assign tmp_23_fu_473_p2 = (notrhs5_fu_467_p2 | notlhs4_fu_461_p2);

assign tmp_24_fu_479_p2 = (tmp_22_fu_455_p2 & tmp_23_fu_473_p2);

assign tmp_26_fu_485_p2 = (tmp_24_fu_479_p2 & tmp_25_reg_630);

assign tmp_3_fu_251_p2 = (($signed(m_cast_fu_247_p1) < $signed(M)) ? 1'b1 : 1'b0);

assign tmp_4_fu_262_p0 = O_cast9_cast_reg_513;

assign tmp_4_fu_262_p1 = tmp_4_fu_262_p10;

assign tmp_4_fu_262_p10 = m_reg_114;

assign tmp_4_fu_262_p2 = (tmp_4_fu_262_p0 * tmp_4_fu_262_p1);

assign tmp_7_cast_fu_290_p1 = tmp_7_fu_282_p3;

assign tmp_7_fu_282_p3 = {{x_reg_137}, {1'b0}};

assign tmp_9_fu_403_p1 = i_index_fu_398_p2;

assign tmp_cast_fu_335_p1 = tmp_s_fu_327_p3;

assign tmp_fu_309_p2 = (tmp_4_reg_541 + y_cast5_fu_294_p1);

assign tmp_s_fu_327_p3 = {{y_reg_148}, {1'b0}};

assign x_1_fu_276_p2 = (x_reg_137 + ap_const_lv4_1);

assign x_cast6_fu_267_p1 = x_reg_137;

assign y_1_fu_303_p2 = (y_reg_148 + ap_const_lv4_1);

assign y_cast5_fu_294_p1 = y_reg_148;

always @ (posedge ap_clk) begin
    O_cast9_cast1_reg_508[11:4] <= 8'b00000000;
    O_cast9_cast_reg_513[7:4] <= 4'b0000;
    I_cast2_reg_518[8:6] <= 3'b000;
    I_cast_reg_523[13:6] <= 8'b00000000;
    x_cast6_reg_546[11:4] <= 8'b00000000;
    tmp_7_cast_reg_559[0] <= 1'b0;
    tmp_7_cast_reg_559[13:5] <= 9'b000000000;
    tmp_cast_reg_582[0] <= 1'b0;
    tmp_cast_reg_582[8:5] <= 4'b0000;
    c_cast4_reg_587[13:2] <= 12'b000000000000;
end

endmodule //dut_max_pool
