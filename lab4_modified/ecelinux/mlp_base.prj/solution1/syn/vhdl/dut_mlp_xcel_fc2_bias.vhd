-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity dut_mlp_xcel_fc2_bias_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of dut_mlp_xcel_fc2_bias_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101011010010100100010011001", 
    1 => "00111101101000110111000011001110", 
    2 => "10111100101010111101000110101011", 
    3 => "00111101100011110101100001111101", 
    4 => "00111101100010101101001001010110", 
    5 => "00111101101010001100011010010011", 
    6 => "00111101100000110000111111010000", 
    7 => "00111101110110011110111000000011", 
    8 => "00111101000001101101100000101100", 
    9 => "00111101101011101001111011100100", 
    10 => "10111101001001001101110000100011", 
    11 => "10111100010011011100100001110101", 
    12 => "00111101101001100101010100011001", 
    13 => "10111101100100001000110011000101", 
    14 => "00111101001010011111111100001101", 
    15 => "00111101001101000010011110000101", 
    16 => "10111100111111011101011001011010", 
    17 => "00111101001111011100001101111010", 
    18 => "10111101100111100101110000001100", 
    19 => "00111101100011100111010101111001", 
    20 => "10111101101010010011011000111111", 
    21 => "00111100100110110110010011100000", 
    22 => "00111101100000000101000111001010", 
    23 => "00111100100101101110000101011000", 
    24 => "00111100000100111011011111011000", 
    25 => "00111011000010001100011000001101", 
    26 => "00111100110011101011101110111010", 
    27 => "00111101010101100010011010110011", 
    28 => "10111100110101101011011001011011", 
    29 => "00111101101010101010001010100001", 
    30 => "00111011001101100011000010101001", 
    31 => "10111100001001000010011010111011", 
    32 => "00111101101010111100110111111111", 
    33 => "00111101101010011011101101101011", 
    34 => "00111011101001111010010000011110", 
    35 => "00111100001000110001000111101000", 
    36 => "10111101011100000000100110110011", 
    37 => "00111101101001001011010001001010", 
    38 => "00111101001110000010010111100001", 
    39 => "10111100010001001101011001011110", 
    40 => "00111101100101001011010010001101", 
    41 => "10111101101010110011101110111000", 
    42 => "00111101001000110000101110011110", 
    43 => "00111101011110010111111011011100", 
    44 => "10111011100100100010110110010101", 
    45 => "10111011000101011010111100101001", 
    46 => "10111100101011110001100010000111", 
    47 => "00111101100010010010001111100110", 
    48 => "00111101000100000011001100011110", 
    49 => "00111101000001001111010011000111", 
    50 => "00111101000011101000111010100100", 
    51 => "10111101011000111100101110000001", 
    52 => "00111101101101010101101000111010", 
    53 => "10111101011101010101010110000010", 
    54 => "00111100100011001011110100010010", 
    55 => "00111000011111111101101001000000", 
    56 => "00111100110000111011000011000100", 
    57 => "00111100111011110100001110000101", 
    58 => "00111101100000011010010100000001", 
    59 => "10111101011001001010011110110101", 
    60 => "10111101010011101111000000101000", 
    61 => "00111101101100001111011110111010", 
    62 => "00111100101100101100111010001001", 
    63 => "00111101010010000100100101000101", 
    64 => "10111101011001000010111100011111", 
    65 => "00111101110010010000011000000011", 
    66 => "00111101110100011110011111011010", 
    67 => "00111101111001001011111001000000", 
    68 => "10111101011011110000001110001110", 
    69 => "00111101001011000111001000011001", 
    70 => "00111101100100111000001001011110", 
    71 => "00111100001010010101110010000101", 
    72 => "00111101111001000111010001010100", 
    73 => "00111101010101011111111011011010", 
    74 => "00111100110000011001010111001101", 
    75 => "10111101001001011111101001100110", 
    76 => "00111101001000111110001010010011", 
    77 => "00111101101001100111011100101101", 
    78 => "00111101001101010001000101011010", 
    79 => "10111100111100011010011111100011", 
    80 => "00111001110001100010111001001101", 
    81 => "10111101010101011011101110111111", 
    82 => "00111101100010011010111101011100", 
    83 => "10111100000010100101010010000010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity dut_mlp_xcel_fc2_bias is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of dut_mlp_xcel_fc2_bias is
    component dut_mlp_xcel_fc2_bias_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    dut_mlp_xcel_fc2_bias_rom_U :  component dut_mlp_xcel_fc2_bias_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


