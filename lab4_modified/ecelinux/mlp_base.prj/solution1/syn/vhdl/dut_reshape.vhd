-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_reshape is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of dut_reshape is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv9_190 : STD_LOGIC_VECTOR (8 downto 0) := "110010000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv14_190 : STD_LOGIC_VECTOR (13 downto 0) := "00000110010000";
    constant ap_const_lv14_1260 : STD_LOGIC_VECTOR (13 downto 0) := "01001001100000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_23 : BOOLEAN;
    signal c_cast7_fu_107_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal c_cast7_reg_211 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_48 : BOOLEAN;
    signal c_1_fu_117_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_1_reg_219 : STD_LOGIC_VECTOR (8 downto 0);
    signal y_1_fu_129_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_1_reg_227 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_59 : BOOLEAN;
    signal tmp_2_fu_135_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_reg_232 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond1_fu_123_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_cast_fu_143_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_2_cast_reg_237 : STD_LOGIC_VECTOR (12 downto 0);
    signal x_1_fu_157_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_1_reg_245 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_76 : BOOLEAN;
    signal tmp_5_fu_172_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_5_reg_250 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond_fu_151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_index_fu_188_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_index_reg_255 : STD_LOGIC_VECTOR (12 downto 0);
    signal o_index_fu_193_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal o_index_reg_260 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_92 : BOOLEAN;
    signal tmp_7_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_265 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_reg_73 : STD_LOGIC_VECTOR (8 downto 0);
    signal y_reg_85 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond2_fu_111_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_reg_96 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_124 : BOOLEAN;
    signal tmp_8_fu_203_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_207_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_cast3_fu_147_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_fu_163_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_5_fu_172_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp1_fu_178_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_5_fu_172_p00 : STD_LOGIC_VECTOR (13 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_reg_73_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((exitcond1_fu_123_p2 = ap_const_lv1_0)))) then 
                c_reg_73 <= c_1_reg_219;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                c_reg_73 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    x_reg_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
                x_reg_96 <= x_1_reg_245;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond1_fu_123_p2 = ap_const_lv1_0))) then 
                x_reg_96 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    y_reg_85_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond_fu_151_p2)))) then 
                y_reg_85 <= y_1_reg_227;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond2_fu_111_p2))) then 
                y_reg_85 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                c_1_reg_219 <= c_1_fu_117_p2;
                    c_cast7_reg_211(8 downto 0) <= c_cast7_fu_107_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond_fu_151_p2))) then
                i_index_reg_255 <= i_index_fu_188_p2;
                    tmp_5_reg_250(13 downto 4) <= tmp_5_fu_172_p2(13 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                o_index_reg_260 <= o_index_fu_193_p2;
                tmp_7_reg_265 <= tmp_7_fu_197_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond1_fu_123_p2 = ap_const_lv1_0))) then
                    tmp_2_cast_reg_237(4 downto 2) <= tmp_2_cast_fu_143_p1(4 downto 2);
                    tmp_2_reg_232(4 downto 2) <= tmp_2_fu_135_p3(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                x_1_reg_245 <= x_1_fu_157_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                y_1_reg_227 <= y_1_fu_129_p2;
            end if;
        end if;
    end process;
    c_cast7_reg_211(13 downto 9) <= "00000";
    tmp_2_reg_232(1 downto 0) <= "00";
    tmp_2_cast_reg_237(1 downto 0) <= "00";
    tmp_2_cast_reg_237(12 downto 5) <= "00000000";
    tmp_5_reg_250(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond1_fu_123_p2, exitcond_fu_151_p2, exitcond2_fu_111_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_lv1_0 = exitcond2_fu_111_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((exitcond1_fu_123_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (not((ap_const_lv1_0 = exitcond_fu_151_p2))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;

    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, exitcond2_fu_111_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond2_fu_111_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond2_fu_111_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond2_fu_111_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_124_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_124 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_23_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_23 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_48_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_48 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_59_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_59 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_76_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_76 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_92_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_92 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_23)
    begin
        if (ap_sig_23) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_48)
    begin
        if (ap_sig_48) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_59)
    begin
        if (ap_sig_59) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_76)
    begin
        if (ap_sig_76) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_92)
    begin
        if (ap_sig_92) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_124)
    begin
        if (ap_sig_124) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;

    c_1_fu_117_p2 <= std_logic_vector(unsigned(c_reg_73) + unsigned(ap_const_lv9_1));
    c_cast7_fu_107_p1 <= std_logic_vector(resize(unsigned(c_reg_73),14));
    exitcond1_fu_123_p2 <= "1" when (y_reg_85 = ap_const_lv3_5) else "0";
    exitcond2_fu_111_p2 <= "1" when (c_reg_73 = ap_const_lv9_190) else "0";
    exitcond_fu_151_p2 <= "1" when (x_reg_96 = ap_const_lv3_5) else "0";
    i_index_fu_188_p2 <= std_logic_vector(unsigned(tmp1_fu_178_p4) + unsigned(tmp_2_cast_reg_237));
    input_r_address0 <= tmp_8_fu_203_p1(13 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    o_index_fu_193_p2 <= std_logic_vector(unsigned(tmp_5_reg_250) + unsigned(c_cast7_reg_211));
    output_r_address0 <= tmp_9_fu_207_p1(13 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= input_r_q0;

    output_r_we0_assign_proc : process(tmp_7_reg_265, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = tmp_7_reg_265))))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_178_p4 <= ((c_reg_73 & ap_const_lv1_0) & x_reg_96);
    tmp_2_cast_fu_143_p1 <= std_logic_vector(resize(unsigned(tmp_2_fu_135_p3),13));
    tmp_2_fu_135_p3 <= (y_reg_85 & ap_const_lv2_0);
    tmp_4_fu_163_p2 <= std_logic_vector(unsigned(x_cast3_fu_147_p1) + unsigned(tmp_2_reg_232));
    tmp_5_fu_172_p0 <= tmp_5_fu_172_p00(5 - 1 downto 0);
    tmp_5_fu_172_p00 <= std_logic_vector(resize(unsigned(tmp_4_fu_163_p2),14));
    tmp_5_fu_172_p2 <= std_logic_vector(resize(unsigned(tmp_5_fu_172_p0) * unsigned(ap_const_lv14_190), 14));
    tmp_7_fu_197_p2 <= "1" when (unsigned(o_index_fu_193_p2) < unsigned(ap_const_lv14_1260)) else "0";
    tmp_8_fu_203_p1 <= std_logic_vector(resize(unsigned(i_index_reg_255),64));
    tmp_9_fu_207_p1 <= std_logic_vector(resize(unsigned(o_index_reg_260),64));
    x_1_fu_157_p2 <= std_logic_vector(unsigned(x_reg_96) + unsigned(ap_const_lv3_1));
    x_cast3_fu_147_p1 <= std_logic_vector(resize(unsigned(x_reg_96),5));
    y_1_fu_129_p2 <= std_logic_vector(unsigned(y_reg_85) + unsigned(ap_const_lv3_1));
end behav;
