-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_mlp_xcel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of dut_mlp_xcel is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_st37_fsm_36 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_st38_fsm_37 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_st39_fsm_38 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_st40_fsm_39 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_st41_fsm_40 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_st42_fsm_41 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_st43_fsm_42 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_st44_fsm_43 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_st45_fsm_44 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_st46_fsm_45 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_st47_fsm_46 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_st48_fsm_47 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_st49_fsm_48 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_st50_fsm_49 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_st51_fsm_50 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_st52_fsm_51 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_st53_fsm_52 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_st54_fsm_53 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_st55_fsm_54 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st56_fsm_55 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st57_fsm_56 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st58_fsm_57 : STD_LOGIC_VECTOR (66 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st59_fsm_58 : STD_LOGIC_VECTOR (66 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st60_fsm_59 : STD_LOGIC_VECTOR (66 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st61_fsm_60 : STD_LOGIC_VECTOR (66 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st62_fsm_61 : STD_LOGIC_VECTOR (66 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st63_fsm_62 : STD_LOGIC_VECTOR (66 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st64_fsm_63 : STD_LOGIC_VECTOR (66 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st65_fsm_64 : STD_LOGIC_VECTOR (66 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st66_fsm_65 : STD_LOGIC_VECTOR (66 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st67_fsm_66 : STD_LOGIC_VECTOR (66 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv6_1C : STD_LOGIC_VECTOR (5 downto 0) := "011100";
    constant ap_const_lv6_A : STD_LOGIC_VECTOR (5 downto 0) := "001010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv13_1260 : STD_LOGIC_VECTOR (12 downto 0) := "1001001100000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv16_190 : STD_LOGIC_VECTOR (15 downto 0) := "0000000110010000";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv9_190 : STD_LOGIC_VECTOR (8 downto 0) := "110010000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv7_54 : STD_LOGIC_VECTOR (6 downto 0) := "1010100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_54 : STD_LOGIC_VECTOR (7 downto 0) := "01010100";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_3E759240 : STD_LOGIC_VECTOR (31 downto 0) := "00111110011101011001001001000000";
    constant ap_const_lv32_BE833E74 : STD_LOGIC_VECTOR (31 downto 0) := "10111110100000110011111001110100";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_84 : BOOLEAN;
    signal fc1_weight_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal fc1_weight_ce0 : STD_LOGIC;
    signal fc1_weight_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc1_bias_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal fc1_bias_ce0 : STD_LOGIC;
    signal fc1_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc2_weight_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal fc2_weight_ce0 : STD_LOGIC;
    signal fc2_weight_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc2_bias_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal fc2_bias_ce0 : STD_LOGIC;
    signal fc2_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc3_weight_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fc3_weight_ce0 : STD_LOGIC;
    signal fc3_weight_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_conv1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_138 : BOOLEAN;
    signal ap_sig_cseq_ST_st52_fsm_51 : STD_LOGIC;
    signal ap_sig_145 : BOOLEAN;
    signal grp_fu_444_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_463 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st17_fsm_16 : STD_LOGIC;
    signal ap_sig_155 : BOOLEAN;
    signal ap_sig_cseq_ST_st36_fsm_35 : STD_LOGIC;
    signal ap_sig_162 : BOOLEAN;
    signal ap_sig_cseq_ST_st55_fsm_54 : STD_LOGIC;
    signal ap_sig_170 : BOOLEAN;
    signal grp_fu_436_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st22_fsm_21 : STD_LOGIC;
    signal ap_sig_180 : BOOLEAN;
    signal ap_sig_cseq_ST_st41_fsm_40 : STD_LOGIC;
    signal ap_sig_187 : BOOLEAN;
    signal ap_sig_cseq_ST_st60_fsm_59 : STD_LOGIC;
    signal ap_sig_195 : BOOLEAN;
    signal reg_475 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st28_fsm_27 : STD_LOGIC;
    signal ap_sig_204 : BOOLEAN;
    signal ap_sig_cseq_ST_st47_fsm_46 : STD_LOGIC;
    signal ap_sig_211 : BOOLEAN;
    signal ap_sig_cseq_ST_st64_fsm_63 : STD_LOGIC;
    signal ap_sig_219 : BOOLEAN;
    signal mem_conv2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_481 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st33_fsm_32 : STD_LOGIC;
    signal ap_sig_229 : BOOLEAN;
    signal ap_sig_cseq_ST_st66_fsm_65 : STD_LOGIC;
    signal ap_sig_236 : BOOLEAN;
    signal i_1_fu_493_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_246 : BOOLEAN;
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_255 : BOOLEAN;
    signal grp_dut_reshape_fu_430_ap_done : STD_LOGIC;
    signal next_mul_fu_505_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal next_mul_reg_914 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_268 : BOOLEAN;
    signal n_fu_517_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal n_reg_922 : STD_LOGIC_VECTOR (6 downto 0);
    signal m_fu_533_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal m_reg_930 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_279 : BOOLEAN;
    signal exitcond3_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_i_fu_555_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_i_reg_945 : STD_LOGIC_VECTOR (63 downto 0);
    signal fc1_bias_load_reg_960 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st23_fsm_22 : STD_LOGIC;
    signal ap_sig_302 : BOOLEAN;
    signal biased_1_fu_602_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal biased_1_reg_965 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st29_fsm_28 : STD_LOGIC;
    signal ap_sig_311 : BOOLEAN;
    signal n_1_fu_616_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal n_1_reg_973 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st31_fsm_30 : STD_LOGIC;
    signal ap_sig_320 : BOOLEAN;
    signal tmp_i3_fu_646_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_i3_reg_978 : STD_LOGIC_VECTOR (14 downto 0);
    signal exitcond2_fu_610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_1_fu_662_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal m_1_reg_986 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st32_fsm_31 : STD_LOGIC;
    signal ap_sig_334 : BOOLEAN;
    signal exitcond5_fu_656_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_i1_fu_687_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_i1_reg_1001 : STD_LOGIC_VECTOR (63 downto 0);
    signal fc2_bias_load_reg_1016 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st42_fsm_41 : STD_LOGIC;
    signal ap_sig_356 : BOOLEAN;
    signal biased_3_fu_734_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal biased_3_reg_1021 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st48_fsm_47 : STD_LOGIC;
    signal ap_sig_365 : BOOLEAN;
    signal next_mul2_fu_742_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal next_mul2_reg_1026 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st50_fsm_49 : STD_LOGIC;
    signal ap_sig_374 : BOOLEAN;
    signal n_2_fu_754_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_2_reg_1034 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond4_fu_748_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_2_fu_770_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal m_2_reg_1047 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st51_fsm_50 : STD_LOGIC;
    signal ap_sig_391 : BOOLEAN;
    signal exitcond6_fu_764_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bias_load_phi_i_fu_796_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_conv2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_conv2_load_1_reg_1072 : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_conv1_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal mem_conv1_ce0 : STD_LOGIC;
    signal mem_conv1_we0 : STD_LOGIC;
    signal mem_conv1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_conv2_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal mem_conv2_ce0 : STD_LOGIC;
    signal mem_conv2_we0 : STD_LOGIC;
    signal mem_conv2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_conv2_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal mem_conv2_ce1 : STD_LOGIC;
    signal mem_conv2_we1 : STD_LOGIC;
    signal grp_dut_conv1_fu_404_ap_start : STD_LOGIC;
    signal grp_dut_conv1_fu_404_ap_done : STD_LOGIC;
    signal grp_dut_conv1_fu_404_ap_idle : STD_LOGIC;
    signal grp_dut_conv1_fu_404_ap_ready : STD_LOGIC;
    signal grp_dut_conv1_fu_404_input_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_dut_conv1_fu_404_input_r_ce0 : STD_LOGIC;
    signal grp_dut_conv1_fu_404_output_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_dut_conv1_fu_404_output_r_ce0 : STD_LOGIC;
    signal grp_dut_conv1_fu_404_output_r_we0 : STD_LOGIC;
    signal grp_dut_conv1_fu_404_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_conv1_1_fu_412_ap_start : STD_LOGIC;
    signal grp_dut_conv1_1_fu_412_ap_done : STD_LOGIC;
    signal grp_dut_conv1_1_fu_412_ap_idle : STD_LOGIC;
    signal grp_dut_conv1_1_fu_412_ap_ready : STD_LOGIC;
    signal grp_dut_conv1_1_fu_412_input_r_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_dut_conv1_1_fu_412_input_r_ce0 : STD_LOGIC;
    signal grp_dut_conv1_1_fu_412_output_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_dut_conv1_1_fu_412_output_r_ce0 : STD_LOGIC;
    signal grp_dut_conv1_1_fu_412_output_r_we0 : STD_LOGIC;
    signal grp_dut_conv1_1_fu_412_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_max_pool_fu_421_ap_start : STD_LOGIC;
    signal grp_dut_max_pool_fu_421_ap_done : STD_LOGIC;
    signal grp_dut_max_pool_fu_421_ap_idle : STD_LOGIC;
    signal grp_dut_max_pool_fu_421_ap_ready : STD_LOGIC;
    signal grp_dut_max_pool_fu_421_input_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_dut_max_pool_fu_421_input_r_ce0 : STD_LOGIC;
    signal grp_dut_max_pool_fu_421_output_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_dut_max_pool_fu_421_output_r_ce0 : STD_LOGIC;
    signal grp_dut_max_pool_fu_421_output_r_we0 : STD_LOGIC;
    signal grp_dut_max_pool_fu_421_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_max_pool_fu_421_I : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_dut_reshape_fu_430_ap_start : STD_LOGIC;
    signal grp_dut_reshape_fu_430_ap_idle : STD_LOGIC;
    signal grp_dut_reshape_fu_430_ap_ready : STD_LOGIC;
    signal grp_dut_reshape_fu_430_input_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_dut_reshape_fu_430_input_r_ce0 : STD_LOGIC;
    signal grp_dut_reshape_fu_430_output_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_dut_reshape_fu_430_output_r_ce0 : STD_LOGIC;
    signal grp_dut_reshape_fu_430_output_r_we0 : STD_LOGIC;
    signal grp_dut_reshape_fu_430_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_264 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_i_reg_275 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st30_fsm_29 : STD_LOGIC;
    signal ap_sig_498 : BOOLEAN;
    signal phi_mul_reg_287 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_i_reg_299 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_i_reg_311 : STD_LOGIC_VECTOR (8 downto 0);
    signal n_i1_reg_322 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st49_fsm_48 : STD_LOGIC;
    signal ap_sig_518 : BOOLEAN;
    signal sum_i4_reg_334 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_i5_reg_346 : STD_LOGIC_VECTOR (6 downto 0);
    signal n_i2_reg_357 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st65_fsm_64 : STD_LOGIC;
    signal ap_sig_533 : BOOLEAN;
    signal phi_mul1_reg_369 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_i1_phi_fu_385_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_i1_reg_381 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_i1_reg_393 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_grp_dut_conv1_fu_404_ap_start : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_553 : BOOLEAN;
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_560 : BOOLEAN;
    signal ap_reg_grp_dut_conv1_1_fu_412_ap_start : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_579 : BOOLEAN;
    signal ap_reg_grp_dut_max_pool_fu_421_ap_start : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_596 : BOOLEAN;
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_603 : BOOLEAN;
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_611 : BOOLEAN;
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_618 : BOOLEAN;
    signal ap_reg_grp_dut_reshape_fu_430_ap_start : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_630 : BOOLEAN;
    signal tmp_s_fu_499_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_i_fu_545_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_i_fu_550_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_i8_fu_677_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_i1_fu_682_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_i1_fu_782_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_i2_fu_787_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_i2_fu_805_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_436_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_436_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st18_fsm_17 : STD_LOGIC;
    signal ap_sig_664 : BOOLEAN;
    signal ap_sig_cseq_ST_st24_fsm_23 : STD_LOGIC;
    signal ap_sig_671 : BOOLEAN;
    signal ap_sig_cseq_ST_st37_fsm_36 : STD_LOGIC;
    signal ap_sig_679 : BOOLEAN;
    signal ap_sig_cseq_ST_st43_fsm_42 : STD_LOGIC;
    signal ap_sig_686 : BOOLEAN;
    signal ap_sig_cseq_ST_st56_fsm_55 : STD_LOGIC;
    signal ap_sig_694 : BOOLEAN;
    signal grp_fu_444_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_444_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_453_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_453_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st67_fsm_66 : STD_LOGIC;
    signal ap_sig_708 : BOOLEAN;
    signal m_i_cast_fu_523_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal w_index_fu_539_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal biased_to_int_fu_560_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_564_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_574_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_584_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl_i_fu_622_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl1_i_fu_634_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_i_cast_fu_630_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl1_i_cast_fu_642_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal m_i5_cast5_fu_652_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal w_index_1_fu_668_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal w_index_1_cast_fu_673_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal biased_2_to_int_fu_692_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_696_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_fu_706_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs3_fu_716_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs3_fu_710_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_722_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_728_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_i1_cast_fu_760_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal w_index_2_fu_776_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_fu_792_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_conv2_load_to_int_fu_810_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_conv2_load_1_to_int_fu_828_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_814_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_824_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs1_fu_851_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_fu_845_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_831_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_841_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs2_fu_869_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs2_fu_863_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_857_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_875_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_881_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_887_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_453_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (66 downto 0);

    component dut_conv1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_conv1_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_max_pool IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        I : IN STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component dut_reshape IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_fcmp_32ns_32ns_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component dut_mlp_xcel_fc1_weight IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_mlp_xcel_fc1_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_mlp_xcel_fc2_weight IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_mlp_xcel_fc2_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_mlp_xcel_fc3_weight IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_mlp_xcel_mem_conv1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_mlp_xcel_mem_conv2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    fc1_weight_U : component dut_mlp_xcel_fc1_weight
    generic map (
        DataWidth => 32,
        AddressRange => 48000,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc1_weight_address0,
        ce0 => fc1_weight_ce0,
        q0 => fc1_weight_q0);

    fc1_bias_U : component dut_mlp_xcel_fc1_bias
    generic map (
        DataWidth => 32,
        AddressRange => 120,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc1_bias_address0,
        ce0 => fc1_bias_ce0,
        q0 => fc1_bias_q0);

    fc2_weight_U : component dut_mlp_xcel_fc2_weight
    generic map (
        DataWidth => 32,
        AddressRange => 10080,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc2_weight_address0,
        ce0 => fc2_weight_ce0,
        q0 => fc2_weight_q0);

    fc2_bias_U : component dut_mlp_xcel_fc2_bias
    generic map (
        DataWidth => 32,
        AddressRange => 84,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc2_bias_address0,
        ce0 => fc2_bias_ce0,
        q0 => fc2_bias_q0);

    fc3_weight_U : component dut_mlp_xcel_fc3_weight
    generic map (
        DataWidth => 32,
        AddressRange => 168,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc3_weight_address0,
        ce0 => fc3_weight_ce0,
        q0 => fc3_weight_q0);

    mem_conv1_U : component dut_mlp_xcel_mem_conv1
    generic map (
        DataWidth => 32,
        AddressRange => 4704,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mem_conv1_address0,
        ce0 => mem_conv1_ce0,
        we0 => mem_conv1_we0,
        d0 => mem_conv1_d0,
        q0 => mem_conv1_q0);

    mem_conv2_U : component dut_mlp_xcel_mem_conv2
    generic map (
        DataWidth => 32,
        AddressRange => 4704,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mem_conv2_address0,
        ce0 => mem_conv2_ce0,
        we0 => mem_conv2_we0,
        d0 => mem_conv2_d0,
        q0 => mem_conv2_q0,
        address1 => mem_conv2_address1,
        ce1 => mem_conv2_ce1,
        we1 => mem_conv2_we1,
        d1 => reg_475,
        q1 => mem_conv2_q1);

    grp_dut_conv1_fu_404 : component dut_conv1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dut_conv1_fu_404_ap_start,
        ap_done => grp_dut_conv1_fu_404_ap_done,
        ap_idle => grp_dut_conv1_fu_404_ap_idle,
        ap_ready => grp_dut_conv1_fu_404_ap_ready,
        input_r_address0 => grp_dut_conv1_fu_404_input_r_address0,
        input_r_ce0 => grp_dut_conv1_fu_404_input_r_ce0,
        input_r_q0 => mem_conv2_q0,
        output_r_address0 => grp_dut_conv1_fu_404_output_r_address0,
        output_r_ce0 => grp_dut_conv1_fu_404_output_r_ce0,
        output_r_we0 => grp_dut_conv1_fu_404_output_r_we0,
        output_r_d0 => grp_dut_conv1_fu_404_output_r_d0);

    grp_dut_conv1_1_fu_412 : component dut_conv1_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dut_conv1_1_fu_412_ap_start,
        ap_done => grp_dut_conv1_1_fu_412_ap_done,
        ap_idle => grp_dut_conv1_1_fu_412_ap_idle,
        ap_ready => grp_dut_conv1_1_fu_412_ap_ready,
        input_r_address0 => grp_dut_conv1_1_fu_412_input_r_address0,
        input_r_ce0 => grp_dut_conv1_1_fu_412_input_r_ce0,
        input_r_q0 => input_r_q0,
        output_r_address0 => grp_dut_conv1_1_fu_412_output_r_address0,
        output_r_ce0 => grp_dut_conv1_1_fu_412_output_r_ce0,
        output_r_we0 => grp_dut_conv1_1_fu_412_output_r_we0,
        output_r_d0 => grp_dut_conv1_1_fu_412_output_r_d0);

    grp_dut_max_pool_fu_421 : component dut_max_pool
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dut_max_pool_fu_421_ap_start,
        ap_done => grp_dut_max_pool_fu_421_ap_done,
        ap_idle => grp_dut_max_pool_fu_421_ap_idle,
        ap_ready => grp_dut_max_pool_fu_421_ap_ready,
        input_r_address0 => grp_dut_max_pool_fu_421_input_r_address0,
        input_r_ce0 => grp_dut_max_pool_fu_421_input_r_ce0,
        input_r_q0 => mem_conv1_q0,
        output_r_address0 => grp_dut_max_pool_fu_421_output_r_address0,
        output_r_ce0 => grp_dut_max_pool_fu_421_output_r_ce0,
        output_r_we0 => grp_dut_max_pool_fu_421_output_r_we0,
        output_r_d0 => grp_dut_max_pool_fu_421_output_r_d0,
        I => grp_dut_max_pool_fu_421_I);

    grp_dut_reshape_fu_430 : component dut_reshape
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dut_reshape_fu_430_ap_start,
        ap_done => grp_dut_reshape_fu_430_ap_done,
        ap_idle => grp_dut_reshape_fu_430_ap_idle,
        ap_ready => grp_dut_reshape_fu_430_ap_ready,
        input_r_address0 => grp_dut_reshape_fu_430_input_r_address0,
        input_r_ce0 => grp_dut_reshape_fu_430_input_r_ce0,
        input_r_q0 => mem_conv2_q0,
        output_r_address0 => grp_dut_reshape_fu_430_output_r_address0,
        output_r_ce0 => grp_dut_reshape_fu_430_output_r_ce0,
        output_r_we0 => grp_dut_reshape_fu_430_output_r_we0,
        output_r_d0 => grp_dut_reshape_fu_430_output_r_d0);

    dut_fadd_32ns_32ns_32_5_full_dsp_U17 : component dut_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_436_p0,
        din1 => grp_fu_436_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_436_p2);

    dut_fmul_32ns_32ns_32_4_max_dsp_U18 : component dut_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_444_p0,
        din1 => grp_fu_444_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_444_p2);

    dut_fcmp_32ns_32ns_1_1_U19 : component dut_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_453_p0,
        din1 => grp_fu_453_p1,
        opcode => grp_fu_453_opcode,
        dout => grp_fu_453_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_dut_conv1_1_fu_412_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_dut_conv1_1_fu_412_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond_fu_487_p2)))) then 
                    ap_reg_grp_dut_conv1_1_fu_412_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_dut_conv1_1_fu_412_ap_ready)) then 
                    ap_reg_grp_dut_conv1_1_fu_412_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_dut_conv1_fu_404_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_dut_conv1_fu_404_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
                    ap_reg_grp_dut_conv1_fu_404_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_dut_conv1_fu_404_ap_ready)) then 
                    ap_reg_grp_dut_conv1_fu_404_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_dut_max_pool_fu_421_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_dut_max_pool_fu_421_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7))) then 
                    ap_reg_grp_dut_max_pool_fu_421_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_dut_max_pool_fu_421_ap_ready)) then 
                    ap_reg_grp_dut_max_pool_fu_421_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_dut_reshape_fu_430_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_dut_reshape_fu_430_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
                    ap_reg_grp_dut_reshape_fu_430_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_dut_reshape_fu_430_ap_ready)) then 
                    ap_reg_grp_dut_reshape_fu_430_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond_fu_487_p2))) then 
                i_reg_264 <= i_1_fu_493_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_264 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    m_i1_reg_393_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st60_fsm_59)) then 
                m_i1_reg_393 <= m_2_reg_1047;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49) and (ap_const_lv1_0 = exitcond4_fu_748_p2))) then 
                m_i1_reg_393 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    m_i5_reg_346_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_40)) then 
                m_i5_reg_346 <= m_1_reg_986;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30) and (ap_const_lv1_0 = exitcond2_fu_610_p2))) then 
                m_i5_reg_346 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    m_i_reg_311_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then 
                m_i_reg_311 <= m_reg_930;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) and (ap_const_lv1_0 = exitcond1_fu_511_p2))) then 
                m_i_reg_311 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    n_i1_reg_322_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) and not((ap_const_lv1_0 = exitcond1_fu_511_p2)))) then 
                n_i1_reg_322 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st49_fsm_48)) then 
                n_i1_reg_322 <= n_1_reg_973;
            end if; 
        end if;
    end process;

    n_i2_reg_357_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30) and not((ap_const_lv1_0 = exitcond2_fu_610_p2)))) then 
                n_i2_reg_357 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st65_fsm_64)) then 
                n_i2_reg_357 <= n_2_reg_1034;
            end if; 
        end if;
    end process;

    n_i_reg_275_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29)) then 
                n_i_reg_275 <= n_reg_922;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and not((ap_const_logic_0 = grp_dut_reshape_fu_430_ap_done)))) then 
                n_i_reg_275 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    phi_mul1_reg_369_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30) and not((ap_const_lv1_0 = exitcond2_fu_610_p2)))) then 
                phi_mul1_reg_369 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st65_fsm_64)) then 
                phi_mul1_reg_369 <= next_mul2_reg_1026;
            end if; 
        end if;
    end process;

    phi_mul_reg_287_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29)) then 
                phi_mul_reg_287 <= next_mul_reg_914;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and not((ap_const_logic_0 = grp_dut_reshape_fu_430_ap_done)))) then 
                phi_mul_reg_287 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    sum_i1_reg_381_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st60_fsm_59)) then 
                sum_i1_reg_381 <= grp_fu_436_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49) and (ap_const_lv1_0 = exitcond4_fu_748_p2))) then 
                sum_i1_reg_381 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sum_i4_reg_334_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_40)) then 
                sum_i4_reg_334 <= grp_fu_436_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30) and (ap_const_lv1_0 = exitcond2_fu_610_p2))) then 
                sum_i4_reg_334 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sum_i_reg_299_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then 
                sum_i_reg_299 <= grp_fu_436_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) and (ap_const_lv1_0 = exitcond1_fu_511_p2))) then 
                sum_i_reg_299 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)) then
                biased_1_reg_965 <= biased_1_fu_602_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_47)) then
                biased_3_reg_1021 <= biased_3_fu_734_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then
                fc1_bias_load_reg_960 <= fc1_bias_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_41)) then
                fc2_bias_load_reg_1016 <= fc2_bias_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31)) then
                m_1_reg_986 <= m_1_fu_662_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50)) then
                m_2_reg_1047 <= m_2_fu_770_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then
                m_reg_930 <= m_fu_533_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st66_fsm_65)) then
                mem_conv2_load_1_reg_1072 <= mem_conv2_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30)) then
                n_1_reg_973 <= n_1_fu_616_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49)) then
                n_2_reg_1034 <= n_2_fu_754_p2;
                next_mul2_reg_1026 <= next_mul2_fu_742_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then
                n_reg_922 <= n_fu_517_p2;
                next_mul_reg_914 <= next_mul_fu_505_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16) or (ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35) or (ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_54))) then
                reg_463 <= grp_fu_444_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27) or (ap_const_logic_1 = ap_sig_cseq_ST_st47_fsm_46) or (ap_const_logic_1 = ap_sig_cseq_ST_st64_fsm_63))) then
                reg_475 <= grp_fu_436_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32) or (ap_const_logic_1 = ap_sig_cseq_ST_st66_fsm_65))) then
                reg_481 <= mem_conv2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) and not((exitcond3_fu_527_p2 = ap_const_lv1_0)))) then
                    tmp_15_i_reg_945(6 downto 0) <= tmp_15_i_fu_555_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31) and not((ap_const_lv1_0 = exitcond5_fu_656_p2)))) then
                    tmp_16_i1_reg_1001(6 downto 0) <= tmp_16_i1_fu_687_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30) and (ap_const_lv1_0 = exitcond2_fu_610_p2))) then
                    tmp_i3_reg_978(14 downto 3) <= tmp_i3_fu_646_p2(14 downto 3);
            end if;
        end if;
    end process;
    tmp_15_i_reg_945(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    tmp_i3_reg_978(2 downto 0) <= "000";
    tmp_16_i1_reg_1001(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, grp_dut_reshape_fu_430_ap_done, exitcond3_fu_527_p2, exitcond2_fu_610_p2, exitcond5_fu_656_p2, exitcond4_fu_748_p2, exitcond6_fu_764_p2, grp_dut_conv1_fu_404_ap_done, grp_dut_conv1_1_fu_412_ap_done, grp_dut_max_pool_fu_421_ap_done, exitcond_fu_487_p2, exitcond1_fu_511_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((ap_const_lv1_0 = exitcond_fu_487_p2)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_logic_0 = grp_dut_conv1_1_fu_412_ap_done))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                if (not((ap_const_logic_0 = grp_dut_max_pool_fu_421_ap_done))) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                if (not((ap_const_logic_0 = grp_dut_conv1_fu_404_ap_done))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                if (not((ap_const_logic_0 = grp_dut_max_pool_fu_421_ap_done))) then
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                else
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                end if;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                if (not((ap_const_logic_0 = grp_dut_reshape_fu_430_ap_done))) then
                    ap_NS_fsm <= ap_ST_st12_fsm_11;
                else
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                end if;
            when ap_ST_st12_fsm_11 => 
                if ((ap_const_lv1_0 = exitcond1_fu_511_p2)) then
                    ap_NS_fsm <= ap_ST_st13_fsm_12;
                else
                    ap_NS_fsm <= ap_ST_st31_fsm_30;
                end if;
            when ap_ST_st13_fsm_12 => 
                if (not((exitcond3_fu_527_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st23_fsm_22;
                else
                    ap_NS_fsm <= ap_ST_st14_fsm_13;
                end if;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st31_fsm_30 => 
                if ((ap_const_lv1_0 = exitcond2_fu_610_p2)) then
                    ap_NS_fsm <= ap_ST_st32_fsm_31;
                else
                    ap_NS_fsm <= ap_ST_st50_fsm_49;
                end if;
            when ap_ST_st32_fsm_31 => 
                if (not((ap_const_lv1_0 = exitcond5_fu_656_p2))) then
                    ap_NS_fsm <= ap_ST_st42_fsm_41;
                else
                    ap_NS_fsm <= ap_ST_st33_fsm_32;
                end if;
            when ap_ST_st33_fsm_32 => 
                ap_NS_fsm <= ap_ST_st34_fsm_33;
            when ap_ST_st34_fsm_33 => 
                ap_NS_fsm <= ap_ST_st35_fsm_34;
            when ap_ST_st35_fsm_34 => 
                ap_NS_fsm <= ap_ST_st36_fsm_35;
            when ap_ST_st36_fsm_35 => 
                ap_NS_fsm <= ap_ST_st37_fsm_36;
            when ap_ST_st37_fsm_36 => 
                ap_NS_fsm <= ap_ST_st38_fsm_37;
            when ap_ST_st38_fsm_37 => 
                ap_NS_fsm <= ap_ST_st39_fsm_38;
            when ap_ST_st39_fsm_38 => 
                ap_NS_fsm <= ap_ST_st40_fsm_39;
            when ap_ST_st40_fsm_39 => 
                ap_NS_fsm <= ap_ST_st41_fsm_40;
            when ap_ST_st41_fsm_40 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st42_fsm_41 => 
                ap_NS_fsm <= ap_ST_st43_fsm_42;
            when ap_ST_st43_fsm_42 => 
                ap_NS_fsm <= ap_ST_st44_fsm_43;
            when ap_ST_st44_fsm_43 => 
                ap_NS_fsm <= ap_ST_st45_fsm_44;
            when ap_ST_st45_fsm_44 => 
                ap_NS_fsm <= ap_ST_st46_fsm_45;
            when ap_ST_st46_fsm_45 => 
                ap_NS_fsm <= ap_ST_st47_fsm_46;
            when ap_ST_st47_fsm_46 => 
                ap_NS_fsm <= ap_ST_st48_fsm_47;
            when ap_ST_st48_fsm_47 => 
                ap_NS_fsm <= ap_ST_st49_fsm_48;
            when ap_ST_st49_fsm_48 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st50_fsm_49 => 
                if ((ap_const_lv1_0 = exitcond4_fu_748_p2)) then
                    ap_NS_fsm <= ap_ST_st51_fsm_50;
                else
                    ap_NS_fsm <= ap_ST_st66_fsm_65;
                end if;
            when ap_ST_st51_fsm_50 => 
                if (not((ap_const_lv1_0 = exitcond6_fu_764_p2))) then
                    ap_NS_fsm <= ap_ST_st61_fsm_60;
                else
                    ap_NS_fsm <= ap_ST_st52_fsm_51;
                end if;
            when ap_ST_st52_fsm_51 => 
                ap_NS_fsm <= ap_ST_st53_fsm_52;
            when ap_ST_st53_fsm_52 => 
                ap_NS_fsm <= ap_ST_st54_fsm_53;
            when ap_ST_st54_fsm_53 => 
                ap_NS_fsm <= ap_ST_st55_fsm_54;
            when ap_ST_st55_fsm_54 => 
                ap_NS_fsm <= ap_ST_st56_fsm_55;
            when ap_ST_st56_fsm_55 => 
                ap_NS_fsm <= ap_ST_st57_fsm_56;
            when ap_ST_st57_fsm_56 => 
                ap_NS_fsm <= ap_ST_st58_fsm_57;
            when ap_ST_st58_fsm_57 => 
                ap_NS_fsm <= ap_ST_st59_fsm_58;
            when ap_ST_st59_fsm_58 => 
                ap_NS_fsm <= ap_ST_st60_fsm_59;
            when ap_ST_st60_fsm_59 => 
                ap_NS_fsm <= ap_ST_st51_fsm_50;
            when ap_ST_st61_fsm_60 => 
                ap_NS_fsm <= ap_ST_st62_fsm_61;
            when ap_ST_st62_fsm_61 => 
                ap_NS_fsm <= ap_ST_st63_fsm_62;
            when ap_ST_st63_fsm_62 => 
                ap_NS_fsm <= ap_ST_st64_fsm_63;
            when ap_ST_st64_fsm_63 => 
                ap_NS_fsm <= ap_ST_st65_fsm_64;
            when ap_ST_st65_fsm_64 => 
                ap_NS_fsm <= ap_ST_st50_fsm_49;
            when ap_ST_st66_fsm_65 => 
                ap_NS_fsm <= ap_ST_st67_fsm_66;
            when ap_ST_st67_fsm_66 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st67_fsm_66)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st67_fsm_66))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st67_fsm_66)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st67_fsm_66)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        ap_const_lv32_3F800000 when (tmp_12_fu_887_p2(0) = '1') else 
        ap_const_lv32_0;

    ap_sig_138_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_138 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    ap_sig_145_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_145 <= (ap_const_lv1_1 = ap_CS_fsm(51 downto 51));
    end process;


    ap_sig_155_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_155 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    ap_sig_162_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_162 <= (ap_const_lv1_1 = ap_CS_fsm(35 downto 35));
    end process;


    ap_sig_170_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_170 <= (ap_const_lv1_1 = ap_CS_fsm(54 downto 54));
    end process;


    ap_sig_180_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_180 <= (ap_const_lv1_1 = ap_CS_fsm(21 downto 21));
    end process;


    ap_sig_187_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_187 <= (ap_const_lv1_1 = ap_CS_fsm(40 downto 40));
    end process;


    ap_sig_195_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_195 <= (ap_const_lv1_1 = ap_CS_fsm(59 downto 59));
    end process;


    ap_sig_204_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_204 <= (ap_const_lv1_1 = ap_CS_fsm(27 downto 27));
    end process;


    ap_sig_211_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_211 <= (ap_const_lv1_1 = ap_CS_fsm(46 downto 46));
    end process;


    ap_sig_219_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_219 <= (ap_const_lv1_1 = ap_CS_fsm(63 downto 63));
    end process;


    ap_sig_229_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_229 <= (ap_const_lv1_1 = ap_CS_fsm(32 downto 32));
    end process;


    ap_sig_236_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_236 <= (ap_const_lv1_1 = ap_CS_fsm(65 downto 65));
    end process;


    ap_sig_246_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_246 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_255_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_255 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    ap_sig_268_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_268 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    ap_sig_279_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_279 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    ap_sig_302_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_302 <= (ap_const_lv1_1 = ap_CS_fsm(22 downto 22));
    end process;


    ap_sig_311_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_311 <= (ap_const_lv1_1 = ap_CS_fsm(28 downto 28));
    end process;


    ap_sig_320_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_320 <= (ap_const_lv1_1 = ap_CS_fsm(30 downto 30));
    end process;


    ap_sig_334_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_334 <= (ap_const_lv1_1 = ap_CS_fsm(31 downto 31));
    end process;


    ap_sig_356_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_356 <= (ap_const_lv1_1 = ap_CS_fsm(41 downto 41));
    end process;


    ap_sig_365_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_365 <= (ap_const_lv1_1 = ap_CS_fsm(47 downto 47));
    end process;


    ap_sig_374_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_374 <= (ap_const_lv1_1 = ap_CS_fsm(49 downto 49));
    end process;


    ap_sig_391_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_391 <= (ap_const_lv1_1 = ap_CS_fsm(50 downto 50));
    end process;


    ap_sig_498_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_498 <= (ap_const_lv1_1 = ap_CS_fsm(29 downto 29));
    end process;


    ap_sig_518_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_518 <= (ap_const_lv1_1 = ap_CS_fsm(48 downto 48));
    end process;


    ap_sig_533_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_533 <= (ap_const_lv1_1 = ap_CS_fsm(64 downto 64));
    end process;


    ap_sig_553_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_553 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_560_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_560 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    ap_sig_579_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_579 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_596_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_596 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_603_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_603 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    ap_sig_611_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_611 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_618_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_618 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    ap_sig_630_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_630 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    ap_sig_664_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_664 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    ap_sig_671_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_671 <= (ap_const_lv1_1 = ap_CS_fsm(23 downto 23));
    end process;


    ap_sig_679_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_679 <= (ap_const_lv1_1 = ap_CS_fsm(36 downto 36));
    end process;


    ap_sig_686_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_686 <= (ap_const_lv1_1 = ap_CS_fsm(42 downto 42));
    end process;


    ap_sig_694_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_694 <= (ap_const_lv1_1 = ap_CS_fsm(55 downto 55));
    end process;


    ap_sig_708_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_708 <= (ap_const_lv1_1 = ap_CS_fsm(66 downto 66));
    end process;


    ap_sig_84_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_84 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_630)
    begin
        if (ap_sig_630) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_255)
    begin
        if (ap_sig_255) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_268)
    begin
        if (ap_sig_268) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_279)
    begin
        if (ap_sig_279) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_138)
    begin
        if (ap_sig_138) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st17_fsm_16_assign_proc : process(ap_sig_155)
    begin
        if (ap_sig_155) then 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st18_fsm_17_assign_proc : process(ap_sig_664)
    begin
        if (ap_sig_664) then 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_84)
    begin
        if (ap_sig_84) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st22_fsm_21_assign_proc : process(ap_sig_180)
    begin
        if (ap_sig_180) then 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st23_fsm_22_assign_proc : process(ap_sig_302)
    begin
        if (ap_sig_302) then 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st24_fsm_23_assign_proc : process(ap_sig_671)
    begin
        if (ap_sig_671) then 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st28_fsm_27_assign_proc : process(ap_sig_204)
    begin
        if (ap_sig_204) then 
            ap_sig_cseq_ST_st28_fsm_27 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st28_fsm_27 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st29_fsm_28_assign_proc : process(ap_sig_311)
    begin
        if (ap_sig_311) then 
            ap_sig_cseq_ST_st29_fsm_28 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st29_fsm_28 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_246)
    begin
        if (ap_sig_246) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st30_fsm_29_assign_proc : process(ap_sig_498)
    begin
        if (ap_sig_498) then 
            ap_sig_cseq_ST_st30_fsm_29 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st30_fsm_29 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st31_fsm_30_assign_proc : process(ap_sig_320)
    begin
        if (ap_sig_320) then 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st32_fsm_31_assign_proc : process(ap_sig_334)
    begin
        if (ap_sig_334) then 
            ap_sig_cseq_ST_st32_fsm_31 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st32_fsm_31 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st33_fsm_32_assign_proc : process(ap_sig_229)
    begin
        if (ap_sig_229) then 
            ap_sig_cseq_ST_st33_fsm_32 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st33_fsm_32 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st36_fsm_35_assign_proc : process(ap_sig_162)
    begin
        if (ap_sig_162) then 
            ap_sig_cseq_ST_st36_fsm_35 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st36_fsm_35 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st37_fsm_36_assign_proc : process(ap_sig_679)
    begin
        if (ap_sig_679) then 
            ap_sig_cseq_ST_st37_fsm_36 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st37_fsm_36 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_579)
    begin
        if (ap_sig_579) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st41_fsm_40_assign_proc : process(ap_sig_187)
    begin
        if (ap_sig_187) then 
            ap_sig_cseq_ST_st41_fsm_40 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st41_fsm_40 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st42_fsm_41_assign_proc : process(ap_sig_356)
    begin
        if (ap_sig_356) then 
            ap_sig_cseq_ST_st42_fsm_41 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st42_fsm_41 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st43_fsm_42_assign_proc : process(ap_sig_686)
    begin
        if (ap_sig_686) then 
            ap_sig_cseq_ST_st43_fsm_42 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st43_fsm_42 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st47_fsm_46_assign_proc : process(ap_sig_211)
    begin
        if (ap_sig_211) then 
            ap_sig_cseq_ST_st47_fsm_46 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st47_fsm_46 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st48_fsm_47_assign_proc : process(ap_sig_365)
    begin
        if (ap_sig_365) then 
            ap_sig_cseq_ST_st48_fsm_47 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st48_fsm_47 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st49_fsm_48_assign_proc : process(ap_sig_518)
    begin
        if (ap_sig_518) then 
            ap_sig_cseq_ST_st49_fsm_48 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st49_fsm_48 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_596)
    begin
        if (ap_sig_596) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st50_fsm_49_assign_proc : process(ap_sig_374)
    begin
        if (ap_sig_374) then 
            ap_sig_cseq_ST_st50_fsm_49 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st50_fsm_49 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st51_fsm_50_assign_proc : process(ap_sig_391)
    begin
        if (ap_sig_391) then 
            ap_sig_cseq_ST_st51_fsm_50 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st51_fsm_50 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st52_fsm_51_assign_proc : process(ap_sig_145)
    begin
        if (ap_sig_145) then 
            ap_sig_cseq_ST_st52_fsm_51 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st52_fsm_51 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st55_fsm_54_assign_proc : process(ap_sig_170)
    begin
        if (ap_sig_170) then 
            ap_sig_cseq_ST_st55_fsm_54 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st55_fsm_54 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st56_fsm_55_assign_proc : process(ap_sig_694)
    begin
        if (ap_sig_694) then 
            ap_sig_cseq_ST_st56_fsm_55 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st56_fsm_55 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_611)
    begin
        if (ap_sig_611) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st60_fsm_59_assign_proc : process(ap_sig_195)
    begin
        if (ap_sig_195) then 
            ap_sig_cseq_ST_st60_fsm_59 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st60_fsm_59 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st64_fsm_63_assign_proc : process(ap_sig_219)
    begin
        if (ap_sig_219) then 
            ap_sig_cseq_ST_st64_fsm_63 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st64_fsm_63 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st65_fsm_64_assign_proc : process(ap_sig_533)
    begin
        if (ap_sig_533) then 
            ap_sig_cseq_ST_st65_fsm_64 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st65_fsm_64 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st66_fsm_65_assign_proc : process(ap_sig_236)
    begin
        if (ap_sig_236) then 
            ap_sig_cseq_ST_st66_fsm_65 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st66_fsm_65 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st67_fsm_66_assign_proc : process(ap_sig_708)
    begin
        if (ap_sig_708) then 
            ap_sig_cseq_ST_st67_fsm_66 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st67_fsm_66 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_553)
    begin
        if (ap_sig_553) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_560)
    begin
        if (ap_sig_560) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_603)
    begin
        if (ap_sig_603) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_618)
    begin
        if (ap_sig_618) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    bias_load_phi_i_fu_796_p3 <= 
        ap_const_lv32_3E759240 when (tmp_19_fu_792_p1(0) = '1') else 
        ap_const_lv32_BE833E74;
    biased_1_fu_602_p3 <= 
        reg_475 when (tmp_4_fu_596_p2(0) = '1') else 
        ap_const_lv32_0;
    biased_2_to_int_fu_692_p1 <= reg_475;
    biased_3_fu_734_p3 <= 
        reg_475 when (tmp_18_fu_728_p2(0) = '1') else 
        ap_const_lv32_0;
    biased_to_int_fu_560_p1 <= reg_475;
    exitcond1_fu_511_p2 <= "1" when (n_i_reg_275 = ap_const_lv7_78) else "0";
    exitcond2_fu_610_p2 <= "1" when (n_i1_reg_322 = ap_const_lv7_54) else "0";
    exitcond3_fu_527_p2 <= "1" when (m_i_reg_311 = ap_const_lv9_190) else "0";
    exitcond4_fu_748_p2 <= "1" when (n_i2_reg_357 = ap_const_lv2_2) else "0";
    exitcond5_fu_656_p2 <= "1" when (m_i5_reg_346 = ap_const_lv7_78) else "0";
    exitcond6_fu_764_p2 <= "1" when (m_i1_reg_393 = ap_const_lv7_54) else "0";
    exitcond_fu_487_p2 <= "1" when (i_reg_264 = ap_const_lv13_1260) else "0";
    fc1_bias_address0 <= tmp_15_i_fu_555_p1(7 - 1 downto 0);

    fc1_bias_ce0_assign_proc : process(ap_sig_cseq_ST_st13_fsm_12)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            fc1_bias_ce0 <= ap_const_logic_1;
        else 
            fc1_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fc1_weight_address0 <= tmp_13_i_fu_550_p1(16 - 1 downto 0);

    fc1_weight_ce0_assign_proc : process(ap_sig_cseq_ST_st13_fsm_12)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            fc1_weight_ce0 <= ap_const_logic_1;
        else 
            fc1_weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fc2_bias_address0 <= tmp_16_i1_fu_687_p1(7 - 1 downto 0);

    fc2_bias_ce0_assign_proc : process(ap_sig_cseq_ST_st32_fsm_31)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31)) then 
            fc2_bias_ce0 <= ap_const_logic_1;
        else 
            fc2_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fc2_weight_address0 <= tmp_14_i1_fu_682_p1(14 - 1 downto 0);

    fc2_weight_ce0_assign_proc : process(ap_sig_cseq_ST_st32_fsm_31)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31)) then 
            fc2_weight_ce0 <= ap_const_logic_1;
        else 
            fc2_weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fc3_weight_address0 <= tmp_14_i2_fu_787_p1(8 - 1 downto 0);

    fc3_weight_ce0_assign_proc : process(ap_sig_cseq_ST_st51_fsm_50)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50)) then 
            fc3_weight_ce0 <= ap_const_logic_1;
        else 
            fc3_weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_dut_conv1_1_fu_412_ap_start <= ap_reg_grp_dut_conv1_1_fu_412_ap_start;
    grp_dut_conv1_fu_404_ap_start <= ap_reg_grp_dut_conv1_fu_404_ap_start;

    grp_dut_max_pool_fu_421_I_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st9_fsm_8)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            grp_dut_max_pool_fu_421_I <= ap_const_lv6_A;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            grp_dut_max_pool_fu_421_I <= ap_const_lv6_1C;
        else 
            grp_dut_max_pool_fu_421_I <= "XXXXXX";
        end if; 
    end process;

    grp_dut_max_pool_fu_421_ap_start <= ap_reg_grp_dut_max_pool_fu_421_ap_start;
    grp_dut_reshape_fu_430_ap_start <= ap_reg_grp_dut_reshape_fu_430_ap_start;

    grp_fu_436_p0_assign_proc : process(ap_sig_cseq_ST_st51_fsm_50, sum_i_reg_299, sum_i4_reg_334, sum_i1_phi_fu_385_p4, sum_i1_reg_381, ap_sig_cseq_ST_st18_fsm_17, ap_sig_cseq_ST_st24_fsm_23, ap_sig_cseq_ST_st37_fsm_36, ap_sig_cseq_ST_st43_fsm_42, ap_sig_cseq_ST_st56_fsm_55)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_55)) then 
            grp_fu_436_p0 <= sum_i1_reg_381;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50)) then 
            grp_fu_436_p0 <= sum_i1_phi_fu_385_p4;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36) or (ap_const_logic_1 = ap_sig_cseq_ST_st43_fsm_42))) then 
            grp_fu_436_p0 <= sum_i4_reg_334;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17) or (ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23))) then 
            grp_fu_436_p0 <= sum_i_reg_299;
        else 
            grp_fu_436_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_436_p1_assign_proc : process(reg_463, fc1_bias_load_reg_960, fc2_bias_load_reg_1016, ap_sig_cseq_ST_st51_fsm_50, bias_load_phi_i_fu_796_p3, ap_sig_cseq_ST_st18_fsm_17, ap_sig_cseq_ST_st24_fsm_23, ap_sig_cseq_ST_st37_fsm_36, ap_sig_cseq_ST_st43_fsm_42, ap_sig_cseq_ST_st56_fsm_55)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50)) then 
            grp_fu_436_p1 <= bias_load_phi_i_fu_796_p3;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st43_fsm_42)) then 
            grp_fu_436_p1 <= fc2_bias_load_reg_1016;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
            grp_fu_436_p1 <= fc1_bias_load_reg_960;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17) or (ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36) or (ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_55))) then 
            grp_fu_436_p1 <= reg_463;
        else 
            grp_fu_436_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_444_p0_assign_proc : process(mem_conv1_q0, ap_sig_cseq_ST_st14_fsm_13, ap_sig_cseq_ST_st52_fsm_51, mem_conv2_q0, ap_sig_cseq_ST_st33_fsm_32)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then 
            grp_fu_444_p0 <= mem_conv2_q0;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) or (ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51))) then 
            grp_fu_444_p0 <= mem_conv1_q0;
        else 
            grp_fu_444_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_444_p1_assign_proc : process(fc1_weight_q0, fc2_weight_q0, fc3_weight_q0, ap_sig_cseq_ST_st14_fsm_13, ap_sig_cseq_ST_st52_fsm_51, ap_sig_cseq_ST_st33_fsm_32)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51)) then 
            grp_fu_444_p1 <= fc3_weight_q0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then 
            grp_fu_444_p1 <= fc2_weight_q0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            grp_fu_444_p1 <= fc1_weight_q0;
        else 
            grp_fu_444_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_453_opcode_assign_proc : process(ap_sig_cseq_ST_st29_fsm_28, ap_sig_cseq_ST_st48_fsm_47, ap_sig_cseq_ST_st67_fsm_66)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st67_fsm_66)) then 
            grp_fu_453_opcode <= ap_const_lv5_4;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28) or (ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_47))) then 
            grp_fu_453_opcode <= ap_const_lv5_2;
        else 
            grp_fu_453_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_453_p0_assign_proc : process(reg_475, reg_481, ap_sig_cseq_ST_st29_fsm_28, ap_sig_cseq_ST_st48_fsm_47, ap_sig_cseq_ST_st67_fsm_66)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st67_fsm_66)) then 
            grp_fu_453_p0 <= reg_481;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28) or (ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_47))) then 
            grp_fu_453_p0 <= reg_475;
        else 
            grp_fu_453_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_453_p1_assign_proc : process(ap_sig_cseq_ST_st29_fsm_28, ap_sig_cseq_ST_st48_fsm_47, mem_conv2_load_1_reg_1072, ap_sig_cseq_ST_st67_fsm_66)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st67_fsm_66)) then 
            grp_fu_453_p1 <= mem_conv2_load_1_reg_1072;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28) or (ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_47))) then 
            grp_fu_453_p1 <= ap_const_lv32_0;
        else 
            grp_fu_453_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_1_fu_493_p2 <= std_logic_vector(unsigned(i_reg_264) + unsigned(ap_const_lv13_1));
    input_r_address0 <= grp_dut_conv1_1_fu_412_input_r_address0;
    input_r_ce0 <= grp_dut_conv1_1_fu_412_input_r_ce0;
    m_1_fu_662_p2 <= std_logic_vector(unsigned(m_i5_reg_346) + unsigned(ap_const_lv7_1));
    m_2_fu_770_p2 <= std_logic_vector(unsigned(m_i1_reg_393) + unsigned(ap_const_lv7_1));
    m_fu_533_p2 <= std_logic_vector(unsigned(m_i_reg_311) + unsigned(ap_const_lv9_1));
    m_i1_cast_fu_760_p1 <= std_logic_vector(resize(unsigned(m_i1_reg_393),8));
    m_i5_cast5_fu_652_p1 <= std_logic_vector(resize(unsigned(m_i5_reg_346),15));
    m_i_cast_fu_523_p1 <= std_logic_vector(resize(unsigned(m_i_reg_311),16));

    mem_conv1_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st13_fsm_12, tmp_16_i1_reg_1001, ap_sig_cseq_ST_st51_fsm_50, grp_dut_conv1_fu_404_output_r_address0, grp_dut_conv1_1_fu_412_output_r_address0, grp_dut_max_pool_fu_421_input_r_address0, grp_dut_reshape_fu_430_output_r_address0, exitcond_fu_487_p2, ap_sig_cseq_ST_st49_fsm_48, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st9_fsm_8, tmp_s_fu_499_p1, tmp_12_i_fu_545_p1, tmp_13_i1_fu_782_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st49_fsm_48)) then 
            mem_conv1_address0 <= tmp_16_i1_reg_1001(13 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond_fu_487_p2))) then 
            mem_conv1_address0 <= tmp_s_fu_499_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50)) then 
            mem_conv1_address0 <= tmp_13_i1_fu_782_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            mem_conv1_address0 <= tmp_12_i_fu_545_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            mem_conv1_address0 <= grp_dut_reshape_fu_430_output_r_address0;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            mem_conv1_address0 <= grp_dut_max_pool_fu_421_input_r_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            mem_conv1_address0 <= grp_dut_conv1_1_fu_412_output_r_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            mem_conv1_address0 <= grp_dut_conv1_fu_404_output_r_address0;
        else 
            mem_conv1_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    mem_conv1_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st51_fsm_50, grp_dut_conv1_fu_404_output_r_ce0, grp_dut_conv1_1_fu_412_output_r_ce0, grp_dut_max_pool_fu_421_input_r_ce0, grp_dut_reshape_fu_430_output_r_ce0, exitcond_fu_487_p2, ap_sig_cseq_ST_st49_fsm_48, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st9_fsm_8)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) or (ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond_fu_487_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st49_fsm_48))) then 
            mem_conv1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            mem_conv1_ce0 <= grp_dut_reshape_fu_430_output_r_ce0;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            mem_conv1_ce0 <= grp_dut_max_pool_fu_421_input_r_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            mem_conv1_ce0 <= grp_dut_conv1_1_fu_412_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            mem_conv1_ce0 <= grp_dut_conv1_fu_404_output_r_ce0;
        else 
            mem_conv1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mem_conv1_d0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st11_fsm_10, biased_3_reg_1021, grp_dut_conv1_fu_404_output_r_d0, grp_dut_conv1_1_fu_412_output_r_d0, grp_dut_reshape_fu_430_output_r_d0, exitcond_fu_487_p2, ap_sig_cseq_ST_st49_fsm_48, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st49_fsm_48)) then 
            mem_conv1_d0 <= biased_3_reg_1021;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond_fu_487_p2))) then 
            mem_conv1_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            mem_conv1_d0 <= grp_dut_reshape_fu_430_output_r_d0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            mem_conv1_d0 <= grp_dut_conv1_1_fu_412_output_r_d0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            mem_conv1_d0 <= grp_dut_conv1_fu_404_output_r_d0;
        else 
            mem_conv1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    mem_conv1_we0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st11_fsm_10, grp_dut_conv1_fu_404_output_r_we0, grp_dut_conv1_1_fu_412_output_r_we0, grp_dut_reshape_fu_430_output_r_we0, exitcond_fu_487_p2, ap_sig_cseq_ST_st49_fsm_48, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond_fu_487_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st49_fsm_48))) then 
            mem_conv1_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            mem_conv1_we0 <= grp_dut_reshape_fu_430_output_r_we0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            mem_conv1_we0 <= grp_dut_conv1_1_fu_412_output_r_we0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            mem_conv1_we0 <= grp_dut_conv1_fu_404_output_r_we0;
        else 
            mem_conv1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    mem_conv2_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st11_fsm_10, tmp_15_i_reg_945, ap_sig_cseq_ST_st32_fsm_31, ap_sig_cseq_ST_st50_fsm_49, grp_dut_conv1_fu_404_input_r_address0, grp_dut_max_pool_fu_421_output_r_address0, grp_dut_reshape_fu_430_input_r_address0, ap_sig_cseq_ST_st30_fsm_29, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st9_fsm_8, tmp_s_fu_499_p1, tmp_13_i8_fu_677_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29)) then 
            mem_conv2_address0 <= tmp_15_i_reg_945(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            mem_conv2_address0 <= tmp_s_fu_499_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49)) then 
            mem_conv2_address0 <= ap_const_lv64_0(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31)) then 
            mem_conv2_address0 <= tmp_13_i8_fu_677_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            mem_conv2_address0 <= grp_dut_reshape_fu_430_input_r_address0;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            mem_conv2_address0 <= grp_dut_max_pool_fu_421_output_r_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            mem_conv2_address0 <= grp_dut_conv1_fu_404_input_r_address0;
        else 
            mem_conv2_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    mem_conv2_address1_assign_proc : process(ap_sig_cseq_ST_st50_fsm_49, ap_sig_cseq_ST_st65_fsm_64, tmp_16_i2_fu_805_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st65_fsm_64)) then 
            mem_conv2_address1 <= tmp_16_i2_fu_805_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49)) then 
            mem_conv2_address1 <= ap_const_lv64_1(13 - 1 downto 0);
        else 
            mem_conv2_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    mem_conv2_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st32_fsm_31, ap_sig_cseq_ST_st50_fsm_49, grp_dut_conv1_fu_404_input_r_ce0, grp_dut_max_pool_fu_421_output_r_ce0, grp_dut_reshape_fu_430_input_r_ce0, ap_sig_cseq_ST_st30_fsm_29, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st9_fsm_8)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31) or (ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49) or (ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29))) then 
            mem_conv2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            mem_conv2_ce0 <= grp_dut_reshape_fu_430_input_r_ce0;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            mem_conv2_ce0 <= grp_dut_max_pool_fu_421_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            mem_conv2_ce0 <= grp_dut_conv1_fu_404_input_r_ce0;
        else 
            mem_conv2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mem_conv2_ce1_assign_proc : process(ap_sig_cseq_ST_st50_fsm_49, ap_sig_cseq_ST_st65_fsm_64)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49) or (ap_const_logic_1 = ap_sig_cseq_ST_st65_fsm_64))) then 
            mem_conv2_ce1 <= ap_const_logic_1;
        else 
            mem_conv2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    mem_conv2_d0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, biased_1_reg_965, grp_dut_max_pool_fu_421_output_r_d0, ap_sig_cseq_ST_st30_fsm_29, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st9_fsm_8)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29)) then 
            mem_conv2_d0 <= biased_1_reg_965;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            mem_conv2_d0 <= ap_const_lv32_0;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            mem_conv2_d0 <= grp_dut_max_pool_fu_421_output_r_d0;
        else 
            mem_conv2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    mem_conv2_load_1_to_int_fu_828_p1 <= mem_conv2_load_1_reg_1072;
    mem_conv2_load_to_int_fu_810_p1 <= reg_481;

    mem_conv2_we0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, grp_dut_max_pool_fu_421_output_r_we0, exitcond_fu_487_p2, ap_sig_cseq_ST_st30_fsm_29, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st9_fsm_8)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond_fu_487_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29))) then 
            mem_conv2_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            mem_conv2_we0 <= grp_dut_max_pool_fu_421_output_r_we0;
        else 
            mem_conv2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    mem_conv2_we1_assign_proc : process(ap_sig_cseq_ST_st65_fsm_64)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st65_fsm_64))) then 
            mem_conv2_we1 <= ap_const_logic_1;
        else 
            mem_conv2_we1 <= ap_const_logic_0;
        end if; 
    end process;

    n_1_fu_616_p2 <= std_logic_vector(unsigned(n_i1_reg_322) + unsigned(ap_const_lv7_1));
    n_2_fu_754_p2 <= std_logic_vector(unsigned(n_i2_reg_357) + unsigned(ap_const_lv2_1));
    n_fu_517_p2 <= std_logic_vector(unsigned(n_i_reg_275) + unsigned(ap_const_lv7_1));
    next_mul2_fu_742_p2 <= std_logic_vector(unsigned(phi_mul1_reg_369) + unsigned(ap_const_lv8_54));
    next_mul_fu_505_p2 <= std_logic_vector(unsigned(phi_mul_reg_287) + unsigned(ap_const_lv16_190));
    notlhs1_fu_845_p2 <= "0" when (tmp_5_fu_814_p4 = ap_const_lv8_FF) else "1";
    notlhs2_fu_863_p2 <= "0" when (tmp_7_fu_831_p4 = ap_const_lv8_FF) else "1";
    notlhs3_fu_710_p2 <= "0" when (tmp_14_fu_696_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_578_p2 <= "0" when (tmp_fu_564_p4 = ap_const_lv8_FF) else "1";
    notrhs1_fu_851_p2 <= "1" when (tmp_1_fu_824_p1 = ap_const_lv23_0) else "0";
    notrhs2_fu_869_p2 <= "1" when (tmp_6_fu_841_p1 = ap_const_lv23_0) else "0";
    notrhs3_fu_716_p2 <= "1" when (tmp_15_fu_706_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_584_p2 <= "1" when (tmp_13_fu_574_p1 = ap_const_lv23_0) else "0";
    p_shl1_i_cast_fu_642_p1 <= std_logic_vector(resize(unsigned(p_shl1_i_fu_634_p3),15));
    p_shl1_i_fu_634_p3 <= (n_i1_reg_322 & ap_const_lv3_0);
    p_shl_i_cast_fu_630_p1 <= std_logic_vector(resize(unsigned(p_shl_i_fu_622_p3),15));
    p_shl_i_fu_622_p3 <= (n_i1_reg_322 & ap_const_lv7_0);
    sum_i1_phi_fu_385_p4 <= sum_i1_reg_381;
    tmp_10_fu_881_p2 <= (tmp_9_fu_857_p2 and tmp_8_fu_875_p2);
    tmp_12_fu_887_p2 <= (tmp_10_fu_881_p2 and grp_fu_453_p2);
    tmp_12_i_fu_545_p1 <= std_logic_vector(resize(unsigned(m_i_reg_311),64));
    tmp_13_fu_574_p1 <= biased_to_int_fu_560_p1(23 - 1 downto 0);
    tmp_13_i1_fu_782_p1 <= std_logic_vector(resize(unsigned(m_i1_reg_393),64));
    tmp_13_i8_fu_677_p1 <= std_logic_vector(resize(unsigned(m_i5_reg_346),64));
    tmp_13_i_fu_550_p1 <= std_logic_vector(resize(unsigned(w_index_fu_539_p2),64));
    tmp_14_fu_696_p4 <= biased_2_to_int_fu_692_p1(30 downto 23);
    tmp_14_i1_fu_682_p1 <= std_logic_vector(resize(unsigned(w_index_1_cast_fu_673_p1),64));
    tmp_14_i2_fu_787_p1 <= std_logic_vector(resize(unsigned(w_index_2_fu_776_p2),64));
    tmp_15_fu_706_p1 <= biased_2_to_int_fu_692_p1(23 - 1 downto 0);
    tmp_15_i_fu_555_p1 <= std_logic_vector(resize(unsigned(n_i_reg_275),64));
    tmp_16_fu_722_p2 <= (notrhs3_fu_716_p2 or notlhs3_fu_710_p2);
    tmp_16_i1_fu_687_p1 <= std_logic_vector(resize(unsigned(n_i1_reg_322),64));
    tmp_16_i2_fu_805_p1 <= std_logic_vector(resize(unsigned(n_i2_reg_357),64));
    tmp_18_fu_728_p2 <= (tmp_16_fu_722_p2 and grp_fu_453_p2);
    tmp_19_fu_792_p1 <= n_i2_reg_357(1 - 1 downto 0);
    tmp_1_fu_824_p1 <= mem_conv2_load_to_int_fu_810_p1(23 - 1 downto 0);
    tmp_2_fu_590_p2 <= (notrhs_fu_584_p2 or notlhs_fu_578_p2);
    tmp_4_fu_596_p2 <= (tmp_2_fu_590_p2 and grp_fu_453_p2);
    tmp_5_fu_814_p4 <= mem_conv2_load_to_int_fu_810_p1(30 downto 23);
    tmp_6_fu_841_p1 <= mem_conv2_load_1_to_int_fu_828_p1(23 - 1 downto 0);
    tmp_7_fu_831_p4 <= mem_conv2_load_1_to_int_fu_828_p1(30 downto 23);
    tmp_8_fu_875_p2 <= (notrhs2_fu_869_p2 or notlhs2_fu_863_p2);
    tmp_9_fu_857_p2 <= (notrhs1_fu_851_p2 or notlhs1_fu_845_p2);
    tmp_fu_564_p4 <= biased_to_int_fu_560_p1(30 downto 23);
    tmp_i3_fu_646_p2 <= std_logic_vector(unsigned(p_shl_i_cast_fu_630_p1) - unsigned(p_shl1_i_cast_fu_642_p1));
    tmp_s_fu_499_p1 <= std_logic_vector(resize(unsigned(i_reg_264),64));
        w_index_1_cast_fu_673_p1 <= std_logic_vector(resize(signed(w_index_1_fu_668_p2),32));

    w_index_1_fu_668_p2 <= std_logic_vector(unsigned(m_i5_cast5_fu_652_p1) + unsigned(tmp_i3_reg_978));
    w_index_2_fu_776_p2 <= std_logic_vector(unsigned(m_i1_cast_fu_760_p1) + unsigned(phi_mul1_reg_369));
    w_index_fu_539_p2 <= std_logic_vector(unsigned(m_i_cast_fu_523_p1) + unsigned(phi_mul_reg_287));
end behav;
