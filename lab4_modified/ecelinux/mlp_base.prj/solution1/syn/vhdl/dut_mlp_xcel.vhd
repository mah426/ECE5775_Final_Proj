-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_mlp_xcel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of dut_mlp_xcel is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_st37_fsm_36 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_st38_fsm_37 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_st39_fsm_38 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_st40_fsm_39 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_st41_fsm_40 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_st42_fsm_41 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_st43_fsm_42 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_st44_fsm_43 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_st45_fsm_44 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_st46_fsm_45 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_st47_fsm_46 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_st48_fsm_47 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_st49_fsm_48 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_st50_fsm_49 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_st51_fsm_50 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_st52_fsm_51 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_st53_fsm_52 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_st54_fsm_53 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_st55_fsm_54 : STD_LOGIC_VECTOR (63 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st56_fsm_55 : STD_LOGIC_VECTOR (63 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st57_fsm_56 : STD_LOGIC_VECTOR (63 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st58_fsm_57 : STD_LOGIC_VECTOR (63 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st59_fsm_58 : STD_LOGIC_VECTOR (63 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st60_fsm_59 : STD_LOGIC_VECTOR (63 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st61_fsm_60 : STD_LOGIC_VECTOR (63 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st62_fsm_61 : STD_LOGIC_VECTOR (63 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st63_fsm_62 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st64_fsm_63 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv6_6 : STD_LOGIC_VECTOR (5 downto 0) := "000110";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv7_20 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_const_lv7_E : STD_LOGIC_VECTOR (6 downto 0) := "0001110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv6_1C : STD_LOGIC_VECTOR (5 downto 0) := "011100";
    constant ap_const_lv6_A : STD_LOGIC_VECTOR (5 downto 0) := "001010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv16_190 : STD_LOGIC_VECTOR (15 downto 0) := "0000000110010000";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv9_190 : STD_LOGIC_VECTOR (8 downto 0) := "110010000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv7_54 : STD_LOGIC_VECTOR (6 downto 0) := "1010100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_54 : STD_LOGIC_VECTOR (7 downto 0) := "01010100";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_3E759240 : STD_LOGIC_VECTOR (31 downto 0) := "00111110011101011001001001000000";
    constant ap_const_lv32_BE833E74 : STD_LOGIC_VECTOR (31 downto 0) := "10111110100000110011111001110100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_81 : BOOLEAN;
    signal fc1_weight_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal fc1_weight_ce0 : STD_LOGIC;
    signal fc1_weight_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc1_bias_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal fc1_bias_ce0 : STD_LOGIC;
    signal fc1_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc2_weight_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal fc2_weight_ce0 : STD_LOGIC;
    signal fc2_weight_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc2_bias_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal fc2_bias_ce0 : STD_LOGIC;
    signal fc2_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc3_weight_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fc3_weight_ce0 : STD_LOGIC;
    signal fc3_weight_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_conv1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_135 : BOOLEAN;
    signal ap_sig_cseq_ST_st49_fsm_48 : STD_LOGIC;
    signal ap_sig_142 : BOOLEAN;
    signal grp_fu_423_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_442 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_152 : BOOLEAN;
    signal ap_sig_cseq_ST_st33_fsm_32 : STD_LOGIC;
    signal ap_sig_159 : BOOLEAN;
    signal ap_sig_cseq_ST_st52_fsm_51 : STD_LOGIC;
    signal ap_sig_167 : BOOLEAN;
    signal grp_fu_415_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st19_fsm_18 : STD_LOGIC;
    signal ap_sig_177 : BOOLEAN;
    signal ap_sig_cseq_ST_st38_fsm_37 : STD_LOGIC;
    signal ap_sig_184 : BOOLEAN;
    signal ap_sig_cseq_ST_st57_fsm_56 : STD_LOGIC;
    signal ap_sig_192 : BOOLEAN;
    signal reg_454 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st25_fsm_24 : STD_LOGIC;
    signal ap_sig_201 : BOOLEAN;
    signal ap_sig_cseq_ST_st44_fsm_43 : STD_LOGIC;
    signal ap_sig_208 : BOOLEAN;
    signal ap_sig_cseq_ST_st61_fsm_60 : STD_LOGIC;
    signal ap_sig_216 : BOOLEAN;
    signal mem_conv2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_460 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st30_fsm_29 : STD_LOGIC;
    signal ap_sig_226 : BOOLEAN;
    signal ap_sig_cseq_ST_st63_fsm_62 : STD_LOGIC;
    signal ap_sig_233 : BOOLEAN;
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_243 : BOOLEAN;
    signal grp_dut_max_pool_fu_403_ap_done : STD_LOGIC;
    signal next_mul_fu_466_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal next_mul_reg_859 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_256 : BOOLEAN;
    signal n_fu_478_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal n_reg_867 : STD_LOGIC_VECTOR (6 downto 0);
    signal m_fu_494_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal m_reg_875 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_267 : BOOLEAN;
    signal exitcond3_fu_488_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_i_fu_516_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_i_reg_890 : STD_LOGIC_VECTOR (63 downto 0);
    signal fc1_bias_load_reg_905 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st20_fsm_19 : STD_LOGIC;
    signal ap_sig_290 : BOOLEAN;
    signal biased_1_fu_563_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal biased_1_reg_910 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st26_fsm_25 : STD_LOGIC;
    signal ap_sig_299 : BOOLEAN;
    signal n_1_fu_577_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal n_1_reg_918 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st28_fsm_27 : STD_LOGIC;
    signal ap_sig_308 : BOOLEAN;
    signal tmp_i4_fu_607_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_i4_reg_923 : STD_LOGIC_VECTOR (14 downto 0);
    signal exitcond2_fu_571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_1_fu_623_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal m_1_reg_931 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st29_fsm_28 : STD_LOGIC;
    signal ap_sig_322 : BOOLEAN;
    signal exitcond5_fu_617_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_i1_fu_648_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_i1_reg_946 : STD_LOGIC_VECTOR (63 downto 0);
    signal fc2_bias_load_reg_961 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st39_fsm_38 : STD_LOGIC;
    signal ap_sig_344 : BOOLEAN;
    signal biased_3_fu_695_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal biased_3_reg_966 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st45_fsm_44 : STD_LOGIC;
    signal ap_sig_353 : BOOLEAN;
    signal next_mul2_fu_703_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal next_mul2_reg_971 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st47_fsm_46 : STD_LOGIC;
    signal ap_sig_362 : BOOLEAN;
    signal n_2_fu_715_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_2_reg_979 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond4_fu_709_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_2_fu_731_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal m_2_reg_992 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st48_fsm_47 : STD_LOGIC;
    signal ap_sig_379 : BOOLEAN;
    signal exitcond_fu_725_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bias_load_phi_i_fu_757_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_conv2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_conv2_load_1_reg_1017 : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_conv1_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal mem_conv1_ce0 : STD_LOGIC;
    signal mem_conv1_we0 : STD_LOGIC;
    signal mem_conv1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_conv2_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal mem_conv2_ce0 : STD_LOGIC;
    signal mem_conv2_we0 : STD_LOGIC;
    signal mem_conv2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_conv2_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal mem_conv2_ce1 : STD_LOGIC;
    signal mem_conv2_we1 : STD_LOGIC;
    signal grp_dut_conv1_fu_379_ap_start : STD_LOGIC;
    signal grp_dut_conv1_fu_379_ap_done : STD_LOGIC;
    signal grp_dut_conv1_fu_379_ap_idle : STD_LOGIC;
    signal grp_dut_conv1_fu_379_ap_ready : STD_LOGIC;
    signal grp_dut_conv1_fu_379_input_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_dut_conv1_fu_379_input_r_ce0 : STD_LOGIC;
    signal grp_dut_conv1_fu_379_input_r_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_conv1_fu_379_output_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_dut_conv1_fu_379_output_r_ce0 : STD_LOGIC;
    signal grp_dut_conv1_fu_379_output_r_we0 : STD_LOGIC;
    signal grp_dut_conv1_fu_379_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_conv1_fu_379_M : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dut_conv1_fu_379_N : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_dut_conv1_fu_379_I : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_dut_conv1_fu_379_L : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dut_max_pool_fu_403_ap_start : STD_LOGIC;
    signal grp_dut_max_pool_fu_403_ap_idle : STD_LOGIC;
    signal grp_dut_max_pool_fu_403_ap_ready : STD_LOGIC;
    signal grp_dut_max_pool_fu_403_input_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_dut_max_pool_fu_403_input_r_ce0 : STD_LOGIC;
    signal grp_dut_max_pool_fu_403_output_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_dut_max_pool_fu_403_output_r_ce0 : STD_LOGIC;
    signal grp_dut_max_pool_fu_403_output_r_we0 : STD_LOGIC;
    signal grp_dut_max_pool_fu_403_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_max_pool_fu_403_M : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_dut_max_pool_fu_403_I : STD_LOGIC_VECTOR (5 downto 0);
    signal n_i_reg_250 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st27_fsm_26 : STD_LOGIC;
    signal ap_sig_456 : BOOLEAN;
    signal phi_mul_reg_262 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_i_reg_274 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_i_reg_286 : STD_LOGIC_VECTOR (8 downto 0);
    signal n_i2_reg_297 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st46_fsm_45 : STD_LOGIC;
    signal ap_sig_476 : BOOLEAN;
    signal sum_i5_reg_309 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_i6_reg_321 : STD_LOGIC_VECTOR (6 downto 0);
    signal n_i1_reg_332 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st62_fsm_61 : STD_LOGIC;
    signal ap_sig_491 : BOOLEAN;
    signal phi_mul1_reg_344 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_i1_phi_fu_360_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_i1_reg_356 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_i1_reg_368 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_grp_dut_conv1_fu_379_ap_start : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_514 : BOOLEAN;
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_522 : BOOLEAN;
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_529 : BOOLEAN;
    signal ap_reg_grp_dut_max_pool_fu_403_ap_start : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_561 : BOOLEAN;
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_568 : BOOLEAN;
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_576 : BOOLEAN;
    signal tmp_12_i_fu_506_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_i_fu_511_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_i9_fu_638_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_i1_fu_643_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_i1_fu_743_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_i2_fu_748_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_i2_fu_766_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_415_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_415_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_608 : BOOLEAN;
    signal ap_sig_cseq_ST_st21_fsm_20 : STD_LOGIC;
    signal ap_sig_615 : BOOLEAN;
    signal ap_sig_cseq_ST_st34_fsm_33 : STD_LOGIC;
    signal ap_sig_623 : BOOLEAN;
    signal ap_sig_cseq_ST_st40_fsm_39 : STD_LOGIC;
    signal ap_sig_630 : BOOLEAN;
    signal ap_sig_cseq_ST_st53_fsm_52 : STD_LOGIC;
    signal ap_sig_638 : BOOLEAN;
    signal grp_fu_423_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_423_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_432_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_432_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st64_fsm_63 : STD_LOGIC;
    signal ap_sig_652 : BOOLEAN;
    signal m_i_cast_fu_484_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal w_index_fu_500_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal biased_to_int_fu_521_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_525_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_535_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_539_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_557_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl_i_fu_583_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl1_i_fu_595_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_i_cast_fu_591_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl1_i_cast_fu_603_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal m_i6_cast5_fu_613_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal w_index_1_fu_629_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal w_index_1_cast_fu_634_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal biased_2_to_int_fu_653_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_657_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_667_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs3_fu_677_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs3_fu_671_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_683_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_689_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_i1_cast_fu_721_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal w_index_2_fu_737_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_753_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_conv2_load_to_int_fu_771_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_conv2_load_1_to_int_fu_789_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_775_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_785_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs1_fu_812_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_fu_806_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_792_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_802_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs2_fu_830_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs2_fu_824_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_818_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_836_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_842_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_432_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (63 downto 0);

    component dut_conv1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        M : IN STD_LOGIC_VECTOR (3 downto 0);
        N : IN STD_LOGIC_VECTOR (5 downto 0);
        I : IN STD_LOGIC_VECTOR (6 downto 0);
        L : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component dut_max_pool IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        M : IN STD_LOGIC_VECTOR (5 downto 0);
        I : IN STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component dut_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_fcmp_32ns_32ns_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component dut_mlp_xcel_fc1_weight IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_mlp_xcel_fc1_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_mlp_xcel_fc2_weight IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_mlp_xcel_fc2_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_mlp_xcel_fc3_weight IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_mlp_xcel_mem_conv1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_mlp_xcel_mem_conv2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    fc1_weight_U : component dut_mlp_xcel_fc1_weight
    generic map (
        DataWidth => 32,
        AddressRange => 48000,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc1_weight_address0,
        ce0 => fc1_weight_ce0,
        q0 => fc1_weight_q0);

    fc1_bias_U : component dut_mlp_xcel_fc1_bias
    generic map (
        DataWidth => 32,
        AddressRange => 120,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc1_bias_address0,
        ce0 => fc1_bias_ce0,
        q0 => fc1_bias_q0);

    fc2_weight_U : component dut_mlp_xcel_fc2_weight
    generic map (
        DataWidth => 32,
        AddressRange => 10080,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc2_weight_address0,
        ce0 => fc2_weight_ce0,
        q0 => fc2_weight_q0);

    fc2_bias_U : component dut_mlp_xcel_fc2_bias
    generic map (
        DataWidth => 32,
        AddressRange => 84,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc2_bias_address0,
        ce0 => fc2_bias_ce0,
        q0 => fc2_bias_q0);

    fc3_weight_U : component dut_mlp_xcel_fc3_weight
    generic map (
        DataWidth => 32,
        AddressRange => 168,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc3_weight_address0,
        ce0 => fc3_weight_ce0,
        q0 => fc3_weight_q0);

    mem_conv1_U : component dut_mlp_xcel_mem_conv1
    generic map (
        DataWidth => 32,
        AddressRange => 4704,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mem_conv1_address0,
        ce0 => mem_conv1_ce0,
        we0 => mem_conv1_we0,
        d0 => mem_conv1_d0,
        q0 => mem_conv1_q0);

    mem_conv2_U : component dut_mlp_xcel_mem_conv2
    generic map (
        DataWidth => 32,
        AddressRange => 4704,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mem_conv2_address0,
        ce0 => mem_conv2_ce0,
        we0 => mem_conv2_we0,
        d0 => mem_conv2_d0,
        q0 => mem_conv2_q0,
        address1 => mem_conv2_address1,
        ce1 => mem_conv2_ce1,
        we1 => mem_conv2_we1,
        d1 => reg_454,
        q1 => mem_conv2_q1);

    grp_dut_conv1_fu_379 : component dut_conv1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dut_conv1_fu_379_ap_start,
        ap_done => grp_dut_conv1_fu_379_ap_done,
        ap_idle => grp_dut_conv1_fu_379_ap_idle,
        ap_ready => grp_dut_conv1_fu_379_ap_ready,
        input_r_address0 => grp_dut_conv1_fu_379_input_r_address0,
        input_r_ce0 => grp_dut_conv1_fu_379_input_r_ce0,
        input_r_q0 => grp_dut_conv1_fu_379_input_r_q0,
        output_r_address0 => grp_dut_conv1_fu_379_output_r_address0,
        output_r_ce0 => grp_dut_conv1_fu_379_output_r_ce0,
        output_r_we0 => grp_dut_conv1_fu_379_output_r_we0,
        output_r_d0 => grp_dut_conv1_fu_379_output_r_d0,
        M => grp_dut_conv1_fu_379_M,
        N => grp_dut_conv1_fu_379_N,
        I => grp_dut_conv1_fu_379_I,
        L => grp_dut_conv1_fu_379_L);

    grp_dut_max_pool_fu_403 : component dut_max_pool
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dut_max_pool_fu_403_ap_start,
        ap_done => grp_dut_max_pool_fu_403_ap_done,
        ap_idle => grp_dut_max_pool_fu_403_ap_idle,
        ap_ready => grp_dut_max_pool_fu_403_ap_ready,
        input_r_address0 => grp_dut_max_pool_fu_403_input_r_address0,
        input_r_ce0 => grp_dut_max_pool_fu_403_input_r_ce0,
        input_r_q0 => mem_conv2_q0,
        output_r_address0 => grp_dut_max_pool_fu_403_output_r_address0,
        output_r_ce0 => grp_dut_max_pool_fu_403_output_r_ce0,
        output_r_we0 => grp_dut_max_pool_fu_403_output_r_we0,
        output_r_d0 => grp_dut_max_pool_fu_403_output_r_d0,
        M => grp_dut_max_pool_fu_403_M,
        I => grp_dut_max_pool_fu_403_I);

    dut_fadd_32ns_32ns_32_5_full_dsp_U16 : component dut_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_415_p0,
        din1 => grp_fu_415_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_415_p2);

    dut_fmul_32ns_32ns_32_4_max_dsp_U17 : component dut_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_423_p0,
        din1 => grp_fu_423_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_423_p2);

    dut_fcmp_32ns_32ns_1_1_U18 : component dut_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_432_p0,
        din1 => grp_fu_432_p1,
        opcode => grp_fu_432_opcode,
        dout => grp_fu_432_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_dut_conv1_fu_379_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_dut_conv1_fu_379_ap_start <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
                    ap_reg_grp_dut_conv1_fu_379_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_dut_conv1_fu_379_ap_ready)) then 
                    ap_reg_grp_dut_conv1_fu_379_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_dut_max_pool_fu_403_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_dut_max_pool_fu_403_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then 
                    ap_reg_grp_dut_max_pool_fu_403_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_dut_max_pool_fu_403_ap_ready)) then 
                    ap_reg_grp_dut_max_pool_fu_403_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    m_i1_reg_368_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st57_fsm_56)) then 
                m_i1_reg_368 <= m_2_reg_992;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st47_fsm_46) and (ap_const_lv1_0 = exitcond4_fu_709_p2))) then 
                m_i1_reg_368 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    m_i6_reg_321_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37)) then 
                m_i6_reg_321 <= m_1_reg_931;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27) and (ap_const_lv1_0 = exitcond2_fu_571_p2))) then 
                m_i6_reg_321 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    m_i_reg_286_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18)) then 
                m_i_reg_286 <= m_reg_875;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and (ap_const_lv1_0 = exitcond1_fu_472_p2))) then 
                m_i_reg_286 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    n_i1_reg_332_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27) and not((ap_const_lv1_0 = exitcond2_fu_571_p2)))) then 
                n_i1_reg_332 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st62_fsm_61)) then 
                n_i1_reg_332 <= n_2_reg_979;
            end if; 
        end if;
    end process;

    n_i2_reg_297_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and not((ap_const_lv1_0 = exitcond1_fu_472_p2)))) then 
                n_i2_reg_297 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st46_fsm_45)) then 
                n_i2_reg_297 <= n_1_reg_918;
            end if; 
        end if;
    end process;

    n_i_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26)) then 
                n_i_reg_250 <= n_reg_867;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((ap_const_logic_0 = grp_dut_max_pool_fu_403_ap_done)))) then 
                n_i_reg_250 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    phi_mul1_reg_344_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27) and not((ap_const_lv1_0 = exitcond2_fu_571_p2)))) then 
                phi_mul1_reg_344 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st62_fsm_61)) then 
                phi_mul1_reg_344 <= next_mul2_reg_971;
            end if; 
        end if;
    end process;

    phi_mul_reg_262_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26)) then 
                phi_mul_reg_262 <= next_mul_reg_859;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((ap_const_logic_0 = grp_dut_max_pool_fu_403_ap_done)))) then 
                phi_mul_reg_262 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    sum_i1_reg_356_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st57_fsm_56)) then 
                sum_i1_reg_356 <= grp_fu_415_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st47_fsm_46) and (ap_const_lv1_0 = exitcond4_fu_709_p2))) then 
                sum_i1_reg_356 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sum_i5_reg_309_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37)) then 
                sum_i5_reg_309 <= grp_fu_415_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27) and (ap_const_lv1_0 = exitcond2_fu_571_p2))) then 
                sum_i5_reg_309 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sum_i_reg_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18)) then 
                sum_i_reg_274 <= grp_fu_415_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and (ap_const_lv1_0 = exitcond1_fu_472_p2))) then 
                sum_i_reg_274 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25)) then
                biased_1_reg_910 <= biased_1_fu_563_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st45_fsm_44)) then
                biased_3_reg_966 <= biased_3_fu_695_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then
                fc1_bias_load_reg_905 <= fc1_bias_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38)) then
                fc2_bias_load_reg_961 <= fc2_bias_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)) then
                m_1_reg_931 <= m_1_fu_623_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_47)) then
                m_2_reg_992 <= m_2_fu_731_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then
                m_reg_875 <= m_fu_494_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st63_fsm_62)) then
                mem_conv2_load_1_reg_1017 <= mem_conv2_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27)) then
                n_1_reg_918 <= n_1_fu_577_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st47_fsm_46)) then
                n_2_reg_979 <= n_2_fu_715_p2;
                next_mul2_reg_971 <= next_mul2_fu_703_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then
                n_reg_867 <= n_fu_478_p2;
                next_mul_reg_859 <= next_mul_fu_466_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) or (ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32) or (ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51))) then
                reg_442 <= grp_fu_423_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) or (ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_43) or (ap_const_logic_1 = ap_sig_cseq_ST_st61_fsm_60))) then
                reg_454 <= grp_fu_415_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29) or (ap_const_logic_1 = ap_sig_cseq_ST_st63_fsm_62))) then
                reg_460 <= mem_conv2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28) and not((ap_const_lv1_0 = exitcond5_fu_617_p2)))) then
                    tmp_15_i1_reg_946(6 downto 0) <= tmp_15_i1_fu_648_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and not((exitcond3_fu_488_p2 = ap_const_lv1_0)))) then
                    tmp_15_i_reg_890(6 downto 0) <= tmp_15_i_fu_516_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27) and (ap_const_lv1_0 = exitcond2_fu_571_p2))) then
                    tmp_i4_reg_923(14 downto 3) <= tmp_i4_fu_607_p2(14 downto 3);
            end if;
        end if;
    end process;
    tmp_15_i_reg_890(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    tmp_i4_reg_923(2 downto 0) <= "000";
    tmp_15_i1_reg_946(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, grp_dut_max_pool_fu_403_ap_done, exitcond3_fu_488_p2, exitcond2_fu_571_p2, exitcond5_fu_617_p2, exitcond4_fu_709_p2, exitcond_fu_725_p2, grp_dut_conv1_fu_379_ap_done, exitcond1_fu_472_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_logic_0 = grp_dut_conv1_fu_379_ap_done))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                if (not((ap_const_logic_0 = grp_dut_max_pool_fu_403_ap_done))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                if (not((ap_const_logic_0 = grp_dut_conv1_fu_379_ap_done))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                if (not((ap_const_logic_0 = grp_dut_max_pool_fu_403_ap_done))) then
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                end if;
            when ap_ST_st9_fsm_8 => 
                if ((ap_const_lv1_0 = exitcond1_fu_472_p2)) then
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                else
                    ap_NS_fsm <= ap_ST_st28_fsm_27;
                end if;
            when ap_ST_st10_fsm_9 => 
                if (not((exitcond3_fu_488_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st20_fsm_19;
                else
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                end if;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st28_fsm_27 => 
                if ((ap_const_lv1_0 = exitcond2_fu_571_p2)) then
                    ap_NS_fsm <= ap_ST_st29_fsm_28;
                else
                    ap_NS_fsm <= ap_ST_st47_fsm_46;
                end if;
            when ap_ST_st29_fsm_28 => 
                if (not((ap_const_lv1_0 = exitcond5_fu_617_p2))) then
                    ap_NS_fsm <= ap_ST_st39_fsm_38;
                else
                    ap_NS_fsm <= ap_ST_st30_fsm_29;
                end if;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st33_fsm_32 => 
                ap_NS_fsm <= ap_ST_st34_fsm_33;
            when ap_ST_st34_fsm_33 => 
                ap_NS_fsm <= ap_ST_st35_fsm_34;
            when ap_ST_st35_fsm_34 => 
                ap_NS_fsm <= ap_ST_st36_fsm_35;
            when ap_ST_st36_fsm_35 => 
                ap_NS_fsm <= ap_ST_st37_fsm_36;
            when ap_ST_st37_fsm_36 => 
                ap_NS_fsm <= ap_ST_st38_fsm_37;
            when ap_ST_st38_fsm_37 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st39_fsm_38 => 
                ap_NS_fsm <= ap_ST_st40_fsm_39;
            when ap_ST_st40_fsm_39 => 
                ap_NS_fsm <= ap_ST_st41_fsm_40;
            when ap_ST_st41_fsm_40 => 
                ap_NS_fsm <= ap_ST_st42_fsm_41;
            when ap_ST_st42_fsm_41 => 
                ap_NS_fsm <= ap_ST_st43_fsm_42;
            when ap_ST_st43_fsm_42 => 
                ap_NS_fsm <= ap_ST_st44_fsm_43;
            when ap_ST_st44_fsm_43 => 
                ap_NS_fsm <= ap_ST_st45_fsm_44;
            when ap_ST_st45_fsm_44 => 
                ap_NS_fsm <= ap_ST_st46_fsm_45;
            when ap_ST_st46_fsm_45 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st47_fsm_46 => 
                if ((ap_const_lv1_0 = exitcond4_fu_709_p2)) then
                    ap_NS_fsm <= ap_ST_st48_fsm_47;
                else
                    ap_NS_fsm <= ap_ST_st63_fsm_62;
                end if;
            when ap_ST_st48_fsm_47 => 
                if (not((ap_const_lv1_0 = exitcond_fu_725_p2))) then
                    ap_NS_fsm <= ap_ST_st58_fsm_57;
                else
                    ap_NS_fsm <= ap_ST_st49_fsm_48;
                end if;
            when ap_ST_st49_fsm_48 => 
                ap_NS_fsm <= ap_ST_st50_fsm_49;
            when ap_ST_st50_fsm_49 => 
                ap_NS_fsm <= ap_ST_st51_fsm_50;
            when ap_ST_st51_fsm_50 => 
                ap_NS_fsm <= ap_ST_st52_fsm_51;
            when ap_ST_st52_fsm_51 => 
                ap_NS_fsm <= ap_ST_st53_fsm_52;
            when ap_ST_st53_fsm_52 => 
                ap_NS_fsm <= ap_ST_st54_fsm_53;
            when ap_ST_st54_fsm_53 => 
                ap_NS_fsm <= ap_ST_st55_fsm_54;
            when ap_ST_st55_fsm_54 => 
                ap_NS_fsm <= ap_ST_st56_fsm_55;
            when ap_ST_st56_fsm_55 => 
                ap_NS_fsm <= ap_ST_st57_fsm_56;
            when ap_ST_st57_fsm_56 => 
                ap_NS_fsm <= ap_ST_st48_fsm_47;
            when ap_ST_st58_fsm_57 => 
                ap_NS_fsm <= ap_ST_st59_fsm_58;
            when ap_ST_st59_fsm_58 => 
                ap_NS_fsm <= ap_ST_st60_fsm_59;
            when ap_ST_st60_fsm_59 => 
                ap_NS_fsm <= ap_ST_st61_fsm_60;
            when ap_ST_st61_fsm_60 => 
                ap_NS_fsm <= ap_ST_st62_fsm_61;
            when ap_ST_st62_fsm_61 => 
                ap_NS_fsm <= ap_ST_st47_fsm_46;
            when ap_ST_st63_fsm_62 => 
                ap_NS_fsm <= ap_ST_st64_fsm_63;
            when ap_ST_st64_fsm_63 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st64_fsm_63)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st64_fsm_63))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st64_fsm_63)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st64_fsm_63)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= (tmp_8_fu_842_p2 and grp_fu_432_p2);

    ap_sig_135_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_135 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    ap_sig_142_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_142 <= (ap_const_lv1_1 = ap_CS_fsm(48 downto 48));
    end process;


    ap_sig_152_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_152 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    ap_sig_159_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_159 <= (ap_const_lv1_1 = ap_CS_fsm(32 downto 32));
    end process;


    ap_sig_167_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_167 <= (ap_const_lv1_1 = ap_CS_fsm(51 downto 51));
    end process;


    ap_sig_177_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_177 <= (ap_const_lv1_1 = ap_CS_fsm(18 downto 18));
    end process;


    ap_sig_184_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_184 <= (ap_const_lv1_1 = ap_CS_fsm(37 downto 37));
    end process;


    ap_sig_192_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_192 <= (ap_const_lv1_1 = ap_CS_fsm(56 downto 56));
    end process;


    ap_sig_201_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_201 <= (ap_const_lv1_1 = ap_CS_fsm(24 downto 24));
    end process;


    ap_sig_208_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_208 <= (ap_const_lv1_1 = ap_CS_fsm(43 downto 43));
    end process;


    ap_sig_216_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_216 <= (ap_const_lv1_1 = ap_CS_fsm(60 downto 60));
    end process;


    ap_sig_226_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_226 <= (ap_const_lv1_1 = ap_CS_fsm(29 downto 29));
    end process;


    ap_sig_233_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_233 <= (ap_const_lv1_1 = ap_CS_fsm(62 downto 62));
    end process;


    ap_sig_243_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_243 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    ap_sig_256_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_256 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    ap_sig_267_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_267 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    ap_sig_290_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_290 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    ap_sig_299_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_299 <= (ap_const_lv1_1 = ap_CS_fsm(25 downto 25));
    end process;


    ap_sig_308_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_308 <= (ap_const_lv1_1 = ap_CS_fsm(27 downto 27));
    end process;


    ap_sig_322_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_322 <= (ap_const_lv1_1 = ap_CS_fsm(28 downto 28));
    end process;


    ap_sig_344_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_344 <= (ap_const_lv1_1 = ap_CS_fsm(38 downto 38));
    end process;


    ap_sig_353_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_353 <= (ap_const_lv1_1 = ap_CS_fsm(44 downto 44));
    end process;


    ap_sig_362_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_362 <= (ap_const_lv1_1 = ap_CS_fsm(46 downto 46));
    end process;


    ap_sig_379_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_379 <= (ap_const_lv1_1 = ap_CS_fsm(47 downto 47));
    end process;


    ap_sig_456_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_456 <= (ap_const_lv1_1 = ap_CS_fsm(26 downto 26));
    end process;


    ap_sig_476_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_476 <= (ap_const_lv1_1 = ap_CS_fsm(45 downto 45));
    end process;


    ap_sig_491_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_491 <= (ap_const_lv1_1 = ap_CS_fsm(61 downto 61));
    end process;


    ap_sig_514_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_514 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_522_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_522 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_529_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_529 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_561_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_561 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_568_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_568 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    ap_sig_576_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_576 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_608_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_608 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    ap_sig_615_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_615 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    ap_sig_623_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_623 <= (ap_const_lv1_1 = ap_CS_fsm(33 downto 33));
    end process;


    ap_sig_630_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_630 <= (ap_const_lv1_1 = ap_CS_fsm(39 downto 39));
    end process;


    ap_sig_638_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_638 <= (ap_const_lv1_1 = ap_CS_fsm(52 downto 52));
    end process;


    ap_sig_652_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_652 <= (ap_const_lv1_1 = ap_CS_fsm(63 downto 63));
    end process;


    ap_sig_81_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_81 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_267)
    begin
        if (ap_sig_267) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_135)
    begin
        if (ap_sig_135) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_152)
    begin
        if (ap_sig_152) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_608)
    begin
        if (ap_sig_608) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st19_fsm_18_assign_proc : process(ap_sig_177)
    begin
        if (ap_sig_177) then 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_81)
    begin
        if (ap_sig_81) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st20_fsm_19_assign_proc : process(ap_sig_290)
    begin
        if (ap_sig_290) then 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st21_fsm_20_assign_proc : process(ap_sig_615)
    begin
        if (ap_sig_615) then 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st25_fsm_24_assign_proc : process(ap_sig_201)
    begin
        if (ap_sig_201) then 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st26_fsm_25_assign_proc : process(ap_sig_299)
    begin
        if (ap_sig_299) then 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st27_fsm_26_assign_proc : process(ap_sig_456)
    begin
        if (ap_sig_456) then 
            ap_sig_cseq_ST_st27_fsm_26 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st27_fsm_26 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st28_fsm_27_assign_proc : process(ap_sig_308)
    begin
        if (ap_sig_308) then 
            ap_sig_cseq_ST_st28_fsm_27 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st28_fsm_27 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st29_fsm_28_assign_proc : process(ap_sig_322)
    begin
        if (ap_sig_322) then 
            ap_sig_cseq_ST_st29_fsm_28 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st29_fsm_28 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_522)
    begin
        if (ap_sig_522) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st30_fsm_29_assign_proc : process(ap_sig_226)
    begin
        if (ap_sig_226) then 
            ap_sig_cseq_ST_st30_fsm_29 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st30_fsm_29 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st33_fsm_32_assign_proc : process(ap_sig_159)
    begin
        if (ap_sig_159) then 
            ap_sig_cseq_ST_st33_fsm_32 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st33_fsm_32 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st34_fsm_33_assign_proc : process(ap_sig_623)
    begin
        if (ap_sig_623) then 
            ap_sig_cseq_ST_st34_fsm_33 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st34_fsm_33 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st38_fsm_37_assign_proc : process(ap_sig_184)
    begin
        if (ap_sig_184) then 
            ap_sig_cseq_ST_st38_fsm_37 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st38_fsm_37 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st39_fsm_38_assign_proc : process(ap_sig_344)
    begin
        if (ap_sig_344) then 
            ap_sig_cseq_ST_st39_fsm_38 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st39_fsm_38 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_561)
    begin
        if (ap_sig_561) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st40_fsm_39_assign_proc : process(ap_sig_630)
    begin
        if (ap_sig_630) then 
            ap_sig_cseq_ST_st40_fsm_39 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st40_fsm_39 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st44_fsm_43_assign_proc : process(ap_sig_208)
    begin
        if (ap_sig_208) then 
            ap_sig_cseq_ST_st44_fsm_43 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st44_fsm_43 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st45_fsm_44_assign_proc : process(ap_sig_353)
    begin
        if (ap_sig_353) then 
            ap_sig_cseq_ST_st45_fsm_44 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st45_fsm_44 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st46_fsm_45_assign_proc : process(ap_sig_476)
    begin
        if (ap_sig_476) then 
            ap_sig_cseq_ST_st46_fsm_45 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st46_fsm_45 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st47_fsm_46_assign_proc : process(ap_sig_362)
    begin
        if (ap_sig_362) then 
            ap_sig_cseq_ST_st47_fsm_46 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st47_fsm_46 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st48_fsm_47_assign_proc : process(ap_sig_379)
    begin
        if (ap_sig_379) then 
            ap_sig_cseq_ST_st48_fsm_47 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st48_fsm_47 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st49_fsm_48_assign_proc : process(ap_sig_142)
    begin
        if (ap_sig_142) then 
            ap_sig_cseq_ST_st49_fsm_48 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st49_fsm_48 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_576)
    begin
        if (ap_sig_576) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st52_fsm_51_assign_proc : process(ap_sig_167)
    begin
        if (ap_sig_167) then 
            ap_sig_cseq_ST_st52_fsm_51 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st52_fsm_51 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st53_fsm_52_assign_proc : process(ap_sig_638)
    begin
        if (ap_sig_638) then 
            ap_sig_cseq_ST_st53_fsm_52 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st53_fsm_52 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st57_fsm_56_assign_proc : process(ap_sig_192)
    begin
        if (ap_sig_192) then 
            ap_sig_cseq_ST_st57_fsm_56 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st57_fsm_56 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_514)
    begin
        if (ap_sig_514) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st61_fsm_60_assign_proc : process(ap_sig_216)
    begin
        if (ap_sig_216) then 
            ap_sig_cseq_ST_st61_fsm_60 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st61_fsm_60 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st62_fsm_61_assign_proc : process(ap_sig_491)
    begin
        if (ap_sig_491) then 
            ap_sig_cseq_ST_st62_fsm_61 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st62_fsm_61 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st63_fsm_62_assign_proc : process(ap_sig_233)
    begin
        if (ap_sig_233) then 
            ap_sig_cseq_ST_st63_fsm_62 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st63_fsm_62 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st64_fsm_63_assign_proc : process(ap_sig_652)
    begin
        if (ap_sig_652) then 
            ap_sig_cseq_ST_st64_fsm_63 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st64_fsm_63 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_529)
    begin
        if (ap_sig_529) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_568)
    begin
        if (ap_sig_568) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_243)
    begin
        if (ap_sig_243) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_256)
    begin
        if (ap_sig_256) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    bias_load_phi_i_fu_757_p3 <= 
        ap_const_lv32_3E759240 when (tmp_18_fu_753_p1(0) = '1') else 
        ap_const_lv32_BE833E74;
    biased_1_fu_563_p3 <= 
        reg_454 when (tmp_4_fu_557_p2(0) = '1') else 
        ap_const_lv32_0;
    biased_2_to_int_fu_653_p1 <= reg_454;
    biased_3_fu_695_p3 <= 
        reg_454 when (tmp_17_fu_689_p2(0) = '1') else 
        ap_const_lv32_0;
    biased_to_int_fu_521_p1 <= reg_454;
    exitcond1_fu_472_p2 <= "1" when (n_i_reg_250 = ap_const_lv7_78) else "0";
    exitcond2_fu_571_p2 <= "1" when (n_i2_reg_297 = ap_const_lv7_54) else "0";
    exitcond3_fu_488_p2 <= "1" when (m_i_reg_286 = ap_const_lv9_190) else "0";
    exitcond4_fu_709_p2 <= "1" when (n_i1_reg_332 = ap_const_lv2_2) else "0";
    exitcond5_fu_617_p2 <= "1" when (m_i6_reg_321 = ap_const_lv7_78) else "0";
    exitcond_fu_725_p2 <= "1" when (m_i1_reg_368 = ap_const_lv7_54) else "0";
    fc1_bias_address0 <= tmp_15_i_fu_516_p1(7 - 1 downto 0);

    fc1_bias_ce0_assign_proc : process(ap_sig_cseq_ST_st10_fsm_9)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            fc1_bias_ce0 <= ap_const_logic_1;
        else 
            fc1_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fc1_weight_address0 <= tmp_13_i_fu_511_p1(16 - 1 downto 0);

    fc1_weight_ce0_assign_proc : process(ap_sig_cseq_ST_st10_fsm_9)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            fc1_weight_ce0 <= ap_const_logic_1;
        else 
            fc1_weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fc2_bias_address0 <= tmp_15_i1_fu_648_p1(7 - 1 downto 0);

    fc2_bias_ce0_assign_proc : process(ap_sig_cseq_ST_st29_fsm_28)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)) then 
            fc2_bias_ce0 <= ap_const_logic_1;
        else 
            fc2_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fc2_weight_address0 <= tmp_13_i1_fu_643_p1(14 - 1 downto 0);

    fc2_weight_ce0_assign_proc : process(ap_sig_cseq_ST_st29_fsm_28)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)) then 
            fc2_weight_ce0 <= ap_const_logic_1;
        else 
            fc2_weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fc3_weight_address0 <= tmp_13_i2_fu_748_p1(8 - 1 downto 0);

    fc3_weight_ce0_assign_proc : process(ap_sig_cseq_ST_st48_fsm_47)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_47)) then 
            fc3_weight_ce0 <= ap_const_logic_1;
        else 
            fc3_weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_dut_conv1_fu_379_I_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            grp_dut_conv1_fu_379_I <= ap_const_lv7_E;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            grp_dut_conv1_fu_379_I <= ap_const_lv7_20;
        else 
            grp_dut_conv1_fu_379_I <= "XXXXXXX";
        end if; 
    end process;


    grp_dut_conv1_fu_379_L_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            grp_dut_conv1_fu_379_L <= ap_const_lv1_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            grp_dut_conv1_fu_379_L <= ap_const_lv1_0;
        else 
            grp_dut_conv1_fu_379_L <= "X";
        end if; 
    end process;


    grp_dut_conv1_fu_379_M_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            grp_dut_conv1_fu_379_M <= ap_const_lv4_6;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            grp_dut_conv1_fu_379_M <= ap_const_lv4_3;
        else 
            grp_dut_conv1_fu_379_M <= "XXXX";
        end if; 
    end process;


    grp_dut_conv1_fu_379_N_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            grp_dut_conv1_fu_379_N <= ap_const_lv6_10;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            grp_dut_conv1_fu_379_N <= ap_const_lv6_6;
        else 
            grp_dut_conv1_fu_379_N <= "XXXXXX";
        end if; 
    end process;

    grp_dut_conv1_fu_379_ap_start <= ap_reg_grp_dut_conv1_fu_379_ap_start;

    grp_dut_conv1_fu_379_input_r_q0_assign_proc : process(input_r_q0, mem_conv1_q0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            grp_dut_conv1_fu_379_input_r_q0 <= mem_conv1_q0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            grp_dut_conv1_fu_379_input_r_q0 <= input_r_q0;
        else 
            grp_dut_conv1_fu_379_input_r_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_dut_max_pool_fu_403_I_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            grp_dut_max_pool_fu_403_I <= ap_const_lv6_A;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            grp_dut_max_pool_fu_403_I <= ap_const_lv6_1C;
        else 
            grp_dut_max_pool_fu_403_I <= "XXXXXX";
        end if; 
    end process;


    grp_dut_max_pool_fu_403_M_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            grp_dut_max_pool_fu_403_M <= ap_const_lv6_10;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            grp_dut_max_pool_fu_403_M <= ap_const_lv6_6;
        else 
            grp_dut_max_pool_fu_403_M <= "XXXXXX";
        end if; 
    end process;

    grp_dut_max_pool_fu_403_ap_start <= ap_reg_grp_dut_max_pool_fu_403_ap_start;

    grp_fu_415_p0_assign_proc : process(ap_sig_cseq_ST_st48_fsm_47, sum_i_reg_274, sum_i5_reg_309, sum_i1_phi_fu_360_p4, sum_i1_reg_356, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st21_fsm_20, ap_sig_cseq_ST_st34_fsm_33, ap_sig_cseq_ST_st40_fsm_39, ap_sig_cseq_ST_st53_fsm_52)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st53_fsm_52)) then 
            grp_fu_415_p0 <= sum_i1_reg_356;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_47)) then 
            grp_fu_415_p0 <= sum_i1_phi_fu_360_p4;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33) or (ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_39))) then 
            grp_fu_415_p0 <= sum_i5_reg_309;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20))) then 
            grp_fu_415_p0 <= sum_i_reg_274;
        else 
            grp_fu_415_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_415_p1_assign_proc : process(reg_442, fc1_bias_load_reg_905, fc2_bias_load_reg_961, ap_sig_cseq_ST_st48_fsm_47, bias_load_phi_i_fu_757_p3, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st21_fsm_20, ap_sig_cseq_ST_st34_fsm_33, ap_sig_cseq_ST_st40_fsm_39, ap_sig_cseq_ST_st53_fsm_52)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_47)) then 
            grp_fu_415_p1 <= bias_load_phi_i_fu_757_p3;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_39)) then 
            grp_fu_415_p1 <= fc2_bias_load_reg_961;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
            grp_fu_415_p1 <= fc1_bias_load_reg_905;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33) or (ap_const_logic_1 = ap_sig_cseq_ST_st53_fsm_52))) then 
            grp_fu_415_p1 <= reg_442;
        else 
            grp_fu_415_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_423_p0_assign_proc : process(mem_conv1_q0, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st49_fsm_48, mem_conv2_q0, ap_sig_cseq_ST_st30_fsm_29)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29)) then 
            grp_fu_423_p0 <= mem_conv2_q0;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) or (ap_const_logic_1 = ap_sig_cseq_ST_st49_fsm_48))) then 
            grp_fu_423_p0 <= mem_conv1_q0;
        else 
            grp_fu_423_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_423_p1_assign_proc : process(fc1_weight_q0, fc2_weight_q0, fc3_weight_q0, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st49_fsm_48, ap_sig_cseq_ST_st30_fsm_29)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st49_fsm_48)) then 
            grp_fu_423_p1 <= fc3_weight_q0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29)) then 
            grp_fu_423_p1 <= fc2_weight_q0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            grp_fu_423_p1 <= fc1_weight_q0;
        else 
            grp_fu_423_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_432_opcode_assign_proc : process(ap_sig_cseq_ST_st26_fsm_25, ap_sig_cseq_ST_st45_fsm_44, ap_sig_cseq_ST_st64_fsm_63)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st64_fsm_63)) then 
            grp_fu_432_opcode <= ap_const_lv5_4;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) or (ap_const_logic_1 = ap_sig_cseq_ST_st45_fsm_44))) then 
            grp_fu_432_opcode <= ap_const_lv5_2;
        else 
            grp_fu_432_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_432_p0_assign_proc : process(reg_454, reg_460, ap_sig_cseq_ST_st26_fsm_25, ap_sig_cseq_ST_st45_fsm_44, ap_sig_cseq_ST_st64_fsm_63)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st64_fsm_63)) then 
            grp_fu_432_p0 <= reg_460;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) or (ap_const_logic_1 = ap_sig_cseq_ST_st45_fsm_44))) then 
            grp_fu_432_p0 <= reg_454;
        else 
            grp_fu_432_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_432_p1_assign_proc : process(ap_sig_cseq_ST_st26_fsm_25, ap_sig_cseq_ST_st45_fsm_44, mem_conv2_load_1_reg_1017, ap_sig_cseq_ST_st64_fsm_63)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st64_fsm_63)) then 
            grp_fu_432_p1 <= mem_conv2_load_1_reg_1017;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) or (ap_const_logic_1 = ap_sig_cseq_ST_st45_fsm_44))) then 
            grp_fu_432_p1 <= ap_const_lv32_0;
        else 
            grp_fu_432_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    input_r_address0 <= grp_dut_conv1_fu_379_input_r_address0;
    input_r_ce0 <= grp_dut_conv1_fu_379_input_r_ce0;
    m_1_fu_623_p2 <= std_logic_vector(unsigned(m_i6_reg_321) + unsigned(ap_const_lv7_1));
    m_2_fu_731_p2 <= std_logic_vector(unsigned(m_i1_reg_368) + unsigned(ap_const_lv7_1));
    m_fu_494_p2 <= std_logic_vector(unsigned(m_i_reg_286) + unsigned(ap_const_lv9_1));
    m_i1_cast_fu_721_p1 <= std_logic_vector(resize(unsigned(m_i1_reg_368),8));
    m_i6_cast5_fu_613_p1 <= std_logic_vector(resize(unsigned(m_i6_reg_321),15));
    m_i_cast_fu_484_p1 <= std_logic_vector(resize(unsigned(m_i_reg_286),16));

    mem_conv1_address0_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st10_fsm_9, tmp_15_i1_reg_946, ap_sig_cseq_ST_st48_fsm_47, grp_dut_conv1_fu_379_input_r_address0, grp_dut_max_pool_fu_403_output_r_address0, ap_sig_cseq_ST_st46_fsm_45, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st4_fsm_3, tmp_12_i_fu_506_p1, tmp_12_i1_fu_743_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st46_fsm_45)) then 
            mem_conv1_address0 <= tmp_15_i1_reg_946(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_47)) then 
            mem_conv1_address0 <= tmp_12_i1_fu_743_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            mem_conv1_address0 <= tmp_12_i_fu_506_p1(13 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            mem_conv1_address0 <= grp_dut_max_pool_fu_403_output_r_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            mem_conv1_address0 <= grp_dut_conv1_fu_379_input_r_address0;
        else 
            mem_conv1_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    mem_conv1_ce0_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st48_fsm_47, grp_dut_conv1_fu_379_input_r_ce0, grp_dut_max_pool_fu_403_output_r_ce0, ap_sig_cseq_ST_st46_fsm_45, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_47) or (ap_const_logic_1 = ap_sig_cseq_ST_st46_fsm_45))) then 
            mem_conv1_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            mem_conv1_ce0 <= grp_dut_max_pool_fu_403_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            mem_conv1_ce0 <= grp_dut_conv1_fu_379_input_r_ce0;
        else 
            mem_conv1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mem_conv1_d0_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, biased_3_reg_966, grp_dut_max_pool_fu_403_output_r_d0, ap_sig_cseq_ST_st46_fsm_45, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st46_fsm_45)) then 
            mem_conv1_d0 <= biased_3_reg_966;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            mem_conv1_d0 <= grp_dut_max_pool_fu_403_output_r_d0;
        else 
            mem_conv1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    mem_conv1_we0_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, grp_dut_max_pool_fu_403_output_r_we0, ap_sig_cseq_ST_st46_fsm_45, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st46_fsm_45))) then 
            mem_conv1_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            mem_conv1_we0 <= grp_dut_max_pool_fu_403_output_r_we0;
        else 
            mem_conv1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    mem_conv2_address0_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, tmp_15_i_reg_890, ap_sig_cseq_ST_st29_fsm_28, ap_sig_cseq_ST_st47_fsm_46, grp_dut_conv1_fu_379_output_r_address0, grp_dut_max_pool_fu_403_input_r_address0, ap_sig_cseq_ST_st27_fsm_26, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st4_fsm_3, tmp_12_i9_fu_638_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26)) then 
            mem_conv2_address0 <= tmp_15_i_reg_890(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st47_fsm_46)) then 
            mem_conv2_address0 <= ap_const_lv64_0(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)) then 
            mem_conv2_address0 <= tmp_12_i9_fu_638_p1(13 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            mem_conv2_address0 <= grp_dut_max_pool_fu_403_input_r_address0;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5))) then 
            mem_conv2_address0 <= grp_dut_conv1_fu_379_output_r_address0;
        else 
            mem_conv2_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    mem_conv2_address1_assign_proc : process(ap_sig_cseq_ST_st47_fsm_46, ap_sig_cseq_ST_st62_fsm_61, tmp_15_i2_fu_766_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st62_fsm_61)) then 
            mem_conv2_address1 <= tmp_15_i2_fu_766_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st47_fsm_46)) then 
            mem_conv2_address1 <= ap_const_lv64_1(13 - 1 downto 0);
        else 
            mem_conv2_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    mem_conv2_ce0_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st29_fsm_28, ap_sig_cseq_ST_st47_fsm_46, grp_dut_conv1_fu_379_output_r_ce0, grp_dut_max_pool_fu_403_input_r_ce0, ap_sig_cseq_ST_st27_fsm_26, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28) or (ap_const_logic_1 = ap_sig_cseq_ST_st47_fsm_46) or (ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26))) then 
            mem_conv2_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            mem_conv2_ce0 <= grp_dut_max_pool_fu_403_input_r_ce0;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5))) then 
            mem_conv2_ce0 <= grp_dut_conv1_fu_379_output_r_ce0;
        else 
            mem_conv2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mem_conv2_ce1_assign_proc : process(ap_sig_cseq_ST_st47_fsm_46, ap_sig_cseq_ST_st62_fsm_61)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st47_fsm_46) or (ap_const_logic_1 = ap_sig_cseq_ST_st62_fsm_61))) then 
            mem_conv2_ce1 <= ap_const_logic_1;
        else 
            mem_conv2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    mem_conv2_d0_assign_proc : process(biased_1_reg_910, grp_dut_conv1_fu_379_output_r_d0, ap_sig_cseq_ST_st27_fsm_26, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26)) then 
            mem_conv2_d0 <= biased_1_reg_910;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5))) then 
            mem_conv2_d0 <= grp_dut_conv1_fu_379_output_r_d0;
        else 
            mem_conv2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    mem_conv2_load_1_to_int_fu_789_p1 <= mem_conv2_load_1_reg_1017;
    mem_conv2_load_to_int_fu_771_p1 <= reg_460;

    mem_conv2_we0_assign_proc : process(grp_dut_conv1_fu_379_output_r_we0, ap_sig_cseq_ST_st27_fsm_26, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26))) then 
            mem_conv2_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5))) then 
            mem_conv2_we0 <= grp_dut_conv1_fu_379_output_r_we0;
        else 
            mem_conv2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    mem_conv2_we1_assign_proc : process(ap_sig_cseq_ST_st62_fsm_61)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st62_fsm_61))) then 
            mem_conv2_we1 <= ap_const_logic_1;
        else 
            mem_conv2_we1 <= ap_const_logic_0;
        end if; 
    end process;

    n_1_fu_577_p2 <= std_logic_vector(unsigned(n_i2_reg_297) + unsigned(ap_const_lv7_1));
    n_2_fu_715_p2 <= std_logic_vector(unsigned(n_i1_reg_332) + unsigned(ap_const_lv2_1));
    n_fu_478_p2 <= std_logic_vector(unsigned(n_i_reg_250) + unsigned(ap_const_lv7_1));
    next_mul2_fu_703_p2 <= std_logic_vector(unsigned(phi_mul1_reg_344) + unsigned(ap_const_lv8_54));
    next_mul_fu_466_p2 <= std_logic_vector(unsigned(phi_mul_reg_262) + unsigned(ap_const_lv16_190));
    notlhs1_fu_806_p2 <= "0" when (tmp_5_fu_775_p4 = ap_const_lv8_FF) else "1";
    notlhs2_fu_824_p2 <= "0" when (tmp_7_fu_792_p4 = ap_const_lv8_FF) else "1";
    notlhs3_fu_671_p2 <= "0" when (tmp_13_fu_657_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_539_p2 <= "0" when (tmp_fu_525_p4 = ap_const_lv8_FF) else "1";
    notrhs1_fu_812_p2 <= "1" when (tmp_1_fu_785_p1 = ap_const_lv23_0) else "0";
    notrhs2_fu_830_p2 <= "1" when (tmp_6_fu_802_p1 = ap_const_lv23_0) else "0";
    notrhs3_fu_677_p2 <= "1" when (tmp_14_fu_667_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_545_p2 <= "1" when (tmp_12_fu_535_p1 = ap_const_lv23_0) else "0";
    p_shl1_i_cast_fu_603_p1 <= std_logic_vector(resize(unsigned(p_shl1_i_fu_595_p3),15));
    p_shl1_i_fu_595_p3 <= (n_i2_reg_297 & ap_const_lv3_0);
    p_shl_i_cast_fu_591_p1 <= std_logic_vector(resize(unsigned(p_shl_i_fu_583_p3),15));
    p_shl_i_fu_583_p3 <= (n_i2_reg_297 & ap_const_lv7_0);
    sum_i1_phi_fu_360_p4 <= sum_i1_reg_356;
    tmp_12_fu_535_p1 <= biased_to_int_fu_521_p1(23 - 1 downto 0);
    tmp_12_i1_fu_743_p1 <= std_logic_vector(resize(unsigned(m_i1_reg_368),64));
    tmp_12_i9_fu_638_p1 <= std_logic_vector(resize(unsigned(m_i6_reg_321),64));
    tmp_12_i_fu_506_p1 <= std_logic_vector(resize(unsigned(m_i_reg_286),64));
    tmp_13_fu_657_p4 <= biased_2_to_int_fu_653_p1(30 downto 23);
    tmp_13_i1_fu_643_p1 <= std_logic_vector(resize(unsigned(w_index_1_cast_fu_634_p1),64));
    tmp_13_i2_fu_748_p1 <= std_logic_vector(resize(unsigned(w_index_2_fu_737_p2),64));
    tmp_13_i_fu_511_p1 <= std_logic_vector(resize(unsigned(w_index_fu_500_p2),64));
    tmp_14_fu_667_p1 <= biased_2_to_int_fu_653_p1(23 - 1 downto 0);
    tmp_15_fu_683_p2 <= (notrhs3_fu_677_p2 or notlhs3_fu_671_p2);
    tmp_15_i1_fu_648_p1 <= std_logic_vector(resize(unsigned(n_i2_reg_297),64));
    tmp_15_i2_fu_766_p1 <= std_logic_vector(resize(unsigned(n_i1_reg_332),64));
    tmp_15_i_fu_516_p1 <= std_logic_vector(resize(unsigned(n_i_reg_250),64));
    tmp_17_fu_689_p2 <= (tmp_15_fu_683_p2 and grp_fu_432_p2);
    tmp_18_fu_753_p1 <= n_i1_reg_332(1 - 1 downto 0);
    tmp_1_fu_785_p1 <= mem_conv2_load_to_int_fu_771_p1(23 - 1 downto 0);
    tmp_2_fu_551_p2 <= (notrhs_fu_545_p2 or notlhs_fu_539_p2);
    tmp_4_fu_557_p2 <= (tmp_2_fu_551_p2 and grp_fu_432_p2);
    tmp_5_fu_775_p4 <= mem_conv2_load_to_int_fu_771_p1(30 downto 23);
    tmp_6_fu_802_p1 <= mem_conv2_load_1_to_int_fu_789_p1(23 - 1 downto 0);
    tmp_7_fu_792_p4 <= mem_conv2_load_1_to_int_fu_789_p1(30 downto 23);
    tmp_8_fu_842_p2 <= (tmp_9_fu_818_p2 and tmp_s_fu_836_p2);
    tmp_9_fu_818_p2 <= (notrhs1_fu_812_p2 or notlhs1_fu_806_p2);
    tmp_fu_525_p4 <= biased_to_int_fu_521_p1(30 downto 23);
    tmp_i4_fu_607_p2 <= std_logic_vector(unsigned(p_shl_i_cast_fu_591_p1) - unsigned(p_shl1_i_cast_fu_603_p1));
    tmp_s_fu_836_p2 <= (notrhs2_fu_830_p2 or notlhs2_fu_824_p2);
        w_index_1_cast_fu_634_p1 <= std_logic_vector(resize(signed(w_index_1_fu_629_p2),32));

    w_index_1_fu_629_p2 <= std_logic_vector(unsigned(m_i6_cast5_fu_613_p1) + unsigned(tmp_i4_reg_923));
    w_index_2_fu_737_p2 <= std_logic_vector(unsigned(m_i1_cast_fu_721_p1) + unsigned(phi_mul1_reg_344));
    w_index_fu_500_p2 <= std_logic_vector(unsigned(m_i_cast_fu_484_p1) + unsigned(phi_mul_reg_262));
end behav;
