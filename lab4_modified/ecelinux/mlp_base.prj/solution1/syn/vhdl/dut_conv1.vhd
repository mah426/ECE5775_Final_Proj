-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_conv1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of dut_conv1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (20 downto 0) := "000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (20 downto 0) := "000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (20 downto 0) := "000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (20 downto 0) := "000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (20 downto 0) := "000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (20 downto 0) := "000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (20 downto 0) := "000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (20 downto 0) := "001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (20 downto 0) := "010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv13_19 : STD_LOGIC_VECTOR (12 downto 0) := "0000000011001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_38 : BOOLEAN;
    signal conv2_weight_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal conv2_weight_ce0 : STD_LOGIC;
    signal conv2_weight_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_2_fu_237_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal n_2_reg_562 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_70 : BOOLEAN;
    signal p_shl3_cast_fu_255_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl3_cast_reg_567 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond8_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl4_cast1_fu_265_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl4_cast1_reg_572 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_20_fu_273_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_reg_577 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_3_fu_289_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal x_3_reg_585 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_89 : BOOLEAN;
    signal p_shl5_fu_309_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl5_reg_590 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond9_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl6_fu_317_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl6_reg_595 : STD_LOGIC_VECTOR (8 downto 0);
    signal y_cast_fu_325_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal y_cast_reg_600 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_105 : BOOLEAN;
    signal y_3_fu_339_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal y_3_reg_608 : STD_LOGIC_VECTOR (3 downto 0);
    signal o_index_fu_354_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal o_index_reg_613 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond2_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_3_fu_369_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal m_3_reg_621 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_121 : BOOLEAN;
    signal tmp_23_fu_399_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_23_reg_626 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond3_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_414_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_25_reg_631 : STD_LOGIC_VECTOR (12 downto 0);
    signal c_cast2_fu_428_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal c_cast2_reg_636 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_137 : BOOLEAN;
    signal c_3_fu_438_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_3_reg_644 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp8_fu_444_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp8_reg_649 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond1_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_2_fu_463_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_2_reg_657 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_153 : BOOLEAN;
    signal i_index_fu_515_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_index_reg_662 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_index_fu_538_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal w_index_reg_667 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_169 : BOOLEAN;
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_179 : BOOLEAN;
    signal grp_fu_225_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_reg_692 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_189 : BOOLEAN;
    signal grp_fu_218_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st17_fsm_16 : STD_LOGIC;
    signal ap_sig_198 : BOOLEAN;
    signal ap_sig_cseq_ST_st21_fsm_20 : STD_LOGIC;
    signal ap_sig_206 : BOOLEAN;
    signal n_reg_114 : STD_LOGIC_VECTOR (4 downto 0);
    signal x_reg_125 : STD_LOGIC_VECTOR (3 downto 0);
    signal y_reg_137 : STD_LOGIC_VECTOR (3 downto 0);
    signal sum_reg_148 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_reg_161 : STD_LOGIC_VECTOR (2 downto 0);
    signal filter_sum_reg_172 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_reg_184 : STD_LOGIC_VECTOR (2 downto 0);
    signal filter_sum_1_reg_195 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_reg_207 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_26_fu_420_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_549_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_fu_554_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_218_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_218_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_252 : BOOLEAN;
    signal tmp_34_fu_243_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl3_fu_247_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_35_fu_259_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl4_cast_fu_269_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_cast_fu_279_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp1_fu_295_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp1_cast_fu_300_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_304_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_cast1_fu_329_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp2_fu_345_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp2_cast_fu_350_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl7_fu_375_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl8_fu_387_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl7_cast_fu_383_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl8_cast_fu_395_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_cast1_fu_359_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_fu_405_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_25_fu_414_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_cast_fu_424_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_cast_fu_453_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp6_fu_469_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp6_cast_fu_475_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp4_fu_479_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl1_fu_492_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl9_fu_484_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl1_cast_fu_500_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp5_fu_504_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp7_fu_510_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_cast1_fu_449_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_fu_520_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp9_fu_528_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp9_cast_fu_534_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_index_cast_fu_543_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_index_cast_fu_546_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (20 downto 0);

    component dut_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_conv1_conv2_weight IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv2_weight_U : component dut_conv1_conv2_weight
    generic map (
        DataWidth => 32,
        AddressRange => 2400,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv2_weight_address0,
        ce0 => conv2_weight_ce0,
        q0 => conv2_weight_q0);

    dut_fadd_32ns_32ns_32_5_full_dsp_U10 : component dut_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_218_p0,
        din1 => grp_fu_218_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_218_p2);

    dut_fmul_32ns_32ns_32_4_max_dsp_U11 : component dut_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => input_r_q0,
        din1 => conv2_weight_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_225_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = exitcond_fu_457_p2)))) then 
                c_reg_184 <= c_3_reg_644;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond3_fu_363_p2))) then 
                c_reg_184 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    filter_sum_1_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16)) then 
                filter_sum_1_reg_195 <= grp_fu_218_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = exitcond1_fu_432_p2))) then 
                filter_sum_1_reg_195 <= filter_sum_reg_172;
            end if; 
        end if;
    end process;

    filter_sum_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = exitcond_fu_457_p2)))) then 
                filter_sum_reg_172 <= filter_sum_1_reg_195;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond3_fu_363_p2))) then 
                filter_sum_reg_172 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    m_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
                m_reg_161 <= m_3_reg_621;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond2_fu_333_p2))) then 
                m_reg_161 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    n_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond9_fu_283_p2)))) then 
                n_reg_114 <= n_2_reg_562;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                n_reg_114 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    r_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16)) then 
                r_reg_207 <= r_2_reg_657;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = exitcond1_fu_432_p2))) then 
                r_reg_207 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    sum_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
                sum_reg_148 <= grp_fu_218_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond2_fu_333_p2))) then 
                sum_reg_148 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    x_reg_125_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond2_fu_333_p2)))) then 
                x_reg_125 <= x_3_reg_585;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond8_fu_231_p2 = ap_const_lv1_0))) then 
                x_reg_125 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    y_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond3_fu_363_p2)))) then 
                y_reg_137 <= y_3_reg_608;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond9_fu_283_p2))) then 
                y_reg_137 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                c_3_reg_644 <= c_3_fu_438_p2;
                    c_cast2_reg_636(2 downto 0) <= c_cast2_fu_428_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (ap_const_lv1_0 = exitcond_fu_457_p2))) then
                i_index_reg_662 <= i_index_fu_515_p2;
                w_index_reg_667 <= w_index_fu_538_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                m_3_reg_621 <= m_3_fu_369_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                n_2_reg_562 <= n_2_fu_237_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond2_fu_333_p2))) then
                o_index_reg_613 <= o_index_fu_354_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond8_fu_231_p2 = ap_const_lv1_0))) then
                    p_shl3_cast_reg_567(6 downto 3) <= p_shl3_cast_fu_255_p1(6 downto 3);
                    p_shl4_cast1_reg_572(4 downto 1) <= p_shl4_cast1_fu_265_p1(4 downto 1);
                    tmp_20_reg_577(7 downto 1) <= tmp_20_fu_273_p2(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond9_fu_283_p2))) then
                    p_shl5_reg_590(10 downto 3) <= p_shl5_fu_309_p3(10 downto 3);
                    p_shl6_reg_595(8 downto 1) <= p_shl6_fu_317_p3(8 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then
                r_2_reg_657 <= r_2_fu_463_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = exitcond1_fu_432_p2))) then
                tmp8_reg_649 <= tmp8_fu_444_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond3_fu_363_p2))) then
                    tmp_23_reg_626(7 downto 1) <= tmp_23_fu_399_p2(7 downto 1);
                tmp_25_reg_631 <= tmp_25_fu_414_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then
                tmp_33_reg_692 <= grp_fu_225_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                x_3_reg_585 <= x_3_fu_289_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                y_3_reg_608 <= y_3_fu_339_p2;
                    y_cast_reg_600(3 downto 0) <= y_cast_fu_325_p1(3 downto 0);
            end if;
        end if;
    end process;
    p_shl3_cast_reg_567(2 downto 0) <= "000";
    p_shl3_cast_reg_567(7) <= '0';
    p_shl4_cast1_reg_572(0) <= '0';
    p_shl4_cast1_reg_572(5) <= '0';
    tmp_20_reg_577(0) <= '0';
    p_shl5_reg_590(2 downto 0) <= "000";
    p_shl6_reg_595(0) <= '0';
    y_cast_reg_600(11 downto 4) <= "00000000";
    tmp_23_reg_626(0) <= '0';
    c_cast2_reg_636(11 downto 3) <= "000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond8_fu_231_p2, exitcond9_fu_283_p2, exitcond2_fu_333_p2, exitcond3_fu_363_p2, exitcond1_fu_432_p2, exitcond_fu_457_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond8_fu_231_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_lv1_0 = exitcond9_fu_283_p2))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (not((ap_const_lv1_0 = exitcond2_fu_333_p2))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st5_fsm_4 => 
                if (not((ap_const_lv1_0 = exitcond3_fu_363_p2))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st6_fsm_5 => 
                if ((ap_const_lv1_0 = exitcond1_fu_432_p2)) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st18_fsm_17;
                end if;
            when ap_ST_st7_fsm_6 => 
                if (not((ap_const_lv1_0 = exitcond_fu_457_p2))) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                end if;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, exitcond8_fu_231_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond8_fu_231_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond8_fu_231_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond8_fu_231_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_105_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_105 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_121_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_121 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_137_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_137 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_153_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_153 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    ap_sig_169_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_169 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    ap_sig_179_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_179 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    ap_sig_189_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_189 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    ap_sig_198_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_198 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    ap_sig_206_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_206 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    ap_sig_252_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_252 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    ap_sig_38_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_38 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_70_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_70 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_89_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_89 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_189)
    begin
        if (ap_sig_189) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_252)
    begin
        if (ap_sig_252) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st17_fsm_16_assign_proc : process(ap_sig_198)
    begin
        if (ap_sig_198) then 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_38)
    begin
        if (ap_sig_38) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st21_fsm_20_assign_proc : process(ap_sig_206)
    begin
        if (ap_sig_206) then 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_70)
    begin
        if (ap_sig_70) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_89)
    begin
        if (ap_sig_89) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_105)
    begin
        if (ap_sig_105) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_121)
    begin
        if (ap_sig_121) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_137)
    begin
        if (ap_sig_137) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_153)
    begin
        if (ap_sig_153) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_169)
    begin
        if (ap_sig_169) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_179)
    begin
        if (ap_sig_179) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    c_3_fu_438_p2 <= std_logic_vector(unsigned(c_reg_184) + unsigned(ap_const_lv3_1));
    c_cast2_fu_428_p1 <= std_logic_vector(resize(unsigned(c_reg_184),12));
    c_cast_fu_424_p1 <= std_logic_vector(resize(unsigned(c_reg_184),13));
    conv2_weight_address0 <= tmp_32_fu_554_p1(12 - 1 downto 0);

    conv2_weight_ce0_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            conv2_weight_ce0 <= ap_const_logic_1;
        else 
            conv2_weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_432_p2 <= "1" when (c_reg_184 = ap_const_lv3_5) else "0";
    exitcond2_fu_333_p2 <= "1" when (y_reg_137 = ap_const_lv4_A) else "0";
    exitcond3_fu_363_p2 <= "1" when (m_reg_161 = ap_const_lv3_6) else "0";
    exitcond8_fu_231_p2 <= "1" when (n_reg_114 = ap_const_lv5_10) else "0";
    exitcond9_fu_283_p2 <= "1" when (x_reg_125 = ap_const_lv4_A) else "0";
    exitcond_fu_457_p2 <= "1" when (r_reg_207 = ap_const_lv3_5) else "0";

    grp_fu_218_p0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, sum_reg_148, filter_sum_1_reg_195, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            grp_fu_218_p0 <= filter_sum_1_reg_195;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            grp_fu_218_p0 <= sum_reg_148;
        else 
            grp_fu_218_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_218_p1_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, tmp_33_reg_692, filter_sum_reg_172, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            grp_fu_218_p1 <= tmp_33_reg_692;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            grp_fu_218_p1 <= filter_sum_reg_172;
        else 
            grp_fu_218_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

        i_index_cast_fu_543_p1 <= std_logic_vector(resize(signed(i_index_reg_662),32));

    i_index_fu_515_p2 <= std_logic_vector(unsigned(c_cast2_reg_636) + unsigned(tmp7_fu_510_p2));
    input_r_address0 <= tmp_s_fu_549_p1(13 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_3_fu_369_p2 <= std_logic_vector(unsigned(m_reg_161) + unsigned(ap_const_lv3_1));
    m_cast1_fu_359_p1 <= std_logic_vector(resize(unsigned(m_reg_161),8));
    n_2_fu_237_p2 <= std_logic_vector(unsigned(n_reg_114) + unsigned(ap_const_lv5_1));
    o_index_fu_354_p2 <= std_logic_vector(unsigned(tmp2_cast_fu_350_p1) + unsigned(p_shl5_reg_590));
    output_r_address0 <= tmp_26_fu_420_p1(13 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= sum_reg_148;

    output_r_we0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, exitcond3_fu_363_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond3_fu_363_p2))))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

        p_shl1_cast_fu_500_p1 <= std_logic_vector(resize(signed(p_shl1_fu_492_p3),12));

    p_shl1_fu_492_p3 <= (tmp4_fu_479_p2 & ap_const_lv1_0);
    p_shl3_cast_fu_255_p1 <= std_logic_vector(resize(unsigned(p_shl3_fu_247_p3),8));
    p_shl3_fu_247_p3 <= (tmp_34_fu_243_p1 & ap_const_lv3_0);
    p_shl4_cast1_fu_265_p1 <= std_logic_vector(resize(unsigned(tmp_35_fu_259_p2),6));
    p_shl4_cast_fu_269_p1 <= std_logic_vector(resize(unsigned(tmp_35_fu_259_p2),8));
    p_shl5_fu_309_p3 <= (tmp_fu_304_p2 & ap_const_lv3_0);
    p_shl6_fu_317_p3 <= (tmp_fu_304_p2 & ap_const_lv1_0);
    p_shl7_cast_fu_383_p1 <= std_logic_vector(resize(unsigned(p_shl7_fu_375_p3),8));
    p_shl7_fu_375_p3 <= (m_reg_161 & ap_const_lv4_0);
    p_shl8_cast_fu_395_p1 <= std_logic_vector(resize(unsigned(p_shl8_fu_387_p3),8));
    p_shl8_fu_387_p3 <= (m_reg_161 & ap_const_lv1_0);
    p_shl9_fu_484_p3 <= (tmp4_fu_479_p2 & ap_const_lv4_0);
    p_shl_fu_520_p3 <= (r_reg_207 & ap_const_lv2_0);
    r_2_fu_463_p2 <= std_logic_vector(unsigned(r_reg_207) + unsigned(ap_const_lv3_1));
    r_cast1_fu_449_p1 <= std_logic_vector(resize(unsigned(r_reg_207),5));
    r_cast_fu_453_p1 <= std_logic_vector(resize(unsigned(r_reg_207),4));
    tmp1_cast_fu_300_p1 <= std_logic_vector(resize(unsigned(tmp1_fu_295_p2),8));
    tmp1_fu_295_p2 <= std_logic_vector(unsigned(x_cast_fu_279_p1) + unsigned(p_shl4_cast1_reg_572));
    tmp2_cast_fu_350_p1 <= std_logic_vector(resize(unsigned(tmp2_fu_345_p2),11));
    tmp2_fu_345_p2 <= std_logic_vector(unsigned(p_shl6_reg_595) + unsigned(y_cast1_fu_329_p1));
    tmp4_fu_479_p2 <= std_logic_vector(unsigned(tmp_23_reg_626) + unsigned(tmp6_cast_fu_475_p1));
    tmp5_fu_504_p2 <= std_logic_vector(unsigned(p_shl9_fu_484_p3) - unsigned(p_shl1_cast_fu_500_p1));
    tmp6_cast_fu_475_p1 <= std_logic_vector(resize(unsigned(tmp6_fu_469_p2),8));
    tmp6_fu_469_p2 <= std_logic_vector(unsigned(r_cast_fu_453_p1) + unsigned(x_reg_125));
    tmp7_fu_510_p2 <= std_logic_vector(unsigned(tmp5_fu_504_p2) + unsigned(y_cast_reg_600));
    tmp8_fu_444_p2 <= std_logic_vector(unsigned(c_cast_fu_424_p1) + unsigned(tmp_25_reg_631));
    tmp9_cast_fu_534_p1 <= std_logic_vector(resize(unsigned(tmp9_fu_528_p2),13));
    tmp9_fu_528_p2 <= std_logic_vector(unsigned(r_cast1_fu_449_p1) + unsigned(p_shl_fu_520_p3));
    tmp_20_fu_273_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_255_p1) - unsigned(p_shl4_cast_fu_269_p1));
    tmp_23_fu_399_p2 <= std_logic_vector(unsigned(p_shl7_cast_fu_383_p1) - unsigned(p_shl8_cast_fu_395_p1));
    tmp_24_fu_405_p2 <= std_logic_vector(unsigned(m_cast1_fu_359_p1) + unsigned(tmp_20_reg_577));
    tmp_25_fu_414_p0 <= tmp_24_fu_405_p2;
    tmp_25_fu_414_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_25_fu_414_p0) * signed('0' &ap_const_lv13_19))), 13));
    tmp_26_fu_420_p1 <= std_logic_vector(resize(unsigned(o_index_reg_613),64));
    tmp_32_fu_554_p1 <= std_logic_vector(resize(unsigned(w_index_cast_fu_546_p1),64));
    tmp_34_fu_243_p1 <= n_reg_114(4 - 1 downto 0);
    tmp_35_fu_259_p2 <= std_logic_vector(shift_left(unsigned(n_reg_114),to_integer(unsigned('0' & ap_const_lv5_1(5-1 downto 0)))));
    tmp_fu_304_p2 <= std_logic_vector(unsigned(p_shl3_cast_reg_567) + unsigned(tmp1_cast_fu_300_p1));
    tmp_s_fu_549_p1 <= std_logic_vector(resize(unsigned(i_index_cast_fu_543_p1),64));
        w_index_cast_fu_546_p1 <= std_logic_vector(resize(signed(w_index_reg_667),32));

    w_index_fu_538_p2 <= std_logic_vector(unsigned(tmp8_reg_649) + unsigned(tmp9_cast_fu_534_p1));
    x_3_fu_289_p2 <= std_logic_vector(unsigned(x_reg_125) + unsigned(ap_const_lv4_1));
    x_cast_fu_279_p1 <= std_logic_vector(resize(unsigned(x_reg_125),6));
    y_3_fu_339_p2 <= std_logic_vector(unsigned(y_reg_137) + unsigned(ap_const_lv4_1));
    y_cast1_fu_329_p1 <= std_logic_vector(resize(unsigned(y_reg_137),9));
    y_cast_fu_325_p1 <= std_logic_vector(resize(unsigned(y_reg_137),12));
end behav;
