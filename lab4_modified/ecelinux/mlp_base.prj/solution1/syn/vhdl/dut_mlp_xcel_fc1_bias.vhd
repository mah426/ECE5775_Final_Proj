-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity dut_mlp_xcel_fc1_bias_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of dut_mlp_xcel_fc1_bias_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111011101010110111100110010110", 
    1 => "00111101010001000000110100001011", 
    2 => "00111100011100110010101111011100", 
    3 => "00111100110100100010111010100001", 
    4 => "10111101001011010001100111011111", 
    5 => "10111100101100100100010000100000", 
    6 => "00111100110110011101100110010000", 
    7 => "00111101001110110001001010010000", 
    8 => "10111100110110001000101000000101", 
    9 => "00111100001110001101100000100011", 
    10 => "00111101010001001111010011000111", 
    11 => "10111100101111111001000111100110", 
    12 => "00111101100000111011100010100010", 
    13 => "00111101001010111111001100111000", 
    14 => "10111101000001000001001001001001", 
    15 => "00111101011101011010101001110001", 
    16 => "00111101000000101000111101011100", 
    17 => "00111100011000001110001100000100", 
    18 => "00111100001011000100001011101010", 
    19 => "10111100000110000111110001100011", 
    20 => "10111100110000111011000011000100", 
    21 => "00111100000111001111000100111101", 
    22 => "00111101000000001110111100010011", 
    23 => "10111101001010001101000100001111", 
    24 => "00111101000100011100010010111001", 
    25 => "00111010010001001101111011000010", 
    26 => "10111101000000000000000100001100", 
    27 => "00111100011111000110110110100100", 
    28 => "10111101001001100101000001100001", 
    29 => "00111101000010110011110101001011", 
    30 => "00111100101111000101001101101101", 
    31 => "00111100011110001111110011010110", 
    32 => "10111101000111111000011011100100", 
    33 => "00111100101010001011110100100011", 
    34 => "10111011010110110110101000011111", 
    35 => "00111011011101011101001101010110", 
    36 => "00111100100101111100100000001000", 
    37 => "00111101000110111111101111011111", 
    38 => "10111100111001011100001011010010", 
    39 => "00111101001110100100111110000111", 
    40 => "00111100110111111010101010001011", 
    41 => "10111011011111011111001110110110", 
    42 => "10111011110101010110001010011110", 
    43 => "10111100110001011010001111100100", 
    44 => "00111100000111101101001110010101", 
    45 => "10111100101101001010111011001001", 
    46 => "00111100101111000110111010110001", 
    47 => "10111011111110011101001010111111", 
    48 => "10111100100010101010010000110011", 
    49 => "10111101000110111010001111001010", 
    50 => "10111101000001010100101011000011", 
    51 => "10111011001110110011110010000010", 
    52 => "00111100110110101101110110011100", 
    53 => "00111101100010110010101101110111", 
    54 => "00111100100010110010011000111001", 
    55 => "10111101011101101111100011110000", 
    56 => "10111101010110000010011001100111", 
    57 => "00111010001010111111011101101010", 
    58 => "00111101011101010100110100011111", 
    59 => "10111100111101110010001011100010", 
    60 => "00111100111010011110011111111011", 
    61 => "10111101011001100110101010011000", 
    62 => "00111101010111000110100011101100", 
    63 => "00111011100001101011110111110101", 
    64 => "10111100011001111011110000111100", 
    65 => "00111100111110001001101001000110", 
    66 => "10111101011001101010100110000010", 
    67 => "00111100111100110111011101011100", 
    68 => "10111101010000100110100110011100", 
    69 => "10111101001100000001101110000110", 
    70 => "00111101101111110000100110010110", 
    71 => "10111100100011101001101100111001", 
    72 => "00111101000111100001001110110010", 
    73 => "00111101101100001111001100000010", 
    74 => "00111100100110100001100110000111", 
    75 => "10111100101001010001010111001111", 
    76 => "00111101000101010000000000001101", 
    77 => "10111100001111110110000110101010", 
    78 => "00111100100100100100100011011000", 
    79 => "10111100000110100101011001011000", 
    80 => "00111100001011111000000101100010", 
    81 => "10111010111111010011101100101010", 
    82 => "00111100000110110100000100111010", 
    83 => "10111100000101010111010001110001", 
    84 => "10111100100010000101110100110001", 
    85 => "00111100000111101011001000000111", 
    86 => "00111011110100110100000101011011", 
    87 => "10111101000011101110011010111000", 
    88 => "10111011001011101011100000001111", 
    89 => "10111101000011011000101010011000", 
    90 => "10111101010101101010010110010100", 
    91 => "00111100000101101101110100100111", 
    92 => "10111100101011000100010100000010", 
    93 => "00111011101110111101001110000000", 
    94 => "10111011000110100011010011001010", 
    95 => "00111101010001011101110110010000", 
    96 => "10111101000011011111000101011010", 
    97 => "00111010110100111100111111110110", 
    98 => "00111100111101000010110111001111", 
    99 => "10111101000000111100011111010110", 
    100 => "10111101010001011101000011111010", 
    101 => "00111100011001000001100100011010", 
    102 => "00111101001101000100110101000100", 
    103 => "10111101000100100101110111010001", 
    104 => "00111010100111100011010000110011", 
    105 => "10111100000110100100100111000011", 
    106 => "10111011111110000011011110110101", 
    107 => "10111011111111110000000000100110", 
    108 => "10111100000111101000100000010110", 
    109 => "10111100001011110011000110110001", 
    110 => "10111100011101010110001000010111", 
    111 => "00111100000001010001101010000111", 
    112 => "10111101011000010100010010001001", 
    113 => "10111100101110010011011010000010", 
    114 => "00111100101111101101100101011010", 
    115 => "10111100011101111010110101001011", 
    116 => "10111101000000100111101101110000", 
    117 => "10111101010010000111011001011100", 
    118 => "00111100111111000100011111100101", 
    119 => "10111011100110100101011001011000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity dut_mlp_xcel_fc1_bias is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of dut_mlp_xcel_fc1_bias is
    component dut_mlp_xcel_fc1_bias_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    dut_mlp_xcel_fc1_bias_rom_U :  component dut_mlp_xcel_fc1_bias_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


