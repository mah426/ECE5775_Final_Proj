-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_max_pool is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    I : IN STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of dut_max_pool is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_800000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv12_C00 : STD_LOGIC_VECTOR (11 downto 0) := "110000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_30 : BOOLEAN;
    signal O_fu_236_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal O_reg_539 : STD_LOGIC_VECTOR (3 downto 0);
    signal O_cast10_cast1_fu_246_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal O_cast10_cast1_reg_545 : STD_LOGIC_VECTOR (10 downto 0);
    signal O_cast10_cast_fu_250_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal O_cast10_cast_reg_550 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_2_fu_260_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_67 : BOOLEAN;
    signal I_cast2_fu_271_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal I_cast2_reg_563 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond3_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal I_cast_fu_274_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal I_cast_reg_568 : STD_LOGIC_VECTOR (12 downto 0);
    signal next_mul_fu_277_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal next_mul_reg_573 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_85 : BOOLEAN;
    signal m_1_fu_292_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal m_1_reg_581 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_298_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_reg_586 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond7_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_cast6_fu_303_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal x_cast6_reg_591 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_101 : BOOLEAN;
    signal x_2_fu_312_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal x_2_reg_599 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_cast_fu_326_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_5_cast_reg_604 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond4_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_2_fu_339_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal y_2_reg_612 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_117 : BOOLEAN;
    signal tmp4_fu_354_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp4_reg_617 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond2_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal o_index_fu_359_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal o_index_reg_622 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_131 : BOOLEAN;
    signal tmp_6_cast_fu_371_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_cast_reg_627 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_cast4_fu_375_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal c_cast4_reg_632 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_142 : BOOLEAN;
    signal c_2_fu_385_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_2_reg_640 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_1_fu_405_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_1_reg_648 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_153 : BOOLEAN;
    signal tmp5_fu_417_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp5_reg_653 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp6_fu_425_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp6_reg_658 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_167 : BOOLEAN;
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_176 : BOOLEAN;
    signal input_load_reg_668 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_184 : BOOLEAN;
    signal tmp_26_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_reg_675 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_193 : BOOLEAN;
    signal max_2_fu_526_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_202 : BOOLEAN;
    signal i_reg_127 : STD_LOGIC_VECTOR (11 downto 0);
    signal m_reg_138 : STD_LOGIC_VECTOR (2 downto 0);
    signal phi_mul_reg_149 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_reg_161 : STD_LOGIC_VECTOR (3 downto 0);
    signal y_reg_172 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond1_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_reg_184 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_reg_197 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_1_reg_208 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_reg_220 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_266_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_391_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_439_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_298_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_298_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_318_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal y_cast5_fu_330_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_345_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp4_fu_354_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp4_fu_354_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_6_fu_363_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_cast3_fu_395_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp1_fu_411_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp6_fu_425_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp6_fu_425_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp2_fu_430_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_index_fu_434_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal input_load_to_int_fu_444_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_1_to_int_fu_461_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_447_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_fu_457_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_465_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_fu_475_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs4_fu_503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs3_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp4_fu_354_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp6_fu_425_p10 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_2_fu_298_p10 : STD_LOGIC_VECTOR (6 downto 0);

    component dut_fcmp_32ns_32ns_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    dut_fcmp_32ns_32ns_1_1_U6 : component dut_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => input_load_reg_668,
        din1 => max_1_reg_208,
        opcode => ap_const_lv5_2,
        dout => tmp_26_fu_231_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((ap_const_lv1_0 = exitcond_fu_399_p2)))) then 
                c_reg_197 <= c_2_reg_640;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
                c_reg_197 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    i_reg_127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond3_fu_254_p2 = ap_const_lv1_0))) then 
                i_reg_127 <= i_2_fu_260_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_127 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    m_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond3_fu_254_p2 = ap_const_lv1_0)))) then 
                m_reg_138 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond4_fu_307_p2)))) then 
                m_reg_138 <= m_1_reg_581;
            end if; 
        end if;
    end process;

    max_1_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
                max_1_reg_208 <= max_2_fu_526_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (ap_const_lv1_0 = exitcond1_fu_379_p2))) then 
                max_1_reg_208 <= max_reg_184;
            end if; 
        end if;
    end process;

    max_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((ap_const_lv1_0 = exitcond_fu_399_p2)))) then 
                max_reg_184 <= max_1_reg_208;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
                max_reg_184 <= ap_const_lv32_800000;
            end if; 
        end if;
    end process;

    phi_mul_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond3_fu_254_p2 = ap_const_lv1_0)))) then 
                phi_mul_reg_149 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond4_fu_307_p2)))) then 
                phi_mul_reg_149 <= next_mul_reg_573;
            end if; 
        end if;
    end process;

    r_reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
                r_reg_220 <= r_1_reg_648;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (ap_const_lv1_0 = exitcond1_fu_379_p2))) then 
                r_reg_220 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    x_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond2_fu_334_p2)))) then 
                x_reg_161 <= x_2_reg_599;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond7_fu_286_p2))) then 
                x_reg_161 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    y_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = exitcond1_fu_379_p2)))) then 
                y_reg_172 <= y_2_reg_612;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond4_fu_307_p2))) then 
                y_reg_172 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond3_fu_254_p2 = ap_const_lv1_0)))) then
                    I_cast2_reg_563(5 downto 0) <= I_cast2_fu_271_p1(5 downto 0);
                    I_cast_reg_568(5 downto 0) <= I_cast_fu_274_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                    O_cast10_cast1_reg_545(3 downto 0) <= O_cast10_cast1_fu_246_p1(3 downto 0);
                    O_cast10_cast_reg_550(3 downto 0) <= O_cast10_cast_fu_250_p1(3 downto 0);
                O_reg_539 <= I(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then
                c_2_reg_640 <= c_2_fu_385_p2;
                    c_cast4_reg_632(1 downto 0) <= c_cast4_fu_375_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then
                input_load_reg_668 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                m_1_reg_581 <= m_1_fu_292_p2;
                next_mul_reg_573 <= next_mul_fu_277_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                o_index_reg_622 <= o_index_fu_359_p2;
                    tmp_6_cast_reg_627(4 downto 1) <= tmp_6_cast_fu_371_p1(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then
                r_1_reg_648 <= r_1_fu_405_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond2_fu_334_p2))) then
                tmp4_reg_617 <= tmp4_fu_354_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and (ap_const_lv1_0 = exitcond_fu_399_p2))) then
                tmp5_reg_653 <= tmp5_fu_417_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then
                tmp6_reg_658 <= tmp6_fu_425_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then
                tmp_26_reg_675 <= tmp_26_fu_231_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond7_fu_286_p2))) then
                tmp_2_reg_586 <= tmp_2_fu_298_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond4_fu_307_p2))) then
                    tmp_5_cast_reg_604(4 downto 1) <= tmp_5_cast_fu_326_p1(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                x_2_reg_599 <= x_2_fu_312_p2;
                    x_cast6_reg_591(3 downto 0) <= x_cast6_fu_303_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                y_2_reg_612 <= y_2_fu_339_p2;
            end if;
        end if;
    end process;
    O_cast10_cast1_reg_545(10 downto 4) <= "0000000";
    O_cast10_cast_reg_550(6 downto 4) <= "000";
    I_cast2_reg_563(7 downto 6) <= "00";
    I_cast_reg_568(12 downto 6) <= "0000000";
    x_cast6_reg_591(10 downto 4) <= "0000000";
    tmp_5_cast_reg_604(0) <= '0';
    tmp_5_cast_reg_604(12 downto 5) <= "00000000";
    tmp_6_cast_reg_627(0) <= '0';
    tmp_6_cast_reg_627(7 downto 5) <= "000";
    c_cast4_reg_632(12 downto 2) <= "00000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond3_fu_254_p2, exitcond7_fu_286_p2, exitcond4_fu_307_p2, exitcond2_fu_334_p2, exitcond_fu_399_p2, exitcond1_fu_379_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond3_fu_254_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_lv1_0 = exitcond7_fu_286_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (not((ap_const_lv1_0 = exitcond4_fu_307_p2))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st5_fsm_4 => 
                if (not((ap_const_lv1_0 = exitcond2_fu_334_p2))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_379_p2))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                end if;
            when ap_ST_st8_fsm_7 => 
                if (not((ap_const_lv1_0 = exitcond_fu_399_p2))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                end if;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    I_cast2_fu_271_p1 <= std_logic_vector(resize(unsigned(I),8));
    I_cast_fu_274_p1 <= std_logic_vector(resize(unsigned(I),13));
    O_cast10_cast1_fu_246_p1 <= std_logic_vector(resize(unsigned(O_fu_236_p4),11));
    O_cast10_cast_fu_250_p1 <= std_logic_vector(resize(unsigned(O_fu_236_p4),7));
    O_fu_236_p4 <= I(4 downto 1);

    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st3_fsm_2, exitcond7_fu_286_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond7_fu_286_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, exitcond7_fu_286_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond7_fu_286_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_101_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_101 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_117_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_117 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_131_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_131 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_142_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_142 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    ap_sig_153_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_153 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    ap_sig_167_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_167 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    ap_sig_176_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_176 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    ap_sig_184_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_184 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    ap_sig_193_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_193 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    ap_sig_202_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_202 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    ap_sig_30_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_30 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_67_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_67 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_85_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_85 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_176)
    begin
        if (ap_sig_176) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_184)
    begin
        if (ap_sig_184) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_193)
    begin
        if (ap_sig_193) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_202)
    begin
        if (ap_sig_202) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_30)
    begin
        if (ap_sig_30) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_67)
    begin
        if (ap_sig_67) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_85)
    begin
        if (ap_sig_85) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_101)
    begin
        if (ap_sig_101) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_117)
    begin
        if (ap_sig_117) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_131)
    begin
        if (ap_sig_131) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_142)
    begin
        if (ap_sig_142) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_153)
    begin
        if (ap_sig_153) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_167)
    begin
        if (ap_sig_167) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    c_2_fu_385_p2 <= std_logic_vector(unsigned(c_reg_197) + unsigned(ap_const_lv2_1));
    c_cast4_fu_375_p1 <= std_logic_vector(resize(unsigned(c_reg_197),13));
    exitcond1_fu_379_p2 <= "1" when (c_reg_197 = ap_const_lv2_2) else "0";
    exitcond2_fu_334_p2 <= "1" when (y_reg_172 = O_reg_539) else "0";
    exitcond3_fu_254_p2 <= "1" when (i_reg_127 = ap_const_lv12_C00) else "0";
    exitcond4_fu_307_p2 <= "1" when (x_reg_161 = O_reg_539) else "0";
    exitcond7_fu_286_p2 <= "1" when (m_reg_138 = ap_const_lv3_6) else "0";
    exitcond_fu_399_p2 <= "1" when (r_reg_220 = ap_const_lv2_2) else "0";
    i_2_fu_260_p2 <= std_logic_vector(unsigned(i_reg_127) + unsigned(ap_const_lv12_1));
    i_index_fu_434_p2 <= std_logic_vector(unsigned(c_cast4_reg_632) + unsigned(tmp2_fu_430_p2));
    input_load_to_int_fu_444_p1 <= input_load_reg_668;
    input_r_address0 <= tmp_1_fu_439_p1(13 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_sig_cseq_ST_st10_fsm_9)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_1_fu_292_p2 <= std_logic_vector(unsigned(m_reg_138) + unsigned(ap_const_lv3_1));
    max_1_to_int_fu_461_p1 <= max_1_reg_208;
    max_2_fu_526_p3 <= 
        input_load_reg_668 when (tmp_27_fu_521_p2(0) = '1') else 
        max_1_reg_208;
    next_mul_fu_277_p2 <= std_logic_vector(unsigned(phi_mul_reg_149) + unsigned(I_cast2_reg_563));
    notlhs3_fu_497_p2 <= "0" when (tmp_21_fu_465_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_479_p2 <= "0" when (tmp_19_fu_447_p4 = ap_const_lv8_FF) else "1";
    notrhs4_fu_503_p2 <= "1" when (tmp_22_fu_475_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_485_p2 <= "1" when (tmp_20_fu_457_p1 = ap_const_lv23_0) else "0";
    o_index_fu_359_p2 <= std_logic_vector(unsigned(x_cast6_reg_591) + unsigned(tmp4_reg_617));

    output_r_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st7_fsm_6, tmp_s_fu_266_p1, tmp_7_fu_391_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            output_r_address0 <= tmp_7_fu_391_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            output_r_address0 <= tmp_s_fu_266_p1(13 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st7_fsm_6, max_reg_184)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            output_r_d0 <= max_reg_184;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            output_r_d0 <= ap_const_lv32_0;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond3_fu_254_p2, ap_sig_cseq_ST_st7_fsm_6, exitcond1_fu_379_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond3_fu_254_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = exitcond1_fu_379_p2))))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_1_fu_405_p2 <= std_logic_vector(unsigned(r_reg_220) + unsigned(ap_const_lv2_1));
    r_cast3_fu_395_p1 <= std_logic_vector(resize(unsigned(r_reg_220),8));
    tmp1_fu_411_p2 <= std_logic_vector(unsigned(r_cast3_fu_395_p1) + unsigned(phi_mul_reg_149));
    tmp2_fu_430_p2 <= std_logic_vector(unsigned(tmp6_reg_658) + unsigned(tmp_5_cast_reg_604));
    tmp4_fu_354_p0 <= O_cast10_cast1_reg_545(4 - 1 downto 0);
    tmp4_fu_354_p1 <= tmp4_fu_354_p10(7 - 1 downto 0);
    tmp4_fu_354_p10 <= std_logic_vector(resize(unsigned(tmp_fu_345_p2),11));
    tmp4_fu_354_p2 <= std_logic_vector(resize(unsigned(tmp4_fu_354_p0) * unsigned(tmp4_fu_354_p1), 11));
    tmp5_fu_417_p2 <= std_logic_vector(unsigned(tmp_6_cast_reg_627) + unsigned(tmp1_fu_411_p2));
    tmp6_fu_425_p0 <= I_cast_reg_568(6 - 1 downto 0);
    tmp6_fu_425_p1 <= tmp6_fu_425_p10(8 - 1 downto 0);
    tmp6_fu_425_p10 <= std_logic_vector(resize(unsigned(tmp5_reg_653),13));
    tmp6_fu_425_p2 <= std_logic_vector(resize(unsigned(tmp6_fu_425_p0) * unsigned(tmp6_fu_425_p1), 13));
    tmp_19_fu_447_p4 <= input_load_to_int_fu_444_p1(30 downto 23);
    tmp_1_fu_439_p1 <= std_logic_vector(resize(unsigned(i_index_fu_434_p2),64));
    tmp_20_fu_457_p1 <= input_load_to_int_fu_444_p1(23 - 1 downto 0);
    tmp_21_fu_465_p4 <= max_1_to_int_fu_461_p1(30 downto 23);
    tmp_22_fu_475_p1 <= max_1_to_int_fu_461_p1(23 - 1 downto 0);
    tmp_23_fu_491_p2 <= (notrhs_fu_485_p2 or notlhs_fu_479_p2);
    tmp_24_fu_509_p2 <= (notrhs4_fu_503_p2 or notlhs3_fu_497_p2);
    tmp_25_fu_515_p2 <= (tmp_23_fu_491_p2 and tmp_24_fu_509_p2);
    tmp_27_fu_521_p2 <= (tmp_25_fu_515_p2 and tmp_26_reg_675);
    tmp_2_fu_298_p0 <= O_cast10_cast_reg_550(4 - 1 downto 0);
    tmp_2_fu_298_p1 <= tmp_2_fu_298_p10(3 - 1 downto 0);
    tmp_2_fu_298_p10 <= std_logic_vector(resize(unsigned(m_reg_138),7));
    tmp_2_fu_298_p2 <= std_logic_vector(resize(unsigned(tmp_2_fu_298_p0) * unsigned(tmp_2_fu_298_p1), 7));
    tmp_5_cast_fu_326_p1 <= std_logic_vector(resize(unsigned(tmp_5_fu_318_p3),13));
    tmp_5_fu_318_p3 <= (x_reg_161 & ap_const_lv1_0);
    tmp_6_cast_fu_371_p1 <= std_logic_vector(resize(unsigned(tmp_6_fu_363_p3),8));
    tmp_6_fu_363_p3 <= (y_reg_172 & ap_const_lv1_0);
    tmp_7_fu_391_p1 <= std_logic_vector(resize(unsigned(o_index_reg_622),64));
    tmp_fu_345_p2 <= std_logic_vector(unsigned(tmp_2_reg_586) + unsigned(y_cast5_fu_330_p1));
    tmp_s_fu_266_p1 <= std_logic_vector(resize(unsigned(i_reg_127),64));
    x_2_fu_312_p2 <= std_logic_vector(unsigned(x_reg_161) + unsigned(ap_const_lv4_1));
    x_cast6_fu_303_p1 <= std_logic_vector(resize(unsigned(x_reg_161),11));
    y_2_fu_339_p2 <= std_logic_vector(unsigned(y_reg_172) + unsigned(ap_const_lv4_1));
    y_cast5_fu_330_p1 <= std_logic_vector(resize(unsigned(y_reg_172),7));
end behav;
