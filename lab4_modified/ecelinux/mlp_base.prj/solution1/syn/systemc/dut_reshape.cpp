// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "dut_reshape.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic dut_reshape::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic dut_reshape::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> dut_reshape::ap_ST_st1_fsm_0 = "1";
const sc_lv<6> dut_reshape::ap_ST_st2_fsm_1 = "10";
const sc_lv<6> dut_reshape::ap_ST_st3_fsm_2 = "100";
const sc_lv<6> dut_reshape::ap_ST_st4_fsm_3 = "1000";
const sc_lv<6> dut_reshape::ap_ST_st5_fsm_4 = "10000";
const sc_lv<6> dut_reshape::ap_ST_st6_fsm_5 = "100000";
const sc_lv<32> dut_reshape::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> dut_reshape::ap_const_lv1_1 = "1";
const sc_lv<32> dut_reshape::ap_const_lv32_1 = "1";
const sc_lv<32> dut_reshape::ap_const_lv32_2 = "10";
const sc_lv<1> dut_reshape::ap_const_lv1_0 = "0";
const sc_lv<32> dut_reshape::ap_const_lv32_3 = "11";
const sc_lv<32> dut_reshape::ap_const_lv32_4 = "100";
const sc_lv<9> dut_reshape::ap_const_lv9_0 = "000000000";
const sc_lv<3> dut_reshape::ap_const_lv3_0 = "000";
const sc_lv<32> dut_reshape::ap_const_lv32_5 = "101";
const sc_lv<9> dut_reshape::ap_const_lv9_190 = "110010000";
const sc_lv<9> dut_reshape::ap_const_lv9_1 = "1";
const sc_lv<3> dut_reshape::ap_const_lv3_5 = "101";
const sc_lv<3> dut_reshape::ap_const_lv3_1 = "1";
const sc_lv<2> dut_reshape::ap_const_lv2_0 = "00";
const sc_lv<14> dut_reshape::ap_const_lv14_190 = "110010000";
const sc_lv<14> dut_reshape::ap_const_lv14_1260 = "1001001100000";

dut_reshape::dut_reshape(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond2_fu_111_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond2_fu_111_p2 );

    SC_METHOD(thread_ap_sig_124);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_48);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_59);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_76);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_92);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_23 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_48 );

    SC_METHOD(thread_ap_sig_cseq_ST_st3_fsm_2);
    sensitive << ( ap_sig_59 );

    SC_METHOD(thread_ap_sig_cseq_ST_st4_fsm_3);
    sensitive << ( ap_sig_76 );

    SC_METHOD(thread_ap_sig_cseq_ST_st5_fsm_4);
    sensitive << ( ap_sig_92 );

    SC_METHOD(thread_ap_sig_cseq_ST_st6_fsm_5);
    sensitive << ( ap_sig_124 );

    SC_METHOD(thread_c_1_fu_117_p2);
    sensitive << ( c_reg_73 );

    SC_METHOD(thread_c_cast7_fu_107_p1);
    sensitive << ( c_reg_73 );

    SC_METHOD(thread_exitcond1_fu_123_p2);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( y_reg_85 );

    SC_METHOD(thread_exitcond2_fu_111_p2);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( c_reg_73 );

    SC_METHOD(thread_exitcond_fu_151_p2);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( x_reg_96 );

    SC_METHOD(thread_i_index_fu_188_p2);
    sensitive << ( tmp_2_cast_reg_237 );
    sensitive << ( tmp1_fu_178_p4 );

    SC_METHOD(thread_input_r_address0);
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );
    sensitive << ( tmp_8_fu_203_p1 );

    SC_METHOD(thread_input_r_ce0);
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );

    SC_METHOD(thread_o_index_fu_193_p2);
    sensitive << ( c_cast7_reg_211 );
    sensitive << ( tmp_5_reg_250 );

    SC_METHOD(thread_output_r_address0);
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );
    sensitive << ( tmp_9_fu_207_p1 );

    SC_METHOD(thread_output_r_ce0);
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );

    SC_METHOD(thread_output_r_d0);
    sensitive << ( input_r_q0 );
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );

    SC_METHOD(thread_output_r_we0);
    sensitive << ( tmp_7_reg_265 );
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );

    SC_METHOD(thread_tmp1_fu_178_p4);
    sensitive << ( c_reg_73 );
    sensitive << ( x_reg_96 );

    SC_METHOD(thread_tmp_2_cast_fu_143_p1);
    sensitive << ( tmp_2_fu_135_p3 );

    SC_METHOD(thread_tmp_2_fu_135_p3);
    sensitive << ( y_reg_85 );

    SC_METHOD(thread_tmp_4_fu_163_p2);
    sensitive << ( tmp_2_reg_232 );
    sensitive << ( x_cast3_fu_147_p1 );

    SC_METHOD(thread_tmp_5_fu_172_p0);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( tmp_5_fu_172_p00 );

    SC_METHOD(thread_tmp_5_fu_172_p00);
    sensitive << ( tmp_4_fu_163_p2 );

    SC_METHOD(thread_tmp_5_fu_172_p2);
    sensitive << ( tmp_5_fu_172_p0 );

    SC_METHOD(thread_tmp_7_fu_197_p2);
    sensitive << ( o_index_fu_193_p2 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );

    SC_METHOD(thread_tmp_8_fu_203_p1);
    sensitive << ( i_index_reg_255 );

    SC_METHOD(thread_tmp_9_fu_207_p1);
    sensitive << ( o_index_reg_260 );

    SC_METHOD(thread_x_1_fu_157_p2);
    sensitive << ( x_reg_96 );

    SC_METHOD(thread_x_cast3_fu_147_p1);
    sensitive << ( x_reg_96 );

    SC_METHOD(thread_y_1_fu_129_p2);
    sensitive << ( y_reg_85 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond1_fu_123_p2 );
    sensitive << ( exitcond_fu_151_p2 );
    sensitive << ( exitcond2_fu_111_p2 );

    ap_CS_fsm = "000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "dut_reshape_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, input_r_address0, "(port)input_r_address0");
    sc_trace(mVcdFile, input_r_ce0, "(port)input_r_ce0");
    sc_trace(mVcdFile, input_r_q0, "(port)input_r_q0");
    sc_trace(mVcdFile, output_r_address0, "(port)output_r_address0");
    sc_trace(mVcdFile, output_r_ce0, "(port)output_r_ce0");
    sc_trace(mVcdFile, output_r_we0, "(port)output_r_we0");
    sc_trace(mVcdFile, output_r_d0, "(port)output_r_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_23, "ap_sig_23");
    sc_trace(mVcdFile, c_cast7_fu_107_p1, "c_cast7_fu_107_p1");
    sc_trace(mVcdFile, c_cast7_reg_211, "c_cast7_reg_211");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_48, "ap_sig_48");
    sc_trace(mVcdFile, c_1_fu_117_p2, "c_1_fu_117_p2");
    sc_trace(mVcdFile, c_1_reg_219, "c_1_reg_219");
    sc_trace(mVcdFile, y_1_fu_129_p2, "y_1_fu_129_p2");
    sc_trace(mVcdFile, y_1_reg_227, "y_1_reg_227");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st3_fsm_2, "ap_sig_cseq_ST_st3_fsm_2");
    sc_trace(mVcdFile, ap_sig_59, "ap_sig_59");
    sc_trace(mVcdFile, tmp_2_fu_135_p3, "tmp_2_fu_135_p3");
    sc_trace(mVcdFile, tmp_2_reg_232, "tmp_2_reg_232");
    sc_trace(mVcdFile, exitcond1_fu_123_p2, "exitcond1_fu_123_p2");
    sc_trace(mVcdFile, tmp_2_cast_fu_143_p1, "tmp_2_cast_fu_143_p1");
    sc_trace(mVcdFile, tmp_2_cast_reg_237, "tmp_2_cast_reg_237");
    sc_trace(mVcdFile, x_1_fu_157_p2, "x_1_fu_157_p2");
    sc_trace(mVcdFile, x_1_reg_245, "x_1_reg_245");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st4_fsm_3, "ap_sig_cseq_ST_st4_fsm_3");
    sc_trace(mVcdFile, ap_sig_76, "ap_sig_76");
    sc_trace(mVcdFile, tmp_5_fu_172_p2, "tmp_5_fu_172_p2");
    sc_trace(mVcdFile, tmp_5_reg_250, "tmp_5_reg_250");
    sc_trace(mVcdFile, exitcond_fu_151_p2, "exitcond_fu_151_p2");
    sc_trace(mVcdFile, i_index_fu_188_p2, "i_index_fu_188_p2");
    sc_trace(mVcdFile, i_index_reg_255, "i_index_reg_255");
    sc_trace(mVcdFile, o_index_fu_193_p2, "o_index_fu_193_p2");
    sc_trace(mVcdFile, o_index_reg_260, "o_index_reg_260");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st5_fsm_4, "ap_sig_cseq_ST_st5_fsm_4");
    sc_trace(mVcdFile, ap_sig_92, "ap_sig_92");
    sc_trace(mVcdFile, tmp_7_fu_197_p2, "tmp_7_fu_197_p2");
    sc_trace(mVcdFile, tmp_7_reg_265, "tmp_7_reg_265");
    sc_trace(mVcdFile, c_reg_73, "c_reg_73");
    sc_trace(mVcdFile, y_reg_85, "y_reg_85");
    sc_trace(mVcdFile, exitcond2_fu_111_p2, "exitcond2_fu_111_p2");
    sc_trace(mVcdFile, x_reg_96, "x_reg_96");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st6_fsm_5, "ap_sig_cseq_ST_st6_fsm_5");
    sc_trace(mVcdFile, ap_sig_124, "ap_sig_124");
    sc_trace(mVcdFile, tmp_8_fu_203_p1, "tmp_8_fu_203_p1");
    sc_trace(mVcdFile, tmp_9_fu_207_p1, "tmp_9_fu_207_p1");
    sc_trace(mVcdFile, x_cast3_fu_147_p1, "x_cast3_fu_147_p1");
    sc_trace(mVcdFile, tmp_4_fu_163_p2, "tmp_4_fu_163_p2");
    sc_trace(mVcdFile, tmp_5_fu_172_p0, "tmp_5_fu_172_p0");
    sc_trace(mVcdFile, tmp1_fu_178_p4, "tmp1_fu_178_p4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, tmp_5_fu_172_p00, "tmp_5_fu_172_p00");
#endif

    }
}

dut_reshape::~dut_reshape() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void dut_reshape::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
         !esl_seteq<1,1,1>(exitcond1_fu_123_p2.read(), ap_const_lv1_0))) {
        c_reg_73 = c_1_reg_219.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        c_reg_73 = ap_const_lv9_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read())) {
        x_reg_96 = x_1_reg_245.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
                esl_seteq<1,1,1>(exitcond1_fu_123_p2.read(), ap_const_lv1_0))) {
        x_reg_96 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_151_p2.read()))) {
        y_reg_85 = y_1_reg_227.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_111_p2.read()))) {
        y_reg_85 = ap_const_lv3_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        c_1_reg_219 = c_1_fu_117_p2.read();
        c_cast7_reg_211 = c_cast7_fu_107_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_151_p2.read()))) {
        i_index_reg_255 = i_index_fu_188_p2.read();
        tmp_5_reg_250 = tmp_5_fu_172_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read())) {
        o_index_reg_260 = o_index_fu_193_p2.read();
        tmp_7_reg_265 = tmp_7_fu_197_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && esl_seteq<1,1,1>(exitcond1_fu_123_p2.read(), ap_const_lv1_0))) {
        tmp_2_cast_reg_237 = tmp_2_cast_fu_143_p1.read();
        tmp_2_reg_232 = tmp_2_fu_135_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        x_1_reg_245 = x_1_fu_157_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        y_1_reg_227 = y_1_fu_129_p2.read();
    }
}

void dut_reshape::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_111_p2.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void dut_reshape::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void dut_reshape::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_111_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void dut_reshape::thread_ap_sig_124() {
    ap_sig_124 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(5, 5));
}

void dut_reshape::thread_ap_sig_23() {
    ap_sig_23 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void dut_reshape::thread_ap_sig_48() {
    ap_sig_48 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void dut_reshape::thread_ap_sig_59() {
    ap_sig_59 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(2, 2));
}

void dut_reshape::thread_ap_sig_76() {
    ap_sig_76 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(3, 3));
}

void dut_reshape::thread_ap_sig_92() {
    ap_sig_92 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(4, 4));
}

void dut_reshape::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_23.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void dut_reshape::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_48.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void dut_reshape::thread_ap_sig_cseq_ST_st3_fsm_2() {
    if (ap_sig_59.read()) {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    }
}

void dut_reshape::thread_ap_sig_cseq_ST_st4_fsm_3() {
    if (ap_sig_76.read()) {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    }
}

void dut_reshape::thread_ap_sig_cseq_ST_st5_fsm_4() {
    if (ap_sig_92.read()) {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    }
}

void dut_reshape::thread_ap_sig_cseq_ST_st6_fsm_5() {
    if (ap_sig_124.read()) {
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    }
}

void dut_reshape::thread_c_1_fu_117_p2() {
    c_1_fu_117_p2 = (!c_reg_73.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(c_reg_73.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void dut_reshape::thread_c_cast7_fu_107_p1() {
    c_cast7_fu_107_p1 = esl_zext<14,9>(c_reg_73.read());
}

void dut_reshape::thread_exitcond1_fu_123_p2() {
    exitcond1_fu_123_p2 = (!y_reg_85.read().is_01() || !ap_const_lv3_5.is_01())? sc_lv<1>(): sc_lv<1>(y_reg_85.read() == ap_const_lv3_5);
}

void dut_reshape::thread_exitcond2_fu_111_p2() {
    exitcond2_fu_111_p2 = (!c_reg_73.read().is_01() || !ap_const_lv9_190.is_01())? sc_lv<1>(): sc_lv<1>(c_reg_73.read() == ap_const_lv9_190);
}

void dut_reshape::thread_exitcond_fu_151_p2() {
    exitcond_fu_151_p2 = (!x_reg_96.read().is_01() || !ap_const_lv3_5.is_01())? sc_lv<1>(): sc_lv<1>(x_reg_96.read() == ap_const_lv3_5);
}

void dut_reshape::thread_i_index_fu_188_p2() {
    i_index_fu_188_p2 = (!tmp1_fu_178_p4.read().is_01() || !tmp_2_cast_reg_237.read().is_01())? sc_lv<13>(): (sc_biguint<13>(tmp1_fu_178_p4.read()) + sc_biguint<13>(tmp_2_cast_reg_237.read()));
}

void dut_reshape::thread_input_r_address0() {
    input_r_address0 =  (sc_lv<13>) (tmp_8_fu_203_p1.read());
}

void dut_reshape::thread_input_r_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read())) {
        input_r_ce0 = ap_const_logic_1;
    } else {
        input_r_ce0 = ap_const_logic_0;
    }
}

void dut_reshape::thread_o_index_fu_193_p2() {
    o_index_fu_193_p2 = (!tmp_5_reg_250.read().is_01() || !c_cast7_reg_211.read().is_01())? sc_lv<14>(): (sc_biguint<14>(tmp_5_reg_250.read()) + sc_biguint<14>(c_cast7_reg_211.read()));
}

void dut_reshape::thread_output_r_address0() {
    output_r_address0 =  (sc_lv<13>) (tmp_9_fu_207_p1.read());
}

void dut_reshape::thread_output_r_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read())) {
        output_r_ce0 = ap_const_logic_1;
    } else {
        output_r_ce0 = ap_const_logic_0;
    }
}

void dut_reshape::thread_output_r_d0() {
    output_r_d0 = input_r_q0.read();
}

void dut_reshape::thread_output_r_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read()) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_reg_265.read())))) {
        output_r_we0 = ap_const_logic_1;
    } else {
        output_r_we0 = ap_const_logic_0;
    }
}

void dut_reshape::thread_tmp1_fu_178_p4() {
    tmp1_fu_178_p4 = esl_concat<10,3>(esl_concat<9,1>(c_reg_73.read(), ap_const_lv1_0), x_reg_96.read());
}

void dut_reshape::thread_tmp_2_cast_fu_143_p1() {
    tmp_2_cast_fu_143_p1 = esl_zext<13,5>(tmp_2_fu_135_p3.read());
}

void dut_reshape::thread_tmp_2_fu_135_p3() {
    tmp_2_fu_135_p3 = esl_concat<3,2>(y_reg_85.read(), ap_const_lv2_0);
}

void dut_reshape::thread_tmp_4_fu_163_p2() {
    tmp_4_fu_163_p2 = (!x_cast3_fu_147_p1.read().is_01() || !tmp_2_reg_232.read().is_01())? sc_lv<5>(): (sc_biguint<5>(x_cast3_fu_147_p1.read()) + sc_biguint<5>(tmp_2_reg_232.read()));
}

void dut_reshape::thread_tmp_5_fu_172_p0() {
    tmp_5_fu_172_p0 =  (sc_lv<5>) (tmp_5_fu_172_p00.read());
}

void dut_reshape::thread_tmp_5_fu_172_p00() {
    tmp_5_fu_172_p00 = esl_zext<14,5>(tmp_4_fu_163_p2.read());
}

void dut_reshape::thread_tmp_5_fu_172_p2() {
    tmp_5_fu_172_p2 = (!tmp_5_fu_172_p0.read().is_01() || !ap_const_lv14_190.is_01())? sc_lv<14>(): sc_biguint<5>(tmp_5_fu_172_p0.read()) * sc_biguint<14>(ap_const_lv14_190);
}

void dut_reshape::thread_tmp_7_fu_197_p2() {
    tmp_7_fu_197_p2 = (!o_index_fu_193_p2.read().is_01() || !ap_const_lv14_1260.is_01())? sc_lv<1>(): (sc_biguint<14>(o_index_fu_193_p2.read()) < sc_biguint<14>(ap_const_lv14_1260));
}

void dut_reshape::thread_tmp_8_fu_203_p1() {
    tmp_8_fu_203_p1 = esl_zext<64,13>(i_index_reg_255.read());
}

void dut_reshape::thread_tmp_9_fu_207_p1() {
    tmp_9_fu_207_p1 = esl_zext<64,14>(o_index_reg_260.read());
}

void dut_reshape::thread_x_1_fu_157_p2() {
    x_1_fu_157_p2 = (!x_reg_96.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(x_reg_96.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void dut_reshape::thread_x_cast3_fu_147_p1() {
    x_cast3_fu_147_p1 = esl_zext<5,3>(x_reg_96.read());
}

void dut_reshape::thread_y_1_fu_129_p2() {
    y_1_fu_129_p2 = (!y_reg_85.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(y_reg_85.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void dut_reshape::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_111_p2.read())) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        case 4 : 
            if (!esl_seteq<1,1,1>(exitcond1_fu_123_p2.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st4_fsm_3;
            }
            break;
        case 8 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_151_p2.read())) {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            } else {
                ap_NS_fsm = ap_ST_st5_fsm_4;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_st6_fsm_5;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
            break;
        default : 
            ap_NS_fsm = "XXXXXX";
            break;
    }
}

}

