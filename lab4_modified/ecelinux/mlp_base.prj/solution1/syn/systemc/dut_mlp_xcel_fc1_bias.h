// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __dut_mlp_xcel_fc1_bias_H__
#define __dut_mlp_xcel_fc1_bias_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct dut_mlp_xcel_fc1_bias_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(dut_mlp_xcel_fc1_bias_ram) {
        ram[0] = "0b00111101001101110111010110010000";
        ram[1] = "0b10111011000110000100100010011110";
        ram[2] = "0b10111010111100111110001010011001";
        ram[3] = "0b00111100111111101001111111100010";
        ram[4] = "0b10111100001011010011100000011000";
        ram[5] = "0b00111101100011100001011110111001";
        ram[6] = "0b00111100001010011111100011100000";
        ram[7] = "0b00111110000001000100000000110010";
        ram[8] = "0b10111101010100111010011101100000";
        ram[9] = "0b10111100100110001011000000110110";
        ram[10] = "0b00111100001111110101011010010110";
        ram[11] = "0b10111100001111101000001101100010";
        ram[12] = "0b00111101000001001011100001111101";
        ram[13] = "0b10111101011000111111101010101100";
        ram[14] = "0b00111101001111010110101111111000";
        ram[15] = "0b10111101000001011101111111100011";
        ram[16] = "0b10111101011000101110100100010110";
        ram[17] = "0b10111100100101011010100101010100";
        ram[18] = "0b00111011010110111010010110100000";
        ram[19] = "0b00111101011110111100011010111010";
        ram[20] = "0b00111100100101011101011000100100";
        ram[21] = "0b00111100101110101101101000111010";
        ram[22] = "0b10111100001111101100110010001100";
        ram[23] = "0b00111110000000011011000101110010";
        ram[24] = "0b00111100111010110101101000101101";
        ram[25] = "0b00111101100000000000010110110000";
        ram[26] = "0b00111100011101000000010111100100";
        ram[27] = "0b00111101110110011011000111011011";
        ram[28] = "0b10111101010111110100011110001110";
        ram[29] = "0b10111101100000000110101011000101";
        ram[30] = "0b00111110000111011101011110010101";
        ram[31] = "0b10111100010000010001100110001100";
        ram[32] = "0b10111011110011111100110101000011";
        ram[33] = "0b10111100110001010001010001000100";
        ram[34] = "0b10111100110000001101101100000111";
        ram[35] = "0b00111101110110000001100111100000";
        ram[36] = "0b10111100101110101100101010100001";
        ram[37] = "0b10111100101000101001001101000001";
        ram[38] = "0b00111101011011110011110001111100";
        ram[39] = "0b00111010100001000010010000011001";
        ram[40] = "0b00111100101101100100110100001101";
        ram[41] = "0b10111100101100001001100111101111";
        ram[42] = "0b00111011110011110011000110101001";
        ram[43] = "0b00111100101101010100001111101100";
        ram[44] = "0b10111100001010101110000001111111";
        ram[45] = "0b10111011101100000000001110100111";
        ram[46] = "0b10111101001100010011001101001101";
        ram[47] = "0b00111101001111010111110111000000";
        ram[48] = "0b10111100100000001101001110010011";
        ram[49] = "0b00111100001011100011010101001110";
        ram[50] = "0b10111010000111000110101000100001";
        ram[51] = "0b00111100101111011000010110101000";
        ram[52] = "0b00111101100001001010110101001101";
        ram[53] = "0b00111101010011011000110110110011";
        ram[54] = "0b00111100100001100000100110000000";
        ram[55] = "0b00111101011011011100110000001110";
        ram[56] = "0b00111100111011011000011101001001";
        ram[57] = "0b00111101101000011001111010101011";
        ram[58] = "0b10111100111111010110111101010110";
        ram[59] = "0b00111101101100110000101101011001";
        ram[60] = "0b10111100111000111110010001010101";
        ram[61] = "0b00111100100100111110001001100010";
        ram[62] = "0b00111100000000111010010110110011";
        ram[63] = "0b00111100110111100011000111011011";
        ram[64] = "0b00111101001011010000011111011111";
        ram[65] = "0b00111100010100011001011010111011";
        ram[66] = "0b10111100110010101001101110100000";
        ram[67] = "0b10111100001011111110010001010110";
        ram[68] = "0b00111100100001011010101100011010";
        ram[69] = "0b00111101000000011110010010101011";
        ram[70] = "0b10111101010111111011010010011011";
        ram[71] = "0b00111011111110010101111001100010";
        ram[72] = "0b10111100000010110001111000010010";
        ram[73] = "0b10111101100010001011000101110011";
        ram[74] = "0b10111101000100110011010111001110";
        ram[75] = "0b00111101010111010111110101010100";
        ram[76] = "0b10111011111101101100110000010001";
        ram[77] = "0b10111101000100000010011000011110";
        ram[78] = "0b00111101001110101001001111001010";
        ram[79] = "0b10111011010011010110001110111001";
        ram[80] = "0b10111100101001001111000111001101";
        ram[81] = "0b00111101001110010010110110000101";
        ram[82] = "0b00111011011001110101011000111010";
        ram[83] = "0b00111100011000000100001010101010";
        ram[84] = "0b10111101000100100110010100101101";
        ram[85] = "0b10111100010111100011010111100001";
        ram[86] = "0b10111101000101011100100000110000";
        ram[87] = "0b10111101000110011110001110111110";
        ram[88] = "0b10111100100010010000001011010000";
        ram[89] = "0b00111100110001010001000000100000";
        ram[90] = "0b00111011111101111111001010100000";
        ram[91] = "0b10111100111111010100101110110011";
        ram[92] = "0b00111101001011001001010111100110";
        ram[93] = "0b00111011000100101111101001001010";
        ram[94] = "0b10111101101110011010011100001000";
        ram[95] = "0b00111101110010010110110010001110";
        ram[96] = "0b00111101011110010010110100011000";
        ram[97] = "0b00111101100001111000111101111010";
        ram[98] = "0b10111100101101010000000101011000";
        ram[99] = "0b00111101011000010111100000010001";
        ram[100] = "0b10111101010100011011110100110011";
        ram[101] = "0b00111101101100000100111100001111";
        ram[102] = "0b10111101001001000000101000100111";
        ram[103] = "0b10111100000100001101011110100000";
        ram[104] = "0b00111100100010101101001010000000";
        ram[105] = "0b00111101001111101000001101001010";
        ram[106] = "0b10111100101010101111100010010111";
        ram[107] = "0b00111100100001111111101001110011";
        ram[108] = "0b10111011011100011101001001111101";
        ram[109] = "0b00111100110100010000110001010100";
        ram[110] = "0b00111100110111111110111000001100";
        ram[111] = "0b10111101011010110000001101100101";
        ram[112] = "0b00111101001100111100011010110000";
        ram[113] = "0b10111100111100101111111000101111";
        ram[114] = "0b10111100100011110110001110011100";
        ram[115] = "0b10111101000111011011000000011001";
        ram[116] = "0b10111011101001110101010001111111";
        ram[117] = "0b00111100100101100101111001101000";
        ram[118] = "0b00111100010100100011101001001001";
        ram[119] = "0b10111100011010111011000010100111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(dut_mlp_xcel_fc1_bias) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


dut_mlp_xcel_fc1_bias_ram* meminst;


SC_CTOR(dut_mlp_xcel_fc1_bias) {
meminst = new dut_mlp_xcel_fc1_bias_ram("dut_mlp_xcel_fc1_bias_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~dut_mlp_xcel_fc1_bias() {
    delete meminst;
}


};//endmodule
#endif
