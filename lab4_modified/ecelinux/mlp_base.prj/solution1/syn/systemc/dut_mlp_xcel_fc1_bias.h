// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __dut_mlp_xcel_fc1_bias_H__
#define __dut_mlp_xcel_fc1_bias_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct dut_mlp_xcel_fc1_bias_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(dut_mlp_xcel_fc1_bias_ram) {
        ram[0] = "0b00111011101010110111100110010110";
        ram[1] = "0b00111101010001000000110100001011";
        ram[2] = "0b00111100011100110010101111011100";
        ram[3] = "0b00111100110100100010111010100001";
        ram[4] = "0b10111101001011010001100111011111";
        ram[5] = "0b10111100101100100100010000100000";
        ram[6] = "0b00111100110110011101100110010000";
        ram[7] = "0b00111101001110110001001010010000";
        ram[8] = "0b10111100110110001000101000000101";
        ram[9] = "0b00111100001110001101100000100011";
        ram[10] = "0b00111101010001001111010011000111";
        ram[11] = "0b10111100101111111001000111100110";
        ram[12] = "0b00111101100000111011100010100010";
        ram[13] = "0b00111101001010111111001100111000";
        ram[14] = "0b10111101000001000001001001001001";
        ram[15] = "0b00111101011101011010101001110001";
        ram[16] = "0b00111101000000101000111101011100";
        ram[17] = "0b00111100011000001110001100000100";
        ram[18] = "0b00111100001011000100001011101010";
        ram[19] = "0b10111100000110000111110001100011";
        ram[20] = "0b10111100110000111011000011000100";
        ram[21] = "0b00111100000111001111000100111101";
        ram[22] = "0b00111101000000001110111100010011";
        ram[23] = "0b10111101001010001101000100001111";
        ram[24] = "0b00111101000100011100010010111001";
        ram[25] = "0b00111010010001001101111011000010";
        ram[26] = "0b10111101000000000000000100001100";
        ram[27] = "0b00111100011111000110110110100100";
        ram[28] = "0b10111101001001100101000001100001";
        ram[29] = "0b00111101000010110011110101001011";
        ram[30] = "0b00111100101111000101001101101101";
        ram[31] = "0b00111100011110001111110011010110";
        ram[32] = "0b10111101000111111000011011100100";
        ram[33] = "0b00111100101010001011110100100011";
        ram[34] = "0b10111011010110110110101000011111";
        ram[35] = "0b00111011011101011101001101010110";
        ram[36] = "0b00111100100101111100100000001000";
        ram[37] = "0b00111101000110111111101111011111";
        ram[38] = "0b10111100111001011100001011010010";
        ram[39] = "0b00111101001110100100111110000111";
        ram[40] = "0b00111100110111111010101010001011";
        ram[41] = "0b10111011011111011111001110110110";
        ram[42] = "0b10111011110101010110001010011110";
        ram[43] = "0b10111100110001011010001111100100";
        ram[44] = "0b00111100000111101101001110010101";
        ram[45] = "0b10111100101101001010111011001001";
        ram[46] = "0b00111100101111000110111010110001";
        ram[47] = "0b10111011111110011101001010111111";
        ram[48] = "0b10111100100010101010010000110011";
        ram[49] = "0b10111101000110111010001111001010";
        ram[50] = "0b10111101000001010100101011000011";
        ram[51] = "0b10111011001110110011110010000010";
        ram[52] = "0b00111100110110101101110110011100";
        ram[53] = "0b00111101100010110010101101110111";
        ram[54] = "0b00111100100010110010011000111001";
        ram[55] = "0b10111101011101101111100011110000";
        ram[56] = "0b10111101010110000010011001100111";
        ram[57] = "0b00111010001010111111011101101010";
        ram[58] = "0b00111101011101010100110100011111";
        ram[59] = "0b10111100111101110010001011100010";
        ram[60] = "0b00111100111010011110011111111011";
        ram[61] = "0b10111101011001100110101010011000";
        ram[62] = "0b00111101010111000110100011101100";
        ram[63] = "0b00111011100001101011110111110101";
        ram[64] = "0b10111100011001111011110000111100";
        ram[65] = "0b00111100111110001001101001000110";
        ram[66] = "0b10111101011001101010100110000010";
        ram[67] = "0b00111100111100110111011101011100";
        ram[68] = "0b10111101010000100110100110011100";
        ram[69] = "0b10111101001100000001101110000110";
        ram[70] = "0b00111101101111110000100110010110";
        ram[71] = "0b10111100100011101001101100111001";
        ram[72] = "0b00111101000111100001001110110010";
        ram[73] = "0b00111101101100001111001100000010";
        ram[74] = "0b00111100100110100001100110000111";
        ram[75] = "0b10111100101001010001010111001111";
        ram[76] = "0b00111101000101010000000000001101";
        ram[77] = "0b10111100001111110110000110101010";
        ram[78] = "0b00111100100100100100100011011000";
        ram[79] = "0b10111100000110100101011001011000";
        ram[80] = "0b00111100001011111000000101100010";
        ram[81] = "0b10111010111111010011101100101010";
        ram[82] = "0b00111100000110110100000100111010";
        ram[83] = "0b10111100000101010111010001110001";
        ram[84] = "0b10111100100010000101110100110001";
        ram[85] = "0b00111100000111101011001000000111";
        ram[86] = "0b00111011110100110100000101011011";
        ram[87] = "0b10111101000011101110011010111000";
        ram[88] = "0b10111011001011101011100000001111";
        ram[89] = "0b10111101000011011000101010011000";
        ram[90] = "0b10111101010101101010010110010100";
        ram[91] = "0b00111100000101101101110100100111";
        ram[92] = "0b10111100101011000100010100000010";
        ram[93] = "0b00111011101110111101001110000000";
        ram[94] = "0b10111011000110100011010011001010";
        ram[95] = "0b00111101010001011101110110010000";
        ram[96] = "0b10111101000011011111000101011010";
        ram[97] = "0b00111010110100111100111111110110";
        ram[98] = "0b00111100111101000010110111001111";
        ram[99] = "0b10111101000000111100011111010110";
        ram[100] = "0b10111101010001011101000011111010";
        ram[101] = "0b00111100011001000001100100011010";
        ram[102] = "0b00111101001101000100110101000100";
        ram[103] = "0b10111101000100100101110111010001";
        ram[104] = "0b00111010100111100011010000110011";
        ram[105] = "0b10111100000110100100100111000011";
        ram[106] = "0b10111011111110000011011110110101";
        ram[107] = "0b10111011111111110000000000100110";
        ram[108] = "0b10111100000111101000100000010110";
        ram[109] = "0b10111100001011110011000110110001";
        ram[110] = "0b10111100011101010110001000010111";
        ram[111] = "0b00111100000001010001101010000111";
        ram[112] = "0b10111101011000010100010010001001";
        ram[113] = "0b10111100101110010011011010000010";
        ram[114] = "0b00111100101111101101100101011010";
        ram[115] = "0b10111100011101111010110101001011";
        ram[116] = "0b10111101000000100111101101110000";
        ram[117] = "0b10111101010010000111011001011100";
        ram[118] = "0b00111100111111000100011111100101";
        ram[119] = "0b10111011100110100101011001011000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(dut_mlp_xcel_fc1_bias) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


dut_mlp_xcel_fc1_bias_ram* meminst;


SC_CTOR(dut_mlp_xcel_fc1_bias) {
meminst = new dut_mlp_xcel_fc1_bias_ram("dut_mlp_xcel_fc1_bias_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~dut_mlp_xcel_fc1_bias() {
    delete meminst;
}


};//endmodule
#endif
