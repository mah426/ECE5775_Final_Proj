// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __dut_mlp_xcel_fc2_bias_H__
#define __dut_mlp_xcel_fc2_bias_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct dut_mlp_xcel_fc2_bias_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(dut_mlp_xcel_fc2_bias_ram) {
        ram[0] = "0b00111101011010010100100010011001";
        ram[1] = "0b00111101101000110111000011001110";
        ram[2] = "0b10111100101010111101000110101011";
        ram[3] = "0b00111101100011110101100001111101";
        ram[4] = "0b00111101100010101101001001010110";
        ram[5] = "0b00111101101010001100011010010011";
        ram[6] = "0b00111101100000110000111111010000";
        ram[7] = "0b00111101110110011110111000000011";
        ram[8] = "0b00111101000001101101100000101100";
        ram[9] = "0b00111101101011101001111011100100";
        ram[10] = "0b10111101001001001101110000100011";
        ram[11] = "0b10111100010011011100100001110101";
        ram[12] = "0b00111101101001100101010100011001";
        ram[13] = "0b10111101100100001000110011000101";
        ram[14] = "0b00111101001010011111111100001101";
        ram[15] = "0b00111101001101000010011110000101";
        ram[16] = "0b10111100111111011101011001011010";
        ram[17] = "0b00111101001111011100001101111010";
        ram[18] = "0b10111101100111100101110000001100";
        ram[19] = "0b00111101100011100111010101111001";
        ram[20] = "0b10111101101010010011011000111111";
        ram[21] = "0b00111100100110110110010011100000";
        ram[22] = "0b00111101100000000101000111001010";
        ram[23] = "0b00111100100101101110000101011000";
        ram[24] = "0b00111100000100111011011111011000";
        ram[25] = "0b00111011000010001100011000001101";
        ram[26] = "0b00111100110011101011101110111010";
        ram[27] = "0b00111101010101100010011010110011";
        ram[28] = "0b10111100110101101011011001011011";
        ram[29] = "0b00111101101010101010001010100001";
        ram[30] = "0b00111011001101100011000010101001";
        ram[31] = "0b10111100001001000010011010111011";
        ram[32] = "0b00111101101010111100110111111111";
        ram[33] = "0b00111101101010011011101101101011";
        ram[34] = "0b00111011101001111010010000011110";
        ram[35] = "0b00111100001000110001000111101000";
        ram[36] = "0b10111101011100000000100110110011";
        ram[37] = "0b00111101101001001011010001001010";
        ram[38] = "0b00111101001110000010010111100001";
        ram[39] = "0b10111100010001001101011001011110";
        ram[40] = "0b00111101100101001011010010001101";
        ram[41] = "0b10111101101010110011101110111000";
        ram[42] = "0b00111101001000110000101110011110";
        ram[43] = "0b00111101011110010111111011011100";
        ram[44] = "0b10111011100100100010110110010101";
        ram[45] = "0b10111011000101011010111100101001";
        ram[46] = "0b10111100101011110001100010000111";
        ram[47] = "0b00111101100010010010001111100110";
        ram[48] = "0b00111101000100000011001100011110";
        ram[49] = "0b00111101000001001111010011000111";
        ram[50] = "0b00111101000011101000111010100100";
        ram[51] = "0b10111101011000111100101110000001";
        ram[52] = "0b00111101101101010101101000111010";
        ram[53] = "0b10111101011101010101010110000010";
        ram[54] = "0b00111100100011001011110100010010";
        ram[55] = "0b00111000011111111101101001000000";
        ram[56] = "0b00111100110000111011000011000100";
        ram[57] = "0b00111100111011110100001110000101";
        ram[58] = "0b00111101100000011010010100000001";
        ram[59] = "0b10111101011001001010011110110101";
        ram[60] = "0b10111101010011101111000000101000";
        ram[61] = "0b00111101101100001111011110111010";
        ram[62] = "0b00111100101100101100111010001001";
        ram[63] = "0b00111101010010000100100101000101";
        ram[64] = "0b10111101011001000010111100011111";
        ram[65] = "0b00111101110010010000011000000011";
        ram[66] = "0b00111101110100011110011111011010";
        ram[67] = "0b00111101111001001011111001000000";
        ram[68] = "0b10111101011011110000001110001110";
        ram[69] = "0b00111101001011000111001000011001";
        ram[70] = "0b00111101100100111000001001011110";
        ram[71] = "0b00111100001010010101110010000101";
        ram[72] = "0b00111101111001000111010001010100";
        ram[73] = "0b00111101010101011111111011011010";
        ram[74] = "0b00111100110000011001010111001101";
        ram[75] = "0b10111101001001011111101001100110";
        ram[76] = "0b00111101001000111110001010010011";
        ram[77] = "0b00111101101001100111011100101101";
        ram[78] = "0b00111101001101010001000101011010";
        ram[79] = "0b10111100111100011010011111100011";
        ram[80] = "0b00111001110001100010111001001101";
        ram[81] = "0b10111101010101011011101110111111";
        ram[82] = "0b00111101100010011010111101011100";
        ram[83] = "0b10111100000010100101010010000010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(dut_mlp_xcel_fc2_bias) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


dut_mlp_xcel_fc2_bias_ram* meminst;


SC_CTOR(dut_mlp_xcel_fc2_bias) {
meminst = new dut_mlp_xcel_fc2_bias_ram("dut_mlp_xcel_fc2_bias_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~dut_mlp_xcel_fc2_bias() {
    delete meminst;
}


};//endmodule
#endif
